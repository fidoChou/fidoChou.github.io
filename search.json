[{"title":"在 Hexo 中使用数学公式","url":"http://jocolorful.com/2021/07/06/工具-在hexo中使用数学公式/","content":"<h2 id=\"用法\">用法</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> md = <span class=\"built_in\">window</span>.markdownit();</span><br><span class=\"line\">md.use(<span class=\"built_in\">window</span>.markdownitLatex2img, </span><br><span class=\"line\">  &#123;<span class=\"attr\">style</span>: <span class=\"string\">\"filter: opacity(75%);transform:scale(0.75);text-align:center;\"</span>&#125; <span class=\"comment\">//可选</span></span><br><span class=\"line\">);</span><br><span class=\"line\">md.render(input.value);</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-数学公式\">1 数学公式</h2>\n<h3 id=\"1-1-内联公式\">1.1 内联公式</h3>\n<p><strong>开头的<code>$</code>必须在其右边紧跟一个非空格字符，而结尾的<code>$</code>必须在其左边紧接一个非空格字符，并且不能紧跟一个数字。</strong></p>\n<ul>\n<li>勾股定理: <img src=\"https://math.now.sh?inline=a%5E2%2Bb%5E2%3Dc%5E2\" style=\"display:inline-block;margin: 0;\"/></li>\n<li>等差数列求和公式: <img src=\"https://math.now.sh?inline=S_%7Bn%7D%3Dn%20a_%7B1%7D%2B%5Cfrac%7Bn%28n-1%29%7D%7B2%7D%20d%2C%20n%20%5Cin%20N%5E%7B*%7D\" style=\"display:inline-block;margin: 0;\"/></li>\n<li>牛顿-莱布尼茨公式: <img src=\"https://math.now.sh?inline=%5Cint_%7Ba%7D%5E%7Bb%7D%20f%28x%29%20d%20x%3DF(b)-F(a)%3D%5Cleft.F(x)%5Cright%7C_%7Ba%7D%20%5E%7Bb%7D\" style=\"display:inline-block;margin: 0;\"/></li>\n<li>二项分布: <img src=\"https://math.now.sh?inline=P_%7Bn%7D%28k%29%3DC_%7Bn%7D%5E%7Bk%7D%20p%5E%7Bk%7D%20q%5E%7Bn-k%7D%20%5Cquad%20k%3D0%2C1%2C2%20%5Cldots%20%5Cldots%2C%20n\" style=\"display:inline-block;margin: 0;\"/></li>\n</ul>\n<h3 id=\"1-2-块公式\">1.2 块公式</h3>\n<p>正态分布<img src=\"https://math.now.sh?inline=X%20%5Csim%20N%28%5Cmu%2C%5Csigma%5E2%29\" style=\"display:inline-block;margin: 0;\"/>:</p>\n<p style=\"\"><img src=\"https://math.now.sh?from=f%28x%29%20%3D%20%5Cfrac%7B1%7D%7B%5Csqrt%7B2%5Cpi%7D%5Csigma%7De%5E%7B-%5Cfrac%7B(x-%5Cmu)%5E2%7D%7B2%5Csigma%5E2%7D%7D%0A\" /></p><p>斐波那契数列<img src=\"https://math.now.sh?inline=A_n%3DA_%7Bn-1%7D%2BA_%7Bn-2%7D\" style=\"display:inline-block;margin: 0;\"/>,前后两项的比值逐渐收敛到黄金分割比例</p>\n<p style=\"\"><img src=\"https://math.now.sh?from=%5Clim_%7Bn%5Cto%20%5Cinfty%7D%5Cfrac%7BA_%7Bn-1%7D%7D%7BA_n%7D%3D%5Cfrac%7B%5Csqrt%7B5%7D-1%7D%7B2%7D.%0A\" /></p><p>因式分解</p>\n<p style=\"\"><img src=\"https://math.now.sh?from=%5Cbegin%7Bsplit%7D%28x%E2%88%921%29(x%E2%88%923)%26%3Dx%5E2%E2%88%924x%2B3%20%5C%5C%20%0A%26%3Dx%5E2%E2%88%924x%2B4%E2%88%921%20%5C%5C%20%0A%26%3D(x%E2%88%922)%5E2%E2%88%921%0A%5Cend%7Bsplit%7D%0A\" /></p><p>狄利克雷函数</p>\n<p style=\"\"><img src=\"https://math.now.sh?from=D%28x%29%3D%0A%5Cbegin%7Bcases%7D%0A1%2C%26%20x%20%5Cin%20Q%20%5C%5C%0A0%2C%26%20x%20%5Cnotin%20Q%0A%5Cend%7Bcases%7D%0A\" /></p><p>高斯公式</p>\n<p style=\"\"><img src=\"https://math.now.sh?from=%5Ciiint_%7B%5COmega%7D%5Cleft%28%5Cfrac%7B%5Cpartial%20P%7D%7B%5Cpartial%20x%7D%2B%5Cfrac%7B%5Cpartial%20Q%7D%7B%5Cpartial%20y%7D%2B%5Cfrac%7B%5Cpartial%20R%7D%7B%5Cpartial%20z%7D%5Cright%29%20d%20v%3D%5Ciint_%7B%5CSigma%7D%20P%20d%20y%20d%20z%2BQ%20d%20z%20d%20x%2BR%20d%20x%20d%20y%0A\" /></p><p>范德蒙行列式</p>\n<p style=\"\"><img src=\"https://math.now.sh?from=D_%7Bn-1%7D%3D%5Cleft%7C%5Cbegin%7Barray%7D%7Bcccc%7D%0A1%20%26%201%20%26%20%5Cdots%20%26%201%20%5C%5C%0Ax_%7B2%7D%20%26%20x_%7B3%7D%20%26%20%5Cdots%20%26%20x_%7Bn%7D%20%5C%5C%0A%5Cvdots%20%26%20%5Cvdots%20%26%20%26%20%5Cvdots%20%5C%5C%0Ax_%7B2%7D%5E%7Bn-2%7D%20%26%20x_%7B3%7D%5E%7Bn-2%7D%20%26%20%5Cdots%20%26%20x_%7Bn%7D%5E%7Bn-2%7D%0A%5Cend%7Barray%7D%5Cright%7C%3D%5Cprod_%7B2%20%5Cleq%20j%3Ci%20%5Cleq%20n%7D%5Cleft%28x_%7Bi%7D-x_%7Bj%7D%5Cright%29\" /></p><p>线性方程组</p>\n<p style=\"\"><img src=\"https://math.now.sh?from=%5Cleft%5C%7B%5Cbegin%7Baligned%7D%0Aa_%7B11%7D%20x_%7B1%7D%2Ba_%7B12%7D%20x_%7B2%7D%2B%5Ccdots%2Ba_%7B1%20n%7D%20x_%7Bn%7D%20%26%3Db_%7B1%7D%20%5C%5C%0Aa_%7B21%7D%20x_%7B1%7D%2Ba_%7B22%7D%20x_%7B2%7D%2B%5Ccdots%2Ba_%7B2%20n%7D%20x_%7Bn%7D%20%26%3Db_%7B2%7D%20%5C%5C%0A%5Ccdots%20%5Ccdots%20%5Ccdots%20%5C%5C%0Aa_%7Bm%201%7D%20x_%7B1%7D%2Ba_%7Bm%202%7D%20x_%7B2%7D%2B%5Ccdots%2Ba_%7Bm%20n%7D%20x_%7Bn%7D%20%26%3Db_%7Bm%7D%0A%5Cend%7Baligned%7D%5Cright.\" /></p><h2 id=\"2-物理公式\">2 物理公式</h2>\n<ul>\n<li>牛顿第一定律: <img src=\"https://math.now.sh?inline=%5Csum%20%5Cvec%7BF%7D_%7Bi%7D%3D%5Cfrac%7B%5Cmathrm%7Bd%7D%20%5Cvec%7Bv%7D%7D%7B%5Cmathrm%7Bd%7D%20t%7D%3D0\" style=\"display:inline-block;margin: 0;\"/></li>\n<li>牛顿第二定律: <img src=\"https://math.now.sh?inline=%5Cvec%7BF%7D%3D%5Cfrac%7B%5Cmathrm%7Bd%7D%20m%7D%7B%5Cmathrm%7Bd%7D%20t%7D%20%5Cvec%7Bv%7D%2Bm%20%5Cfrac%7B%5Cmathrm%7Bd%7D%20%5Cvec%7Bv%7D%7D%7B%5Cmathrm%7Bd%7D%20t%7D%3D%5Cfrac%7B%5Cmathrm%7Bd%7D%20m%7D%7B%5Cmathrm%7Bd%7D%20t%7D%20%5Cvec%7Bv%7D%2Bm%20%5Cvec%7Ba%7D%3D%5Cfrac%7B%5Cmathrm%7Bd%7D%20m%7D%7B%5Cmathrm%7Bd%7D%20t%7D%20%5Cvec%7Bv%7D%2Bm%20%5Cfrac%7B%5Cmathrm%7Bd%7D%5E%7B2%7D%20%5Cvec%7Br%7D%7D%7B%5Cmathrm%7Bd%7D%20t%5E%7B2%7D%7D\" style=\"display:inline-block;margin: 0;\"/></li>\n<li>牛顿第三定律: <img src=\"https://math.now.sh?inline=%5Coverrightarrow%7BF_%7B12%7D%7D%3D-%5Coverrightarrow%7BF_%7B21%7D%7D\" style=\"display:inline-block;margin: 0;\"/></li>\n<li>质能守恒: <img src=\"https://math.now.sh?inline=E%3Dmc%5E2\" style=\"display:inline-block;margin: 0;\"/></li>\n</ul>\n<p>万有引力定律: <img src=\"https://math.now.sh?inline=F%3D%5Cfrac%7BG%20M%20m%7D%7Br%5E%7B2%7D%7D\" style=\"display:inline-block;margin: 0;\"/></p>\n<p style=\"\"><img src=\"https://math.now.sh?from=G%20%5Cfrac%7Bm%20M%7D%7B%28r%2Bh%29%5E%7B2%7D%7D%3Dm%20%5Cfrac%7B%5Cnu%5E%7B2%7D%7D%7B(r%2Bh)%7D%0A\" /></p><p>基尔霍夫定律</p>\n<p style=\"\"><img src=\"https://math.now.sh?from=%5Cleft%5B%5Cfrac%7B%5Cpartial%5Cleft%28%5CDelta_%7Br%7D%20H_%7Bm%7D%5Cright%29%7D%7B%5Cpartial%20T%7D%5Cright%5D_%7Bp%7D%3D%5Csum_%7BB%7D%20v_%7BB%7D%20C_%7Bp%2C%20m%7D(B)%0A\" /></p><p>热力学第二定律</p>\n<p style=\"\"><img src=\"https://math.now.sh?from=d%20S%20%5Cgeq%20%5Cfrac%7B%5Cdelta%20Q%7D%7BT%7D%0A\" /></p><h2 id=\"3-化学公式\">3 化学公式</h2>\n<p>离子反应与沉淀: <img src=\"https://math.now.sh?inline=%5Cce%7BSO4%5E2-%20%2B%20Ba%5E2%2B%20-%3E%20BaSO4%20v%7D\" style=\"display:inline-block;margin: 0;\"/></p>\n<p>氮气氢气合成氨</p>\n<p style=\"\"><img src=\"https://math.now.sh?from=%5Cce%7BN2%20%2B%203H2%20%3C%3D%3ET%5B%E9%AB%98%E6%B8%A9%E3%80%81%E5%8A%A0%E5%8E%8B%5D%5B%E5%82%AC%E5%8C%96%E5%89%82%5D%202NH3%7D%0A\" /></p><p>化学平衡常数:<img src=\"https://math.now.sh?inline=%5Cmathrm%7BZn%7D%2B2%20%5Cmathrm%7BHCl%7D%28%5Cmathrm%7Baq%7D%29%3D%5Cmathrm%7BH%7D_%7B2%7D%2B%5Cmathrm%7BZnCl%7D_%7B2%7D%20%5Cquad(%5Cmathrm%7Baq%7D)\" style=\"display:inline-block;margin: 0;\"/></p>\n<p style=\"\"><img src=\"https://math.now.sh?from=K%5E%7B%5Ctheta%7D%3D%5Cfrac%7B%5Cleft%5Bp%5Cleft%28%5Cmathrm%7BH%7D_%7B2%7D%5Cright%29%20%2F%20p%5E%7B%5Ctheta%7D%5Cright%5D%5Cleft%5Bc%5Cleft(%5Cmathrm%7BZnCl%7D_%7B2%7D%5Cright)%5Cright%5D%7D%7Bc%5E%7B2%7D(%5Cmathrm%7BHC%7D)%7D%0A\" /></p><h2 id=\"4-语法参考\">4 语法参考</h2>\n<p><a href=\"https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" target=\"_blank\" rel=\"noopener\">MathJax basic tutorial and quick reference</a></p>\n","categories":["工具集合"],"tags":[]},{"title":"统计好数字的数目","url":"http://jocolorful.com/2021/07/05/算法-快速幂/","content":"<blockquote>\n<p>不会快速幂的我留下了超时的悔恨泪水</p>\n</blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/count-good-numbers/\" target=\"_blank\" rel=\"noopener\">统计好数字的数目</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=GbDtCFhq20A\" target=\"_blank\" rel=\"noopener\">快速幂：油管讲解</a></p>\n<h1>快速幂算法简介</h1>\n<p>求 x^n 最简单的方法是通过循环将 n 个 x 乘起来，依次求 x^1, x^2, …, x^{n-1}, x^nx 时间复杂度为 O(n) 。</p>\n<p>快速幂法可将时间复杂度降低至 O(log n) ，以下从 「分治法」 和 「二进制」 两个角度解析快速幂法。</p>\n<h2 id=\"二进制角度\">二进制角度</h2>\n<blockquote>\n<p>利用十进制数字 n 的二进制表示，可对快速幂进行数学化解释</p>\n</blockquote>\n<h3 id=\"n-为-2-的幂，以-a-64-为例：\">n 为 2 的幂，以 a^64 为例：</h3>\n<blockquote>\n<p>其中 n = 64 为 2 的幂</p>\n</blockquote>\n<ol>\n<li>朴素算法进行逐个相乘：a * a … * a (时间复杂度为 O(n))</li>\n</ol>\n<center>\n\t<img src=\"/images/算法/快速幂-01.png\"  width=\"700px\"/>\n</center>\n<ol start=\"2\">\n<li>当 n 为 2 的幂时，我们只需 6 次乘法，时间复杂度为 O(log n)</li>\n</ol>\n<center>\n\t<img src=\"/images/算法/快速幂02.png\"  width=\"700px\"/>\n</center>\n<h3 id=\"n-不为-2-的幂，以-a-105-为例：\">n 不为 2 的幂，以 a^105 为例：</h3>\n<center>\n\t<img src=\"/images/算法/快速幂03.png\"  width=\"700px\"/>\n</center>\n<center>\n\t<img src=\"/images/算法/快速幂04.png\"  width=\"700px\"/>\n</center>\n<p>以上：计算 a^8，a^32，a^64次方事件容易的事，所以算法关键在于<font color=\"red\">将 n 转化为 2 的幂之和</font></p>\n<p>105 的二进制表示为：1101001，将这几个数字拆开刚好得到：a^1, a^8，a^32，a^64</p>\n<center>\n\t<img src=\"/images/算法/快速幂05.png\"  width=\"700px\"/>\n</center>\n<h3 id=\"伪代码且以-7-105-为例：\">伪代码且以 7^105 为例：</h3>\n<center>\n\t<img src=\"/images/算法/快速幂06.png\"  width=\"700px\"/>\n</center>\n<h3 id=\"JS-伪代码\">JS 伪代码</h3>\n","categories":["算法"],"tags":["快速幂"]},{"title":"盛最多水的容器","url":"http://jocolorful.com/2021/07/02/算法-盛最多水的容器/","content":"<p><a href=\"https://leetcode-cn.com/problems/container-with-most-water/\" target=\"_blank\" rel=\"noopener\">LC:11 算法-盛最多水的容器</a></p>\n<p>[1(left), 8, 6, 2, 5, 4, 8, 3, 7(right)]</p>\n<h1>方法一：双指针</h1>\n<p>在初始时，左右指针分别指向数组的左右两端，它们可以容纳的水量为</p>\n<blockquote>\n<p>min(1, 7) * 8</p>\n</blockquote>\n<p>因为，由于容纳的水量是由</p>\n<blockquote>\n<p>两个指针指向的数字中较小值 ∗ 指针之间的距离</p>\n</blockquote>\n<p>因此，我们移动 <font color=\"red\">数字较小的那个指针。</font></p>\n<p>(先假设 总是移动数字较小的那个指针的思路是正确的，在走完流程之后再去进行证明。)</p>\n<p>所以，我们将左指针向右移动：此时可以容纳的水量为: min(8, 7) * 7 = 49</p>\n<p>[1, 8(left), 6, 2, 5, 4, 8, 3, 7(right)]</p>\n<p>(👆由于右指针对应的数字较小，移动右指针：👇)</p>\n<p>[1, 8(left), 6, 2, 5, 4, 8, 3(right), 7] 此时可以容纳的水量为：min(8, 3) * 6 = 18</p>\n<p>（👆 由于右指针对应的数字较小，我们移动右指针：👇）</p>\n<p>[1, 8(left), 6, 2, 5, 4, 8(right), 3, 7] 此时可以容纳的水量为：min(8, 8) * 5 = 40</p>\n<p>（👆两指针对应的数字相同，我们可以任意移动一个，例如左指针：👇）</p>\n<p>[1, 8, 6(left), 2, 5, 4, 8(right), 3, 7]</p>\n<p>此时可以容纳的水量为 min(6, 8) * 4 = 24。由于左指针对应的数字较小，我们移动左指针，并且可以发现，在这之后左指针对应的数字总是较小，因此我们会一直移动左指针，直到两个指针重合。</p>\n","categories":["算法"],"tags":["数组 双指针"]},{"title":"动态规划","url":"http://jocolorful.com/2021/06/30/算法-打家劫舍/","content":"<p>动态规划： 「Dynamic Programming」</p>\n<ul>\n<li><a href=\"https://leetcode-cn.com/problems/house-robber/\" target=\"_blank\" rel=\"noopener\">打家劫舍</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/the-masseuse-lcci/\" target=\"_blank\" rel=\"noopener\">按摩师</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/min-cost-climbing-stairs/\" target=\"_blank\" rel=\"noopener\">使用最小花费爬楼梯</a></li>\n</ul>\n<p>以上三个问题都是 dp 的一类问题，解法也一样。</p>\n<p>dp 的解题思路最重要的就是寻找<font color=\"red\">「状态转移方程」</font></p>\n<p>状态转移方程往往依赖上一个结果的计算值：比如 <a href=\"https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/\" target=\"_blank\" rel=\"noopener\">斐波那契</a> 以及 <a href=\"https://leetcode-cn.com/problems/pascals-triangle/\" target=\"_blank\" rel=\"noopener\">杨辉三角</a></p>\n<p>对于「斐波那契」</p>\n<blockquote>\n<p>f(n) = f(n - 1) + fn(n - 2)</p>\n</blockquote>\n<p>对于「杨辉三角」(排除边界 case 1)</p>\n<blockquote>\n<p>dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]</p>\n</blockquote>\n<p>动规总能以一个数学公式进行表达</p>\n<p><font color=\"red\">但 </font>这并不是动规的精髓所在，寻在「状态转移方程」往往需要寻找<font color=\"red\"><a href=\"https://github.com/labuladong/fucking-algorithm/blob/master/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84.md\" target=\"_blank\" rel=\"noopener\">「最优子结构」</a></font>：可以从子问题的最优结果推出更大规模问题的最优结果。</p>\n<p>刷了一些题目之后就会发现：基本上就是从一个小规模内求一个最大最小值。「一看就会，一写就废」</p>\n<p>以 「使用最小花费爬楼梯」为例：</p>\n<ol>\n<li>爬楼梯要么从第 0 步 开始，要么从 第 1 步开始。</li>\n<li>对于第 i 次解决方案而言，要么是从 i - 1 过来，要么是从 i - 2 过来。那么 dp[i] 的最优解为</li>\n</ol>\n<p><code>dp[i] = Math.min(dp[i - 2], dp[i - 1]) + cost[i]</code></p>\n<ol start=\"3\">\n<li>对于结果而言，要么是从最后一步，要么是从前两步过来，因为最优的结果是：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.min(dp[dp.length - 2], dp[dp.length - 1])</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">cost</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minCostClimbingStairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cost</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cost || !cost.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> dp = []</span><br><span class=\"line\">\tdp[<span class=\"number\">0</span>] = cost[<span class=\"number\">0</span>]</span><br><span class=\"line\">\tdp[<span class=\"number\">1</span>] = cost[<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt; cost.length; i++) &#123;</span><br><span class=\"line\">\t\tdp[i] = <span class=\"built_in\">Math</span>.min(dp[i - <span class=\"number\">2</span>], dp[i - <span class=\"number\">1</span>]) + cost[i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(dp[dp.length - <span class=\"number\">2</span>], dp[dp.length - <span class=\"number\">1</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["动态规划"]},{"title":"文海拾贝","url":"http://jocolorful.com/2021/06/29/文海拾贝/","content":"<h1>朱自清</h1>\n<h2 id=\"匆匆\"><a href=\"https://www.douban.com/group/topic/2322595/\" target=\"_blank\" rel=\"noopener\">匆匆</a></h2>\n<p>本以为作者通过《匆匆》表达了对时间流逝的惋惜。</p>\n<blockquote>\n<p>我的日子滴在时间的流里，没有声音，也没有影子。我不禁头涔涔而泪潸潸了。</p>\n</blockquote>\n<blockquote>\n<p>过去的日子如轻烟，被微风吹散了，如薄雾，被初阳蒸融了；我留着些什么痕迹呢？我何曾留着像游丝样的痕迹呢？我赤裸裸来到这世界，转眼间也将赤裸裸的回去罢？</p>\n</blockquote>\n<h3 id=\"创作背景\">创作背景</h3>\n<p>《匆匆》写于1922年3月，恰逢「五四运动」落潮期。当时的「五四」知识青年忙于救国，忙于追求进步；他们备受当时政治环境的压迫，却没有停止追求进步的脚步；他们苦恼、彷徨， 却在冷静的沉思后继续追赶人生的路。</p>\n<p>「五四」运动落潮期的现实情况让朱自清失望，但作者在彷徨中并不甘心于沉沦。朱自清站在他的「中和主义」立场上执著地探寻与追求。</p>\n<p>作者认为：「生活中的各种过程都有它独立的意义和价值——每一刹那有它的意义与价值!每一刹那在持续的时间里，有它相当的位置。」</p>\n<h2 id=\"温州的踪迹\"><a href=\"https://millionbook.net/mj/z/zhuziqing/zzqs/005.htm\" target=\"_blank\" rel=\"noopener\">温州的踪迹</a></h2>\n<h3 id=\"月朦胧，鸟朦胧，帘卷海棠红\">月朦胧，鸟朦胧，帘卷海棠红</h3>\n<blockquote>\n<p>「钩弯」垂着双穗，石青色；丝缕微乱，若小曳于轻风中。纸右一圆月，淡淡的青光遍满纸上；月的纯净，柔软与平和，如一张睡美人的脸。</p>\n</blockquote>\n<h3 id=\"绿\">绿</h3>\n<blockquote>\n<p>梅雨潭是一个瀑布潭</p>\n</blockquote>\n<blockquote>\n<p>梅雨潭闪闪的绿色招引着我们；我们开始追捉她那离合的神光了。</p>\n</blockquote>\n<blockquote>\n<p>那醉人的绿呀！仿佛一张极大极大的荷叶铺着，满是奇异的绿呀。</p>\n</blockquote>\n<blockquote>\n<p>瀑布在襟袖之间；但我的心中已没有瀑布了。我的心随潭水的绿而摇荡。</p>\n</blockquote>\n<blockquote>\n<p>我若能裁你以为带，我将赠给那轻盈的舞女；她必能临风飘举了。我若能挹你以为眼，我将赠给那善歌的盲妹；她必明眸善睐了。</p>\n</blockquote>\n<h3 id=\"白水漈\">白水漈</h3>\n<blockquote>\n<p>这也是个瀑布；但是太薄了，又太细了。有时闪着些须的白光；等你定睛看去，却又没有 —— 只剩一片飞烟而已。从前有所谓「雾縠」，大概就是这样了。所以如此，全由于岩石中间突然空了一段；水到那里，无可凭依，凌虚飞下，便扯得又薄又细了。当那空处，最是奇迹。白光嬗为飞烟，已是影子，有时却连影子也不见。有时微风过来，用纤手挽着那影子，它便袅袅的成了一个软弧；但她的手才松，它又像橡皮带儿似的，立刻伏伏帖帖的缩回来了。我所以猜疑，或者另有双不可知的巧手，要将这些影子织成一个幻网。——微风想夺了她的，她怎么肯呢？<br>\n　　幻网里也许织着诱惑；我的依恋便是个老大的证据</p>\n</blockquote>\n<h3 id=\"四生命的价格-——-七毛钱\">四生命的价格 —— 七毛钱</h3>\n<blockquote>\n<p>看了几眼，觉得和我们的孩子也没有什么差异；我看不出她的低贱的生命的符记 —— 如我们看低贱的货色时所容易发见的符记。我回到自己的饭桌上，看看阿九和阿菜，始终觉得和那个女孩没有什么不同！但是，我毕竟发见真理了！我们的孩子所以高贵，正因为我们不曾出卖他们，而那个女孩所以低贱，正因为她是被出卖的；这就是她只值七毛钱的缘故了！呀，聪明的真理！</p>\n</blockquote>\n<p>原载《我们的七月》</p>\n","categories":[],"tags":[]},{"title":"统计字典序元音字符串的数目","url":"http://jocolorful.com/2021/06/25/算法-统计字典序元音字符串的数目/","content":"<p><a href=\"https://leetcode-cn.com/problems/count-sorted-vowel-strings/\" target=\"_blank\" rel=\"noopener\">LC1641:统计字典序元音字符串的数目</a></p>\n<p>感觉有点像全排列的数学题</p>\n<h1>方法一：暴力</h1>\n<h1>方法二：动态规划</h1>\n<p><a href=\"https://www.youtube.com/watch?v=gdH4yfgfwiU\" target=\"_blank\" rel=\"noopener\">Fisher Coder</a></p>\n<h1>方法二：数学</h1>\n<p>fn = (n + 4) * (n + 3) * (n + 2) * (n + 1) / 24</p>\n","categories":["算法"],"tags":[]},{"title":"React18 所需要知道的","url":"http://jocolorful.com/2021/06/23/前端-React-18-所需要知道的/","content":"<p><a href=\"https://javascript.plainenglish.io/what-you-need-to-know-about-react-18-54070f6bc4a1\" target=\"_blank\" rel=\"noopener\">What You Need to Know About React 18</a></p>\n<h1>自动的批量更新</h1>\n<p>批量更新：React 会尝试将同一上下文中触发的多个更新合并为一个好处是：</p>\n<ol>\n<li>避免页面重复渲染</li>\n<li>状态按顺序处理，不会出现竞争态问题，最终触发渲染的是异步流程。</li>\n</ol>\n<p>但值得注意的是，在一<font color=\"red\">异步的方法回调</font>中，React 并不能进行批量更新。<br>\n（这里可以尝试用看似同步的方式调用 async/await 的调用，是什么效果）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// this code will be re-render-twice</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> handleClick =<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">  fetch().then().catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">    setCount(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c+<span class=\"number\">1</span>)</span><br><span class=\"line\">    setF(<span class=\"function\"><span class=\"params\">f</span>=&gt;</span> !f)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解释：React 的批量更新只在浏览器的 event 中生效（比如点击时间），但是上面的代码更新状态是事件已经处理完成，在 fetch 的回调中。<br>\n那么V18 以后，状态管理无论是在哪里，只会被更新一次。</p>\n<h2 id=\"不需要批量更新\">不需要批量更新</h2>\n<p>使用 <code>flushSync</code> 去重新渲染组件</p>\n<h1>SSR support for Suspense</h1>\n<p>对典型 SSR 的基本扩展。在一个典型的 React SSR 应用中，流程基本上是：</p>\n<ol>\n<li>服务端获取 UI 相关的展示数据</li>\n<li>服务端渲染整个 APP 的 HTML 发送给客户端</li>\n<li>客户端除了 HTML 以外，还需下载 JS bundle 部分</li>\n<li>在最后一步，客户端连接 JS 的逻辑和 HTML 绑定。（称之为：脱水）</li>\n</ol>\n<p>缺点：在下一步可以开始之前，整个应用程序的每个步骤都必须立即完成。这样会导致在初始化时加载时长变慢。</p>\n<p>React 18 中 \t<code>&lt;Suspense&gt;</code> 组件已经以这样的方式进行了革命性的变更：</p>\n<p>它将应用程序分解为更小的独立单元，这些单元再经历上面提及的每一部分。</p>\n<p>因此：这样一旦用户看到内容，都将是可交互的。</p>\n<h1>Transition</h1>\n<p>这是即将发布的令人难以置信的功能。它可以让用户解决大屏幕频繁更新的问题。<br>\n例如，考虑在过滤数据列表的输入字段中键入。您需要将字段的值存储在 state 中，以便您可以过滤数据并控制该输入字段的值。您的代码可能如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Update the input value and search results</span></span><br><span class=\"line\">setSearchQuery(input)</span><br></pre></td></tr></table></figure>\n<p>在这里，每当用户键入一个字符时，我们都会更新输入值并使用新值来搜索列表并显示结果。</p>\n<p>对于大屏幕更新，这可能会导致页面在呈现所有内容时出现延迟，从而使打字或其他交互感觉缓慢且无响应。即使列表不是太长，列表项本身也可能很复杂，每次击键都不同，并且可能没有明确的方法来优化它们的呈现.</p>\n<p>从概念上讲，问题在于需要进行两种不同的更新。</p>\n<p>第一次是紧急更新，用于更改输入字段的值<br>\n第二个是显示搜索结果的不太紧急的更新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Urgent: Show what was typed</span><br><span class=\"line\">setInputValue(input)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Not urgent: Show the results</span><br><span class=\"line\">setSearchQuery(input)</span><br></pre></td></tr></table></figure>\n<p>新的 <code>startTransition</code> API 通过让您能够将更新标记为「过渡」来解决这个问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; startTransition &#125; from &#39;react&#39;;</span><br><span class=\"line\">&#x2F;&#x2F; Urgent: Show what was typed</span><br><span class=\"line\">setInputValue(input);</span><br><span class=\"line\">&#x2F;&#x2F; Mark any state updates inside as transitions</span><br><span class=\"line\">startTransition(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; Transition: Show the results</span><br><span class=\"line\">  setSearchQuery(input);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","categories":["前端相关"],"tags":["React"]},{"title":"工具集","url":"http://jocolorful.com/2021/06/23/工具集/","content":"<h1>编辑器 Sublime Text</h1>\n<ul>\n<li>TrailingSpacer：高亮显示多余的空格和Tab：</li>\n<li>Gitblame： 展示 git history。以方便有 bug 的时候找相应的开（reng）发（guo）</li>\n<li>Emmet：快速生产 html 的template。其实用框架久了很久不写原生。但有时写写 Demo 会用到</li>\n<li>Babel：关于 ES6、React 代码展示高亮用到</li>\n<li>HTML/CSS/JS prettyfy，格式化代码</li>\n</ul>\n<h1>Chrome 插件</h1>\n<ul>\n<li>JSONView</li>\n<li>Charset</li>\n<li>OctoTree</li>\n</ul>\n","categories":["工具集合"],"tags":[]},{"title":"比特位计数","url":"http://jocolorful.com/2021/06/23/算法-比特位计数/","content":"<p><a href=\"https://leetcode-cn.com/problems/counting-bits/\" target=\"_blank\" rel=\"noopener\">LC338: 比特位计数</a></p>\n<h2 id=\"方法一：Brian-Kernighan-算法\">方法一：Brian Kernighan 算法</h2>\n<p>算法：对任何一个数 n，n &amp; ( n − 1 ) 的结果是 n 的比特位<font color=\"red\">最右端的 1 </font>变为 0。</p>\n<p>例如，n = 12 , n − 1 = 11 , 11 &amp; 12 = 8</p>\n<center><img src=\"/images/Brian-Kernighan.jpeg\" width=\"600px\" /></center>\n<p>解释：结果 8 的 2 进制中，右边第三位为 1，因此经过 「Brian Kernighan」计算变为了 0</p>\n<p>因此只要重复计算对 n 进行重复计算, 直到 n 为 0，其中操作的次数，即为 1 的个数</p>\n<p>伪代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while (n &gt; 0)</span><br><span class=\"line\">\tn &#x3D; n &amp; (n - 1)</span><br><span class=\"line\">\tcount ++</span><br></pre></td></tr></table></figure>\n<p><strong>位运算：妙不可言！</strong></p>\n<h2 id=\"方法二：dp-最高有效位\">方法二：dp 最高有效位</h2>\n<p>最高有效位：对于正整数 x 而言，如果存在最大的正整数满足：</p>\n<p><code>y &lt;= x 并且 y 是 2 的整数次幂</code></p>\n<p>则称 y 为 x 的最高有效位。</p>\n<p>最高有效位的特性包括：</p>\n<ul>\n<li>最高位是 1，其余位均为 0，因此 y &amp; (y - 1) = 0</li>\n</ul>\n<p>如何判断一个正整数是不是 2 的整数次幂，可以利用方法一提到的位与运算的性质，如果正整数 y 是 2的整数次幂，则 y 的二进制中只有最高位是 1，其余为 0.<br>\n因此当且仅当 <code>y &amp; (y - 1)  = 0 </code>， y 为 2 的整数次幂</p>\n<p>对于题目</p>\n<ul>\n<li>如果 i &amp; (i - 1) = 0，则令 highBit =i，更新当前的最高有效位</li>\n<li>i 比 i - highBit 的「一比特数」多 1，由于是从小到大遍历每个整数，因此遍历到 i 时，i − highBit 的「一比特数」已知。</li>\n</ul>\n<p>看不懂 QAQ</p>\n","categories":["算法"],"tags":["位运算 动态规划"]},{"title":"Node.js 调试 - Debugger","url":"http://jocolorful.com/2021/06/21/Node-debugger/","content":"<p><a href=\"https://nodejs.org/docs/latest-v12.x/api/debugger.html\" target=\"_blank\" rel=\"noopener\">原生 Debugger</a></p>\n<ol>\n<li>使用参数 <code>inspect</code> 即可进入 debug 模式</li>\n<li>使用参数 <code>--inspect</code> 即可进入 V8 调试模式，Node 也是调用了 CDP 协议。同 Chrome 的开发者工具</li>\n<li>使用参数 <code> --inspect-brk</code> 即可进入 V8 debug 模式</li>\n</ol>\n<p>说明：<br>\n通过 <code>http://localhost:9229/json/list</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdescription: \"node.js instance\",</span><br><span class=\"line\">\t\tdevtoolsFrontendUrl: \"chrome-devtools://devtools/bundled/js_app.html?experiments=true&amp;v8only=true&amp;ws=127.0.0.1:9229/49972c2d-0d1e-4a1c-ac69-0b249b83fe01\",</span><br><span class=\"line\">\t\tdevtoolsFrontendUrlCompat: \"chrome-devtools://devtools/bundled/inspector.html?experiments=true&amp;v8only=true&amp;ws=127.0.0.1:9229/49972c2d-0d1e-4a1c-ac69-0b249b83fe01\",</span><br><span class=\"line\">\t\tfaviconUrl: \"https://nodejs.org/static/images/favicons/favicon.ico\",</span><br><span class=\"line\">\t\tid: \"49972c2d-0d1e-4a1c-ac69-0b249b83fe01\",</span><br><span class=\"line\">\t\ttitle: \"start.js\",</span><br><span class=\"line\">\t\ttype: \"node\",</span><br><span class=\"line\">\t\turl: \"file:///Users/jojo/Developer/ecom/apps/parker/server/start.js\",</span><br><span class=\"line\">\t\twebSocketDebuggerUrl: \"ws://127.0.0.1:9229/49972c2d-0d1e-4a1c-ac69-0b249b83fe01\"</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>可以看到相应信息。其中 id 为 UUID，是一个特定的标识，每一个进程都会分配一个 uuid，因此每一次调用会有出现不同的结果。<code>devtoolsFrontendUrl</code> 则为我们要访问的 chrome 地址，新窗口打开这个地址即可调试 (新版：devtools://xxx)。</p>\n","categories":["Node.js"],"tags":[]},{"title":"Node.js 单测框架","url":"http://jocolorful.com/2021/06/21/Node-断言/","content":"<h1>assert - 断言</h1>\n<h2 id=\"Node-原生-assert-模块\">Node 原生 assert 模块</h2>\n<ul>\n<li>Node 的原生模块 <a href=\"https://nodejs.org/api/assert.html\" target=\"_blank\" rel=\"noopener\">assert</a></li>\n<li>基于 Node assert 测试框架: <a href=\"https://github.com/power-assert-js/power-assert\" target=\"_blank\" rel=\"noopener\">power-assert</a></li>\n</ul>\n<h1>单测的意义：</h1>\n<p><a href=\"https://eggjs.org/zh-cn/core/unittest.html\" target=\"_blank\" rel=\"noopener\">Egg.js 单元测试</a></p>\n<h1>单测框架对比</h1>\n<blockquote>\n<p>从 npm 搜索 <a href=\"https://www.npmjs.com/search?q=test%20framework&amp;page=1&amp;ranking=popularity\" target=\"_blank\" rel=\"noopener\">test framework</a></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>测试库</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://mochajs.org/\" target=\"_blank\" rel=\"noopener\">Mocha</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/avajs/ava\" target=\"_blank\" rel=\"noopener\">AVA</a></td>\n<td>简单的 API 测试</td>\n<td>测试 case 本身比较复杂</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/power-assert-js/power-assert\" target=\"_blank\" rel=\"noopener\">power-assert</a></td>\n<td>基于原生的 assert 模块</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/visionmedia/supertest\" target=\"_blank\" rel=\"noopener\">SuperTest</a></td>\n<td>适合接口测试</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://jestjs.io/zh-Hans/\" target=\"_blank\" rel=\"noopener\">Jest</a></td>\n<td>elegant！simple！</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/power-assert-js/power-assert\" target=\"_blank\" rel=\"noopener\">power-assert</a></td>\n<td>基于原生</td>\n<td>异步支持不优好</td>\n</tr>\n</tbody>\n</table>\n<p>社区使用情况<br>\n<img src=\"/images/test.png\"  width=\"500px\"/></p>\n<p>基于 Jest + supertest 一般可以打造出单测利器出来</p>\n<h2 id=\"总结\">总结</h2>\n<p>如果让我重新选择测试单测框架，我会优先选择 Mocha + SuperTest</p>\n","categories":["Node.js"],"tags":[]},{"title":"晴雅集","url":"http://jocolorful.com/2021/06/20/晴雅集/","content":"<h2 id=\"2021-书单\">2021 书单</h2>\n<ul>\n<li><a href=\"https://book.douban.com/subject/1386094/\" target=\"_blank\" rel=\"noopener\">《PeterPan》</a> 在读</li>\n</ul>\n<blockquote>\n<p>After all, to die will be an awfully big adventure：梦想不再是奢望，梦中的永无岛就在前方，冒险从此起航。</p>\n</blockquote>\n<blockquote>\n<p>When the first baby laughed for the first time, its laugh broke into a thousand pieces, and they all went skipping about, and that was the beginning of fairies. 当第一个婴儿第一次大笑时，笑声便坠落一地成了成千上万的精灵，他们蹦蹦跳跳地向四处跑去。</p>\n</blockquote>\n<blockquote>\n<p>Every time a child says，“I don’t believe in fairies”, a fairy somewhere falls down dead. 当一个小孩不在相信童话，某个角落的精灵便会坠落死去。</p>\n</blockquote>\n<blockquote>\n<p>Indeed a million golden arrows were pointing it out to the children, all directed by their friend the sun, who wanted them to be sure of their way before leaving them for the night.</p>\n</blockquote>\n<blockquote>\n<p>Moonlight was  staring to shine across the waters，and the weew no other sounds but the mameraid calling to the moon.</p>\n</blockquote>\n<blockquote>\n<p>To die will be awful big adventure.</p>\n</blockquote>\n<blockquote>\n<p>None of them knew what was to come. perhaps it was best no to know. Beacause they did not to konw what was to come, they had one more happy hour to play.</p>\n</blockquote>\n<blockquote>\n<p>Follow me, and all will will be well.</p>\n</blockquote>\n<blockquote>\n<p>On the nerverland, adventure are a daily affair.</p>\n</blockquote>\n<ul>\n<li><a href=\"https://book.douban.com/subject/26422275/\" target=\"_blank\" rel=\"noopener\">《向死而生》</a> 作者：李开复 ｜ 推荐指数：🌟🌟🌟</li>\n<li><a href=\"https://book.douban.com/subject/11524204/\" target=\"_blank\" rel=\"noopener\">《围城》</a> 作者：钱钟书 ｜ 推荐指数：🌟🌟🌟</li>\n</ul>\n<blockquote>\n<p>困住我们的何止婚姻？选择没有对错，只是这名利场让人迷失了一切。</p>\n</blockquote>\n<ul>\n<li><a href=\"https://book.douban.com/subject/26278687/\" target=\"_blank\" rel=\"noopener\">《皮囊》</a> 作者：蔡崇达 ｜ 推荐指数：🌟🌟🌟🌟</li>\n</ul>\n<blockquote>\n<p>海藏不住，也圈不住。对待海最好的办法，就是让每个人自己去寻找到和它相处的方式。每片海，沉浮着不同的景致，也翻滚着各自的危险。生活也是，人的欲望也是。以前以为节制或者自我用逻辑框住，甚至掩耳盗铃地掩藏住，是最好的方法，然而，无论如何，它终究永远在那躁动起伏</p>\n</blockquote>\n<h2 id=\"2021-观影记录\">2021 观影记录</h2>\n<p><a href=\"https://movie.douban.com/subject/3430271/\" target=\"_blank\" rel=\"noopener\">《沙漠之花》</a> 主演：安妮海瑟薇 ｜ 推荐指数：🌟🌟🌟🌟<br>\n<a href=\"https://movie.douban.com/subject/32493124/\" target=\"_blank\" rel=\"noopener\">《悬崖之上》</a> 主演：刘浩存 ｜ 推荐指数：🌟🌟🌟🌟<br>\n<a href=\"https://movie.douban.com/subject/1652587/\" target=\"_blank\" rel=\"noopener\">《阿凡达》</a> 地区：🇺🇸 ｜ 推荐指数：🌟🌟🌟🌟<br>\n<a href=\"https://movie.douban.com/subject/30466931/\" target=\"_blank\" rel=\"noopener\">《波斯语课》</a> 地区： ｜ 短评：暗红色的回忆涌动着挣扎、救赎 ｜ 推荐指数：🌟🌟🌟🌟<br>\n<a href=\"https://movie.douban.com/subject/1293172/\" target=\"_blank\" rel=\"noopener\">《末代皇帝》</a> 推荐指数：🌟🌟<br>\n<a href=\"https://movie.douban.com/subject/29984000/\" target=\"_blank\" rel=\"noopener\">《热带往事》</a>  主演：彭于晏 ｜ 短评：暗红色的回忆涌动着挣扎、救赎 ｜ 推荐指数：🌟🌟🌟<br>\n<a href=\"https://movie.douban.com/subject/1920805/\" target=\"_blank\" rel=\"noopener\">《成为简·奥斯汀》</a> 主演：安妮海瑟薇 ｜ 推荐指数：🌟🌟🌟<br>\n<a href=\"https://movie.douban.com/subject/1418200/\" target=\"_blank\" rel=\"noopener\">《傲慢与偏见》</a> 地区：🇺🇸 ｜ 短评：一个傲慢，一个偏见。玛丽苏式的爱情故事｜推荐指数：🌟🌟🌟<br>\n<a href=\"https://movie.douban.com/subject/35158160/\" target=\"_blank\" rel=\"noopener\">《我的姐姐》</a> 主演：张子枫 ｜ 推荐指数：🌟🌟🌟<br>\n<a href=\"https://movie.douban.com/subject/26816376/\" target=\"_blank\" rel=\"noopener\">《超级的我》</a> 主演：王大陆 ｜ 推荐指数：🌟🌟<br>\n<a href=\"https://movie.douban.com/subject/33454993/\" target=\"_blank\" rel=\"noopener\">《名侦探柯南：绯色的子弹》</a> 推荐指数：🌟🌟</p>\n<h2 id=\"金基德\">金基德</h2>\n<blockquote>\n<p>导演 <a href=\"https://movie.douban.com/celebrity/1031241/\" target=\"_blank\" rel=\"noopener\">金基德</a> 值得拥有单独板块！</p>\n</blockquote>\n<ul>\n<li><a href=\"\">人间，空间，时间和人</a><br>\n又名「畸欲伊甸园」，一贯符合金基德重口、欲望风格；还有男神张根硕（有些发福的时候拍摄，没有少年气）。<br>\n人间、时间、空间 和 人；蒙太奇式的剪辑方式将人性最赤裸的部分揭示。善良、邪恶都是轮回。<br>\n推荐指数：🌟🌟🌟🌟</li>\n</ul>\n<h2 id=\"2021-旅行途中\">2021 旅行途中</h2>\n<h3 id=\"北京\">北京</h3>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/zh-hans/%E6%98%8E%E5%8D%81%E4%B8%89%E9%99%B5\" target=\"_blank\" rel=\"noopener\">北京十三陵</a> ｜推荐指数：🌟🌟🌟🌟</li>\n<li>黑龙潭 - 风铃节 ｜ 推荐指数：🌟🌟🌟</li>\n<li>居庸关 - 北京市郊铁路S2线  推荐指数：🌟🌟🌟</li>\n<li>北京后花园 - 白虎涧 ｜ 推荐指数：🌟🌟🌟🌟</li>\n<li>黄花梁 - 高山草甸 ｜ 推荐指数：🌟🌟🌟🌟</li>\n</ul>\n<h3 id=\"辽宁\">辽宁</h3>\n<ul>\n<li>葫芦岛 - 东戴河 ｜ 推荐指数：🌟🌟🌟</li>\n</ul>\n","categories":[],"tags":[]},{"title":"留言板","url":"http://jocolorful.com/2021/06/19/留言板/","content":"<blockquote>\n<p>hi~，很高兴见到你！期待这里能留下你的足迹！</p>\n</blockquote>\n","categories":[],"tags":[]},{"title":"Weekly","url":"http://jocolorful.com/2021/06/19/Weekly/","content":"<h4 id=\"2021-06-21-2021-06-28\">2021.06.21 - 2021.06.28</h4>\n<ul>\n<li><a href=\"/2021/06/23/%E5%89%8D%E7%AB%AF-React-18-%E6%89%80%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84/\">关于 React 18 你所需要知道的</a></li>\n<li><a href=\"https://h3manth.com/ES2021/\" target=\"_blank\" rel=\"noopener\">ES2021 Features!</a></li>\n<li><a href=\"https://nodejs.org/en/blog/release/v16.4.0/\" target=\"_blank\" rel=\"noopener\">Node v16.4.0 (Current) Released </a>\n<ul>\n<li>AsyncLocalStorage 作用，使用场景？</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/lirantal/nodejs-cli-apps-best-practices\" target=\"_blank\" rel=\"noopener\">28 (And Counting) Node CLI App Best Practices</a></li>\n<li><a href=\"https://dmitripavlutin.com/ecmascript-modules-dynamic-import/\" target=\"_blank\" rel=\"noopener\">How to Dynamically Import ECMAScript Modules</a></li>\n<li><a href=\"https://shubham-pandey.medium.com/pdf-generation-with-serverless-aws-and-puppeteer-cac3442b1c95\" target=\"_blank\" rel=\"noopener\">PDF generation with Serverless + AWS Lambda and Puppeteer.</a></li>\n</ul>\n<h4 id=\"2021-06-14-2021-06-20\">2021.06.14 - 2021.06.20</h4>\n<p><a href=\"https://blog.webpagetest.org/posts/benchmarking-javascript-memory-usage/\" target=\"_blank\" rel=\"noopener\">JS 内存使用的基准测试</a></p>\n<ol>\n<li>根据v8 团队的研究：网络上 35% 的内存分配与 JavaScript 相关；10% 用于表示内存中的 DOM 元素；剩下的 55% 是图像。<a href=\"https://web.dev/monitor-total-page-memory-usage/\" target=\"_blank\" rel=\"noopener\">measureUserAgentSpecificMemory</a> API 目前仅限于 JS 和 DOM 相关信息，但确实也占据页面实际内存使用量的很大一部分（约 45%）。</li>\n</ol>\n<p>总结</p>\n<ol>\n<li>内存仍然是 Web 性能的一个尚未开发的主要领域，但这可能需要改变。随着发布的 JavaScript 数量不断增加，内存使用量也在增加。</li>\n<li>我们仍然需要更多信息来完善全貌。在任何时间点，浏览器实际可用的内存有多少？内存与关键业务和用户参与度指标有何关联？什么是内存的使用不与JavaScript和DOM的复杂性？</li>\n<li>虽然今天使用真实用户监控为您的站点获取这些数据可能存在挑战，但我在此处进行测试所采用的相同方法（一些 Chrome 标志与自定义指标配对）使您可以开始将内存相关数据提取到您的测试结果今天，我也喜欢看到人们这样做只是所以我们可以更多地了解我们是如何做的今天，其意义是什么，以及如何开始好转。</li>\n</ol>\n<p><a href=\"https://developer.chrome.com/blog/memory-inspector/\" target=\"_blank\" rel=\"noopener\">memory-inspector for chrome</a></p>\n<h4 id=\"2021-06-07-2021-06-11\">2021.06.07 - 2021.06.11</h4>\n<p><a href=\"https://bytecodealliance.org/articles/making-javascript-run-fast-on-webassembly\" target=\"_blank\" rel=\"noopener\">Making JavaScript run fast on WebAssembly</a><br>\n<a href=\"https://jsonmatic.com/\" target=\"_blank\" rel=\"noopener\">https://jsonmatic.com/</a><br>\n<a href=\"https://domevents.dev/\" target=\"_blank\" rel=\"noopener\">https://domevents.dev/</a></p>\n","categories":["Weekly"],"tags":[]},{"title":"此时此刻","url":"http://jocolorful.com/2021/06/15/生活-此时此刻/","content":"<ul>\n<li>想干的越多，越不知道从哪里入手。心情便越是烦闷，如此恶性循环。</li>\n<li>不喜欢吃苹果，苹果味儿的汽水依然不喜欢</li>\n<li>回家的时候，金百万在地上各种打滚示爱，可能是在和爸爸争宠</li>\n<li>执着于规划自己的生活，不知道干什么的时候最为恐怖</li>\n</ul>\n<hr />\n* 2021-06-16：上班路上也挺美好，看见道路边的小公园，叶子都开了。新绿、嫩绿、浅绿、翠绿、深绿。终于有了些夏天繁茂的样子。路上上班的人很多，想想自己也是他们普通中的一员，也许他们和我也会有同样的想法吧：我们都是普通人。关注了知乎一个问题[「既然所有的生命都要死亡，那么生命的意义是什么?」](https://www.zhihu.com/question/288017836)\n* 2021-06-19：部落格被装扮得花花绿绿，我还挺喜欢！\n* 2021-06-23 14:33:00：我在摸鱼，还有点困 🥱 ，但是老板给我发了工资，我得想想干点啥以便对得起我的劳务费！\n<ul>\n<li>\n<p>甜甜圈 🍩、冰淇淋 🍦、巧克力 🍫、曲奇 🍪、黑森林小蛋糕、布丁 🍮… 我可太喜欢甜食了 🍰</p>\n</li>\n<li>\n<p>灰：你是不是长胖了？我：嗯！从 86 到 88 了。灰：你可是要把人气死！</p>\n</li>\n</ul>\n<hr />\n如果这种在技术上没有什么突破，带队就沦落成了一周的「里程碑」。\n总想把自己学到的东西运用到工作当中去，是不是太功利了些？\n<p>如果这周没 breaking point，就会觉得白过。</p>\n<p>关于算法：龟速地刷着题。感觉现在的方式有些问题。我决定换成兔子的方式：看了题五分钟没思路一定要直接看答案。<br>\n周赛太费事调试的一定要换个题做。不能太呆板了，不然题都看不完。周赛完事后一定要复盘。</p>\n<hr />\n<ul>\n<li>2021-07-03 运动会冠军 🏆，我也没想获得冠军，既然参加了那么认真对待呗。</li>\n</ul>\n","categories":["生活随感"],"tags":[]},{"title":"微前端相关知识","url":"http://jocolorful.com/2021/06/14/微前端相关知识/","content":"<p>目前 <a href=\"https://qiankun.umijs.org/zh\" target=\"_blank\" rel=\"noopener\">qiankun</a> <a href=\"https://zhuanlan.zhihu.com/p/78362028\" target=\"_blank\" rel=\"noopener\">可能</a>是更好的微前端解决方案</p>\n<ol>\n<li><a href=\"https://juejin.cn/post/6844904162509979662\" target=\"_blank\" rel=\"noopener\">微前端-最容易看懂的微前端知识</a></li>\n</ol>\n<p>大应用涵盖子应用</p>\n<ol>\n<li>技术隔离、样式隔离</li>\n<li>基座配置</li>\n</ol>\n","categories":["前端相关"],"tags":[]},{"title":"CSP","url":"http://jocolorful.com/2021/03/30/前端-CSP/","content":"<p>PM 要求将 iframe 里面的某个元素，对 window 进行定位。<br>\n主要解决思路：我参考了👉<a href=\"https://blog.csdn.net/hejiancsdn/article/details/80495333\" target=\"_blank\" rel=\"noopener\">解决 iframe 中 fixed 失效的问题</a>。</p>\n<p>这个过程主要分为两步：</p>\n<ol>\n<li>使该元素 fixed。并且计算出相对真实 window 的 marginTop 值</li>\n<li>监听 window 的滚动事件，滚动偏移量即是 fixed 的 top 值</li>\n</ol>\n<p>在实践的过程中，我主要遇到了以下问题</p>\n<h3 id=\"Q1-iframe-通信问题\">Q1: iframe 通信问题</h3>\n<p>在本地开发模式中，由于a、b 两个项目，端口号不同，根据浏览器的同源策略，在 iframe 中监听上层 window 时报错如图下：</p>\n<h3 id=\"A1-解决方案\">A1: 解决方案</h3>\n<p>直接暴力启动一个允许跨域的浏览器，先保证开发正常进行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open -n -a /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --args --user-data-dir=<span class=\"string\">\"/tmp/chrome_dev_test\"</span> --<span class=\"built_in\">disable</span>-web-security</span><br></pre></td></tr></table></figure>\n<h2 id=\"深入-CSP\">深入 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP\" target=\"_blank\" rel=\"noopener\">CSP</a></h2>\n<p>既然问题出现，那就再深入一点，多剖析一下 CSP 相关内容：</p>\n<p>Content Secure Policy：内容安全策略</p>\n<h3 id=\"如何使用：\">如何使用：</h3>\n<ol>\n<li>\n<p>通过添加 <code> Content-Security-Policy</code> 头部指定</p>\n</li>\n<li>\n<p>通过 <code>meta</code> 标签来指定</p>\n</li>\n</ol>\n<h3 id=\"主要目标：\">主要目标：</h3>\n<ol>\n<li>CSP 的主要目标是减少和报告 XSS 攻击 ，XSS 攻击利用了浏览器对于从服务器所获取的内容的信任。</li>\n<li>数据包嗅探攻击：除加载域以外，还可以限制协议。如：https</li>\n</ol>\n<h3 id=\"相关策略\">相关策略</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/default-src\" target=\"_blank\" rel=\"noopener\">default-src</a>: 这个是为其他以下几个指令提供 fallback 机制</li>\n<li>img-src</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/connect-src\" target=\"_blank\" rel=\"noopener\">connect-src</a> a 标签、fetch、ajax</li>\n<li>frame-src</li>\n<li>mailto</li>\n<li>script-src</li>\n<li>style-src</li>\n</ul>\n<h3 id=\"上报机制\">上报机制</h3>\n<p>通过 <code> report-uri</code> 进行一个 post 上报</p>\n<p>开源的 <a href=\"https://github.com/helmetjs/helmet/blob/042ee406c753c492a84d7c771010e38477f8c5cb/middlewares/content-security-policy/index.ts#L213\" target=\"_blank\" rel=\"noopener\">koa-hemlet</a>本质也就是设置 Content-Secuiry-Policy</p>\n<h1>总结</h1>\n<p>CSP 只是作为一种为网站策略增强的一种手段。和 iFrame 通信并没有什么联系。只是可以控制网站加载 iFrame 的源。所以我应该还去了解并且动手实现跨域的情况下，如何实现window 和 iframe 的通信。</p>\n","categories":["前端相关"],"tags":[]},{"title":"About","url":"http://jocolorful.com/2021/03/02/about/","content":"","categories":[],"tags":[]},{"title":"不耐烦的 JSer","url":"http://jocolorful.com/2021/03/02/前端-操作符篇-不耐烦的JSer/","content":"<h2 id=\"11-运算符\">11. 运算符</h2>\n<h3 id=\"11-1-运算符两个重要的规则\">11.1. 运算符两个重要的规则</h3>\n<pre><code>1. 强制让运算数变为合适的类型\n2. 大多数运算符只对原始类型有效\n</code></pre>\n<h4 id=\"11-1-1-运算符两个重要的规则\">11.1.1. 运算符两个重要的规则</h4>\n<p>一个运算符操作的的数据类型不匹配， JS基本不会抛出异常。相反，它会自动进行强制类型转换。以便于这样看起来是<code>正常</code>运算的。让我们来看下面两个例子。</p>\n<p>首先，一个乘法运算只可以让两个数字正常工作，因此，在相乘之前，他会将字符转换成数字。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'7'</span> * <span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"number\">21</span></span><br></pre></td></tr></table></figure>\n<p>其次， 用于访问对象属性的操作符[]只能处理字符串或者symbol。其他的值会被强制转换成字符串。其他的字都会转换成字符串。</p>\n<h4 id=\"11-1-2-大多数运算符只对原始类型起作用\">11.1.2. 大多数运算符只对原始类型起作用</h4>\n<blockquote>\n<p>对于JS操作符需要要记住的规则是：大多数运算符只对原始类型起作用</p>\n</blockquote>\n<p>如果运算数是<code>对象</code>，则经常会被强制转换成基本类型。</p>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] + [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"string\">'1,2,34,5,6'</span></span><br></pre></td></tr></table></figure>\n<p>为什么？因为 <code>+</code>操作符会首先将运算数转换成原始类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">String</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"string\">'1,2,3'</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">String</span>([<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>])</span><br><span class=\"line\"><span class=\"string\">'4,5,6'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"11-2-加号plus\">11.2. 加号plus</h3>\n<p>在JS中，加号按以下方式工作：首先它会将运算数转换成基本类型，然后它会切到两种模式之一：</p>\n<ul>\n<li>字符串模式：如果一个被转换成的基本类型有一个是字符串，那么另外一个也会被转换成字符串，最后字符串会进行连接。</li>\n<li>数字模式：除此之外，两边的运算数会被转换成数字，然后进行相加。</li>\n</ul>\n<p>字符串模式可以让你使用<code>+</code>去连接字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"string\">'There are '</span> + <span class=\"number\">3</span> + <span class=\"string\">' items'</span></span><br><span class=\"line\"><span class=\"string\">'There are 3 items'</span></span><br></pre></td></tr></table></figure>\n<p>数字模式意味着如果。如果运算数两边都不是数字（或者一个对象变成了字符串）那么都会被变成数字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 4 + true</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-3-赋值运算符\">11.3. 赋值运算符</h3>\n<h4 id=\"11-3-1-基本的赋值运算符\">11.3.1. 基本的赋值运算符</h4>\n<ul>\n<li>\n<p>x = value</p>\n<p>给一个声明的变量赋值</p>\n</li>\n<li>\n<p>const x = value<br>\n同时进行声明和复制</p>\n</li>\n<li>\n<p>obj.propKey = value<br>\n给一个属性赋值</p>\n</li>\n<li>\n<p>arr[index] = value<br>\n给数组的某个元素赋值</p>\n</li>\n</ul>\n<h4 id=\"11-3-2-复合赋值运算符\">11.3.2. 复合赋值运算符</h4>\n<p>给出的运算符工作时，以下两种方式是相同的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myvar op= value</span><br><span class=\"line\">myvar = myvar op value</span><br></pre></td></tr></table></figure>\n<p>举例来说，复合<code>+</code>，然后我们可以得到运算符<code>+=</code>它会像下面的工作：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">''</span>;</span><br><span class=\"line\">str += <span class=\"string\">'&lt;b&gt;'</span>;</span><br><span class=\"line\">str += <span class=\"string\">'Hello!'</span>;</span><br><span class=\"line\">str += <span class=\"string\">'&lt;/b&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">assert.equal(str, <span class=\"string\">'&lt;b&gt;Hello!&lt;/b&gt;'</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"11-3-3-所有可复合的运算符\">11.3.3. 所有可复合的运算符</h4>\n<p>数学运算：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+= -= *= <span class=\"regexp\">/= %= **=</span></span><br></pre></td></tr></table></figure>\n<p>+= 同样对字符串连接有效</p>\n<p>按位运算符：</p>\n<h3 id=\"11-4-相等运算-VS\">11.4. 相等运算: == VS ===</h3>\n<p>JS 有两种等号运算符:宽松相等(==)和严格相等(===)，推荐总是使用后者判断是否相等。</p>\n<h4 id=\"11-4-1-宽松相等-and\">11.4.1. 宽松相等(== and !=)</h4>\n<p>宽松相等是JS的特性之一。它经常会强制转换操作数，有些强制转换是起作用的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"string\">'123'</span> == <span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">&gt; <span class=\"literal\">false</span> == <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>大多数情况下意义不大：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"string\">''</span> == <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>对象被强制转换成基本类型。当且只当另外一个运算数是基本类型。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] == <span class=\"string\">'1,2,3'</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">&gt; [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>] == <span class=\"string\">'1,2,3'</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>如果两个操作数都是对象，当他们是同一个对象时才相等：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] == [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>]</span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\">&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] == [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&gt; arr == arr</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>最后，== 允许了undefined和null相等</p>\n<h4 id=\"11-4-2-严格相等-and\">11.4.2. 严格相等 (=== and !==)</h4>\n<p>严格相等从不会类型转换。两个相等的值一定会有相同的类型。让我们复习一遍之前的<code>==</code>运算符，然后看<code>===</code>是怎样工作的</p>\n<p>如果两个运算数都是对象，当他们是同一个对象时才相等：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; [1, 2, 3] &#x3D;&#x3D;&#x3D; &#39;1,2,3&#39;</span><br><span class=\"line\">false</span><br><span class=\"line\">&gt; [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;] &#x3D;&#x3D;&#x3D; &#39;1,2,3&#39;</span><br><span class=\"line\">false</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; [1, 2, 3] &#x3D;&#x3D;&#x3D; [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</span><br><span class=\"line\">false</span><br><span class=\"line\">&gt; [1, 2, 3] &#x3D;&#x3D;&#x3D; [1, 2, 3]</span><br><span class=\"line\">false</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; const arr &#x3D; [1, 2, 3];</span><br><span class=\"line\">&gt; arr &#x3D;&#x3D;&#x3D; arr</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n<p><code>===</code> 运算符不允许undefined和null相等</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"literal\">undefined</span> === <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"11-4-3-推荐：总是使用严格模式\">11.4.3. 推荐：总是使用严格模式</h4>\n<p>推荐总是使用<code> ===</code>。他会让你的代码可读性更高。把你从不得不思考怪异的<code>==</code>中解脱出来。<br>\n让我们看一下两个case：使用==的和我推荐的替代方案.</p>\n<h5 id=\"11-4-3-1-使用-比较一个数字和字符串\">11.4.3.1. 使用 ==:比较一个数字和字符串</h5>\n<p>== 让你去判断一个值x是一个数字，或者作为字符串的数字，通过单个的比较：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (x == <span class=\"number\">123</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// x is either 123 or '123'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我更喜欢以下两种替代方案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (x === <span class=\"number\">123</span> || x === <span class=\"string\">'123'</span>) ···</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Number</span>(x) === <span class=\"number\">123</span>) ···</span><br></pre></td></tr></table></figure>\n<p>你也可以在第一次遇见他的时候将它进行类型转换：</p>\n<h5 id=\"11-4-3-2-比较undefined-和-null\">11.4.3.2 ==: 比较undefined 和 null</h5>\n<p>使用==的另外一个case是比较undefined 或 null</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (x == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// x is either null or undefined</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码的问题在于，你无法保证是其他人也会用这种方式判断，或者有人有用meant === null的方式。</p>\n<p>我更喜欢一下两者任意替代方式:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (x &#x3D;&#x3D;&#x3D; undefined || x &#x3D;&#x3D;&#x3D; null) ···</span><br><span class=\"line\">if (x) ···</span><br></pre></td></tr></table></figure>\n<p>第二种替代方式是相对更常见，但是塔毁坏了一些在JS中的一些模式。<br>\n在 <a href=\"http://exploringjs.com/impatient-js/ch_operators.html/ch_booleans.html#falsiness-truthiness\" target=\"_blank\" rel=\"noopener\">the chapter on booleans</a>会解释到, 我们会看到现象与本质。</p>\n<h3 id=\"11-5-排序运算\">11.5. 排序运算</h3>\n<p>Table 2: JavaScript’s ordering operators.</p>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n</tr>\n</tbody>\n</table>\n<p>JS的比较运算符规则(tbl. <a href=\"http://exploringjs.com/impatient-js/ch_operators.html/#tbl:ordering_operators\" target=\"_blank\" rel=\"noopener\">2</a>) 对字符串和数字同样生效。</p>\n<p>警告：这些运算符在比较人类语言中的文本（大写、重音等）时效果不佳。有关详细信息，请参阅[字符串章节](<a href=\"http://exploringjs.com/unatint\" target=\"_blank\" rel=\"noopener\">http://exploringjs.com/unatint</a> js/ch_operators.html/ch_strings.html比较字符串)。</p>\n<h3 id=\"11-6-其他的运算符\">11.6. 其他的运算符</h3>\n<ul>\n<li>\n<p><a href=\"http://speakingjs.com/es5/ch09.html#comma_operator\" target=\"_blank\" rel=\"noopener\">逗号运算符</a>: a, b</p>\n</li>\n<li>\n<p><a href=\"http://speakingjs.com/es5/ch09.html#void_operator\" target=\"_blank\" rel=\"noopener\">void 运算符</a>: void 0</p>\n</li>\n<li>\n<p>对于布尔，字符串，数组或对象在本书其他章节也有提到。</p>\n</li>\n</ul>\n","categories":[],"tags":[]},{"title":"Babel","url":"http://jocolorful.com/2020/12/18/前端-babel/","content":"<p>最好的学习当然是从看官方文档，如果英文不行那就来份<a href=\"https://www.babeljs.cn/\" target=\"_blank\" rel=\"noopener\">中文文档</a>的 🤦‍♀️</p>\n<p>从官方文档来看，总共五个方面：指南、概览、用法、预设以及工具。</p>\n<h1>指南</h1>\n<ol>\n<li>是什么：Babel 的作用是将「先进」的 ES 语法进行降级，编译成较低版本的浏览器能够识别的语法。</li>\n</ol>\n<h1>插件 &amp; 预设</h1>\n<p>插件的作用就是 translate，预设的作用是启用一组插件</p>\n<h2 id=\"短名称\">短名称</h2>\n<ol>\n<li>\n<p>插件 babel-plugin- 可忽略<br>\neg: babel-plugin-lodash 等同于 lodash</p>\n<p>可适用冠名 @org/</p>\n</li>\n<li>\n<p>预设 babel-preset- 可忽略<br>\neg: babel-preset-myPreset 等同于 myPreset</p>\n<p>可适用冠名 @org/</p>\n</li>\n</ol>\n<p>##. 顺序<br>\n2. 插件顺序：从左往右</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"plugins\"</span>: [<span class=\"string\">\"transform-decorators-legacy\"</span>, <span class=\"string\">\"transform-class-properties\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>预设顺序：从右往左</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"@babel/preset-env\"</span>, <span class=\"string\">\"@babel/preset-react\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"AttachMent\">AttachMent</h2>\n<h3 id=\"Polyfills-可按需引入\">Polyfills 可按需引入</h3>\n<p><a href=\"https://betgar.github.io/2019/07/30/babel6-loose-mode/\" target=\"_blank\" rel=\"noopener\">loose 参数</a></p>\n<p>即松散模式：转换为简单的 ES5 实现。<br>\n而严格模式：转换时尽可能遵循、接近 ES6 语义。</p>\n<p>可全局配置添加预设，也可给每个 plugin 设置参数</p>\n","categories":["前端相关"],"tags":[]},{"title":"进击的 NPM","url":"http://jocolorful.com/2020/12/10/Node.js-进击的-NPM/","content":"<h1>NPM2</h1>\n<p>优点：完整的依赖拓扑图<br>\n缺点：很暴力，重复依赖</p>\n<h1>NPM3</h1>\n<p>公共依赖提升，但是由于下载顺序问题，最极端情况下还是 npm2，并不能完全解决依赖重复</p>\n<h1>NPM4</h1>\n<p>npm-shrinkwrap.json 被认为是完整的安装清单，但是 npm2 就有 npm-shrinkwrap.json</p>\n<h1>NPM5</h1>\n<h2 id=\"lockfile\">lockfile</h2>\n<table style=\"width:100%\">\n  <tr>\n    <th width=\"500px\">npm@5 以前：npm-shrinkwrap.json</th>\n    <th width=\"500px\">npm@5 以后：package-lock.json</th>\n  </tr>\n  <tr>\n    <td>发布包时如果有锁定需求，可用 npm shrinkwrap 命令把 package-lock.json 转为 npm-shrinkwrap.json 随包发布（向下兼容）</td>\n    <td>开发时提交和使用，来保证不同环境、人员安装依赖的一致性。</td>\n  </tr>\n</table>\n<h2 id=\"cache-优化\">cache 优化</h2>\n<table style=\"width:100%\">\n  <tr>\n    <th></th>\n    <th width=\"500px\">npm@5 以前</th>\n    <th width=\"500px\">npm@5 以后</th>\n  </tr>\n  <tr>\n    <th width=\"120px\">缓存路径</td>\n    <td>~/.npm 文件夹中以模块名的形式直接存储 <br/>eg: koa 模块存储在 ~/.npm/koa </td>\n    <td>路径存放在 ~/.npm/_cacache</td>\n  </tr>\n  <tr>\n    <th width=\"120px\">缓存管理</td>\n    <td></td>\n    <td>由系统统一管理，数据发生错误就会重新获取，除非需要释放磁盘空间。需要 --force 参数</td>\n  </tr>\n</table>\n<h2 id=\"文件下载优化\">文件下载优化</h2>\n<p>如果将本地目录作为依赖来安装</p>\n<p>npm@5 before：将会把文件目录作为「副本拷贝」到 node_modules 中。</p>\n<p>npm@5 after： symlinks 的方式来实现（使用本地 tarball 包除外），而不再执行文件拷贝。这将会提升安装速度：</p>\n<ol start=\"2\">\n<li>安装耗时打印</li>\n<li>新的 [package-lock.json] 文件锁</li>\n<li>发包模块不包含 lock 文件</li>\n<li>install 时默认 --save，除非使用 --no-save</li>\n</ol>\n<h2 id=\"npx\">npx</h2>\n<p>npx 一个随着 npm 5.2.0 发布的命令，会帮你执行依赖包里的二进制文件。比如对于没有全局安装的命令你想执行的话就只能 ./node_modules/.bin/webpack -v，有 npx 之后就可以直接使用 npx webpack -v。</p>\n<h1>NPM6</h1>\n<p>解决安全相关问题</p>\n<p>npm audit：这个命令本地试过，但是貌似已经没撒用了 🤔</p>\n<h1>NPM7</h1>\n<ol>\n<li>npm workspace</li>\n<li>自动安装 「对等依赖」（有些意思 🤔）</li>\n<li>lock 文件格式向 yarn 看齐</li>\n</ol>\n<h2 id=\"breaking-Changes\">breaking Changes</h2>\n<ol>\n<li>npx 被「npm exec」重写</li>\n</ol>\n<p>相关文章</p>\n<p><a href=\"https://github.com/Kimi-Gao/Program-Blog/issues/112\" target=\"_blank\" rel=\"noopener\">npm@5 新特性使用指南</a><br>\n<a href=\"https://medium.com/npm-inc/announcing-npm-6-5d0b1799a905\" target=\"_blank\" rel=\"noopener\">Announcing npm@6</a><br>\n<a href=\"https://blog.npmjs.org/post/173239798780/beyond-npm6-the-future-of-the-npm-cli\" target=\"_blank\" rel=\"noopener\">npm blog V6</a><br>\n<a href=\"https://blog.npmjs.org/post/626173315965468672/npm-v7-series-beta-release-and-semver-major\" target=\"_blank\" rel=\"noopener\">npm blog V7</a><br>\n<a href=\"https://www.youtube.com/watch?v=7gFaBjY7fHs\" target=\"_blank\" rel=\"noopener\">Youtube: V7 Released</a></p>\n","categories":["Node.js"],"tags":[]},{"title":"Pause","url":"http://jocolorful.com/2020/12/09/生活-Pause/","content":"<p>时间似乎按下了暂停键，快到年底了。</p>\n<p>我在 new 这篇文章的时候收到了两封邮件，一封是来自我的产品 zhaojin 的产品 RFC 邮件提示，另外一封是 老张的。</p>\n<p>前几天 zhaojin 在群里问什么是内卷，他已经开始要走傻白甜的路线了么？</p>\n<ol>\n<li>去厦门玩耍了一趟</li>\n<li>隔壁室友搬家，我大概再也不想见到那对情侣了，新室友很好至少不做饭，不会把厨房弄得乱糟糟的。公共的区域给我保留了放鞋的地方。冰箱也不会有臭臭的味道，毕竟他们跟我一样没什么东西。</li>\n</ol>\n<p>我似乎长胖了一点，不过也是好事，太干巴巴也不好看。</p>\n<p>奥，我的 OKR 似乎有了一点点新的进展，姑且评估为 30%，写的时候真的挺痛苦，没撒帮手，小群内的人几乎不说话。我和 lvbin 私聊的时候说了进展然后说接下来的打算，问他可不可以来搭把手，他很爽快地答应了，然后还说「We are a team ！」这种话简直太令人喜欢了，周会上还说似乎很久没见着我的样子。</p>\n<p>另外我的批量上传其实成功了，但是产品方案实际上变了，我几乎花了一周空闲的时间研究阿里云的 OSS SDK。也没觉得彭 🐱 封装的「中间层」好用，反而觉得是累赘。🐱 喜欢过度封装。但是事实上他的思路很好，很多都是我想不到的。机智的 🐱🐱。</p>\n<p>我还给企业微信群添加了机器人，执行定时任务给大家讲笑话撒的，我似乎对这种大家都觉得无趣的事情充满了热情，明明就很有趣啊！</p>\n<p>所以这个月除了出去玩，我还是学到了不少东西。</p>\n<ol>\n<li>批量上传 + 断点续传</li>\n<li>爬虫 + 定时任务</li>\n</ol>\n<p>发哥对侯老师说的 npm 管理似乎有些误解，但是我没有找到相关的文章，所以我应该花个时间研究一下 npm 的 CHANGELOG。果真给自己积 TODO 还是有用。工作的第三年开始了，加油了喂！</p>\n","categories":["生活随感"],"tags":[]},{"title":"PPT 准备与演讲技巧","url":"http://jocolorful.com/2020/10/29/软技能-准备与演讲技巧/","content":"<blockquote>\n<p>这周给老板们做了「无头浏览器」相关的分享，我终于可以放心写代码了！</p>\n</blockquote>\n<center>\n\t<img src=\"/images/talk.png\"  width=\"400px\" />\n</center>\n<p>演讲是否足够精彩，我想观众们的掌声已经给了答案。在这之前，我做过的分享都是自己准备，这个准备的过程，侯老师帮我 review 了很多，从准备到演讲这个过程都是收获满满。</p>\n<p>我记录这些希望除了在分享以外我能够收获学习到更多。</p>\n<h1>前言</h1>\n<p>PPT 是 Talk 中最重要的一个环节之一。特别是对于技术分享来说，你的观众可能不会在意你的长相穿着，但是你的 PPT 却尤为重要。做好 PPT 的演讲主要有以下几个方面：</p>\n<ol>\n<li>主题确定</li>\n<li>围绕主题，梳理大纲内容</li>\n<li>从大纲出发，进行发散</li>\n<li>演讲的总结</li>\n</ol>\n<h1>主题的确定</h1>\n<p>侯老师让我剖析「posterMan」。这其实是 Node 很小的一个应用。本质是利用了 puppter 的无头浏览器技术来实现一个截图的功能。当遇见一个新鲜的事物时总是能学到许多有意思的事情👇：</p>\n<p>这分析这个工程的代码时，我先把他跑起来。在通过\tpackage.json 分析相关依赖并剖析依赖的作用。这个过程我把有疑问的点全部记录了下来并且逐一分析。</p>\n<p>这样大致下来就能知道</p>\n<p>其中我发现了「Puppter」以及 「gerneric pool」这俩重点包。</p>\n<ol>\n<li>\n<p>「纵向挖掘」，作为一个不造轮子的好开发：可以用来做什么 &gt;&gt; 实现原理</p>\n</li>\n<li>\n<p>「横向对比」：前端同样可以截屏，和前端截屏的对比，以及各方优势</p>\n</li>\n</ol>\n<h1>大纲确定</h1>\n<ol>\n<li>自我介绍</li>\n<li>演讲目录介绍</li>\n<li>内容（横向与纵向对比内容）</li>\n<li>未来及展望</li>\n<li>演讲总结</li>\n</ol>\n<h1>演讲的幽默</h1>\n<p>大概就是多打打比方，写写比喻句～</p>\n<h1>重复练习</h1>\n<p>不要觉得自己准备的过程已经熟悉了内容，真实的演讲需要用「口述」和预想的差异会很大。所以需要注意多练习几次，其中包括 PPT 的内容完整性，衔接流畅。只有对内容做到了熟悉这样在演讲的过程才不会紧张。</p>\n<p>AnyWay，演讲还是多找找有经验的人帮忙多多 review。自己也要多准备多思考～</p>\n","categories":[],"tags":["软技能"]},{"title":"做一颗饱满的麦穗","url":"http://jocolorful.com/2020/10/22/生活-做一颗饱满的麦穗/","content":"<p>今天是农历九月初九。(所以待会儿一定要给爸爸妈妈打电话！)</p>\n<p>先将思绪简单整理下吧。可爱的人啊，开心烦恼的事啊，靡间生长繁而茂盛。</p>\n<h1>工作</h1>\n<p>这周和侯老师 one on one。今年的工作也算是得到了侯老师的认可，其实我自己本身对技术不太自信，我自己不太喜欢研究太过底层的东西（因为我知道我学了就忘）。今年年初交付团队的时候只有三个前端，我使劲儿把从章辰、雨豪身上学到的东西给用上了。（我在 Qunar 都学撒了？🤦‍♀️）那段时间 CRM 没有用户，可劲儿裸奔不断提代码的感觉真的挺爽。我跟侯老师说想要做没有做过的需求。他问我什么是没有做过的呢，C端？我说能够使我自我怀疑，我到底能不能做好的需求。后来我思考了一下，觉得自己有些幼稚。毕竟自己是个「打工人」，公司都是以结果为导向，我为自己这个想法感到些许的羞愧…</p>\n<p>然后第二件事是自测不足。哎，我实在不喜欢做自测。一股脑儿把代码合了，要命。一定要改改改！！</p>\n<p>侯老师突然让我准备分享。是关于 puppter 的。在我印象中做过几次分享</p>\n<ol>\n<li>koa 的爬虫 @36kr</li>\n<li>http 协议 @Qunar</li>\n<li>CSS 的六种命名 @Qunar</li>\n<li>基于 Webpack 分装 FFP 插件的解决思路 @zhihu</li>\n</ol>\n<p>没有很好的口才以及天赋，思维还特别跳跃。那就只能好好准备了，有时候我思考一个问题能联想特别多的东西，脱口而出别人就会一脸懵逼… …</p>\n<p>看来下次可以写写「技术分享」的经验以及总结，即便我的分享经验很少。</p>\n<p>这次主题是「Headless」在大前端的应用。我的观众是技术 leader ，所以我的周末没了… … 侯老师对我的帮助真的很大，无论从 PPT 知乎三巨头格，结构内容以及讲解的高度都有一个质的提升。虽然我在知乎的日子真的很舒服。但我收获了以前两年工作经历都换不到的宝贵财富。算一算，第四个年头就要开启了，莫等闲以及感恩珍惜。</p>\n<h2 id=\"不要高估自己的执行力\">不要高估自己的执行力</h2>\n<p>我以为周末可以至少一天去学画画，另外一天可以准备 PPT 顺便看牙。</p>\n<p>真实的周末是花了一天改 bug（恰好 1024 那天，有趣）一天准备 PPT。改 bug 的时间把衣服都洗了，被子也晒了（Mark 一下最好的晒被子时间是 11 点 ～ 14 点）。希望晚上能够睡一个好觉。</p>\n<p>不过我还是一直在拖延，比如我的 👙 还没洗，🦷 也没看… 说好要把公司的组件整理到至少 50%。我就整理了五个，害…真的是没有技术含量的工作啊，难受。</p>\n<p>来日并不方长 …</p>\n<h1>生活</h1>\n<p>遇见了可爱的人，翼巧的表妹来我们公司实习。不过她可能不会在北京呆很久。1023 的夜晚她陪我去逛街买格子衫，我说过节要有仪式感，可能至 16 年以来就没有女生陪我逛街了。本来是她陪我，但是她自己逛得好开心，虽然我不咋喜欢商场里的东西并且还让我帮她抱衣服，被人使唤的感觉还是可以的。至少觉得自己是被需要的。</p>\n<p>跟老公吵架了 … 虽然不是那种大声嚷嚷地吵架，这种矛盾更加可怕吧。台湾人的想法和大陆的真的不太一致吗？好像他们更加烂漫些，然鹅我现在已经快活生生变成一个物质的人了。谁不是在现实的毒打中过生活呢？</p>\n<p>夜色逐渐降临，我闭了下眼睛：摩托车，汽车的鸣笛。窗外有小孩的尖叫。我得去洗衣服了。</p>\n","categories":["生活随感"],"tags":[]},{"title":"无头浏览器在前端的应用场景","url":"http://jocolorful.com/2020/10/21/Node-无头浏览器在前端的应用场景/","content":"<blockquote>\n<p>无头浏览器 from wikipedia： A headless browser is a web browser without a graphical user interface。无头实际上是指无界面地运行浏览器<br>\n我们在终端或者代码层，使用无头浏览器的技术来可以模拟用户在网页端的浏览及操作。</p>\n</blockquote>\n<h1>无头浏览器的相关应用</h1>\n<ol>\n<li>E2E 测试：无需打开UI界面，即可完成对应的测试内容。模拟表单提交，键盘输入，点击等行为</li>\n<li>网络爬虫 、SSR 服务端渲染</li>\n<li>网页截图生成海报或  PDF</li>\n<li>捕获网站时间线，帮助诊断性能问题（Lighthouse 就是使用了无头浏览器的技术的性能测量工具，他可生成各种性能数据以及网页加载时的快照，以辅助前端做一些性能优化</li>\n</ol>\n<p>以上，无头浏览器的作用非常强大；今天我就以 posterman 这个比较简单但是很有代表性的服务，来讲一下在前端的具体应用。</p>\n<h1>posterMan 简介</h1>\n<p>类似于网抑云音乐，知乎的划线笔记。用户在截屏时可以生成封面海报。</p>\n<center><img src=\"/images/poster.jpg\" width=\"320px\" /></center>\n<p>posterMan 是一个 Node 服务。当我们提供一个 url 链接给到 posterMan 时，即可生成相应的封面截图。</p>\n<h2 id=\"海报生成链路\">海报生成链路</h2>\n<center><img src=\"/images/link.png\" width=\"640px\" /></center>\n<h2 id=\"Puppteer-相关介绍\">Puppteer 相关介绍</h2>\n<blockquote>\n<p>译：木偶；基于 CDP（Chrome devtools-protocol） 封装的 Node 库</p>\n</blockquote>\n<p>原理:</p>\n<ol>\n<li>基于 WebSocket，利用 WebSocket 实现与浏览器内核的快速数据通道</li>\n<li>CDP 分为多个域，每个域中都定义了相关的命令和事件（Commands and Events）</li>\n<li>基于 CDP 封装一些工具对 Chrome 浏览器进行调试及分析</li>\n</ol>\n<h2 id=\"Puppeteer-VS-Phantomjs\">Puppeteer VS Phantomjs</h2>\n<table style=\"width:100%\">\n  <tr>\n    <th></th>\n    <th>puppeteer</th>\n    <th>phantomjs</th>\n  </tr>\n  <tr>\n    <td>环境依赖</td>\n    <td>依赖 Node</td>\n    <td>Linux: GLIBCXX_3.4.9 和 GLIBC_2.7</td>\n  </tr>\n  <tr>\n    <td>更新进度</td>\n    <td>持续更新（V1.8）</td>\n    <td>停止更新（V2.1）</td>\n  </tr>\n  <tr>\n    <td>JavaScript 标准</td>\n    <td>新的ES 标准</td>\n    <td>ES5</td>\n  </tr>\n  <tr>\n    <td rowspan=\"3\">整体优点</td>\n    <td>持续更新，功能性能可期</td>\n    <td>部署快捷方便，基本上达到了开箱即用</td>\n  </tr>\n  <tr>\n    <td>使用新ES标准，对异步事件处理更简便</td>\n    <td>脚本语言更适合原生开发，学习成本低</td>\n  </tr>\n  <tr>\n    <td>支持chrome插件</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td rowspan=\"3\">整体缺点</td>\n    <td>部署相对复杂，且需要翻墙</td>\n    <td>已经停更</td>\n  </tr>\n  <tr>\n    <td>java端调用仍需使用cmd和shell调用，node端可直接使用</td>\n    <td>只能通过 cmd 和 shell 调用</td>\n  </tr>\n  <tr>\n    <td></td>\n    <td>开放的api较少, 且调试过程复杂</td>\n  </tr>\n</table>\n<h3 id=\"Puppeteer-模拟用户操作\">Puppeteer 模拟用户操作</h3>\n<center><img src=\"/images/op.png\" width=\"640px\" /></center>\n<h2 id=\"链接池-Generic-pool\">链接池 Generic pool</h2>\n<p>当用户访问调用 posterMan 时，就会创建一个 puppteer 的实例子，但是当我们的服务访问量巨大的时候，频繁的创建和销毁连接会产生非常大的系统开销。这个时候，链接池 Generic pool 就隆重登场了。</p>\n<h3 id=\"线程池-合理配置\">线程池-合理配置</h3>\n<center><img src=\"/images/pool.png\" width=\"300px\" /></center>\n<ol>\n<li>合理设置连接池数；posterMan 阈值（min：2；Max：10）</li>\n<li>尽可能利用缓存，减少对数据库的查询。</li>\n<li>使用完一个数据库连接后，尽快释放给管理池。</li>\n</ol>\n<h1>纯前端实现有两种方式</h1>\n<h2 id=\"利用CanvasAPI-（html2Canvas）\">利用CanvasAPI （html2Canvas）</h2>\n<ol>\n<li>递归取出目标模版的所有 DOM 节点，填充到一个 rederList，并附加是否为顶层元素/包含内容的容器 等信息</li>\n<li>通过 z-index postion float等css属性和元素的层级信息将 rederList 排序，计算出一个 canvas 的 renderQueue</li>\n<li>遍历 renderQueue，将 css 样式转为 setFillStyle 可识别的参数，依据 nodeType 调用相对应 canvas 方法，如文本则调用 fillText，图片 drawImage，设置背景色的 div 调用 fillRect 等</li>\n<li>将画好的canvas填充进页面</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>无法渲染跨域资源(支持同域)</li>\n<li>无法渲染 iFrame和 Flash 内容</li>\n<li>大量的递归和计算会非常缓慢</li>\n</ol>\n<h2 id=\"SVG\">SVG</h2>\n<ol>\n<li>首先，我们要声明一个基础的svg模版，这个模版需要一些基础的描述信息，最重要的，它要有<foreignObject></foreignObject>这对标签</li>\n<li>将要渲染的 DOM 模版模版嵌入 foreignObject</li>\n<li>利用 Blob 构建 SVG 图像</li>\n<li>取出 URL</li>\n</ol>\n<p>一个最为严肃的问题在于：SVG 无法加载外部资源，也就是说，在 SVG 里面，无论是还是 或者 CSS 中的背景图, 这些资源都是无法加载的。在使用 canvas 实现时，因为我们使用 Node 去绘制，所以不存在资源引用的问题。但使用 SVG  实现，相当于我们把文档交给 SVG 再来渲染，这对于我们来说是其实是无法控制的黑盒操作，是受 SVG 限制的</p>\n<center>\n\t<img src=\"/images/diff.png\" width=\"700px\" />\n</center>\n","categories":["Node.js"],"tags":[]},{"title":"一件悲伤的事","url":"http://jocolorful.com/2020/09/28/生活-一件悲伤的事/","content":"<p>有一个梦我做了很多遍：就是牙齿蛀掉了一拔就拔出来了，没有一点疼痛，然后我就把所有的牙都拔光了。梦醒之后我甚至在网上搜了「梦见自己蛀牙意味着什么」，周公解梦大多都是负面消极的解答。</p>\n<p>这个梦真的不止一次出现了，这大概是驱使我认真刷牙的动力。即便不是这个梦的意味带来的影响，为了吃饭倍棒我也要好好刷牙。</p>\n<p>可是现实中的这一天还是来了，没有一丝丝防备 😫</p>\n<p>大牙旁边的那颗牙齿，以前从外面看就不太健康，不是一般牙齿通透的白，能够很明显感受到里面黑乎乎的存在。以前问医生说是黑色素的沉淀。</p>\n<p>忧患最终还是变成了现实，今天它崩了，几乎有四分之一都没了漏出了狰狞的黑洞🧎‍♀️。我想里面健康完整的部分可能不剩可怜的一半。</p>\n<p>在大陆补牙实在太贵，如果在台湾有健保的话可能不到十元 RMB 就能补好牙齿。不过幸好今天它崩了，因为以他蛀虫的趋势，里面变得更大再崩可能就没有机会补了。</p>\n<center>\n--------------------------------- 2020.10.07---------------------------------</center>\n<p>该来的还是来了，10.01 拍了牙片，我要做根管治疗了（回家我把嘴张给爸爸看，确实要做治疗了）。7 号回北京医生说我的洞蛀得太大需要打桩。oh my baby father！我… … 其实我爸是牙医，对于牙科材料的成本我爸是最清楚的（除了肉痛还有羞耻，作为牙医的女儿，不爱护好牙齿，牙齿还需要其他人来做，我… …）补吧，第一次麻药让我第二天睡到了十点，没有想象中的那么恐怖。值得欣慰的是，医生说我的其他牙齿都很健康。</p>\n<p>奥，回家的时候看了老家的房子，7k+，可惜时间太短前期功课做得也很不充分就不了了之，不过家里的环境真的要比帝都好太多，爸爸看到我去看房了非常开心，不过和以前回家不同的是，他们都会催我快点回去工作，这次居然没催我，反而让我好好呆在北京 🤔 我不想成为一个不稳定因素，即使我的心是向往自由。只有在一个地方稳定持续的发展才是对自己的人生有利的吧。可是我又挺想回去了，带着我的百万宝宝。孤独感都是从回家到机场，下地铁到出租屋这段路上，工作的时间会冲淡这种感觉。回到北京的出租屋里，金百万正在睡觉。她并没有我想象中的那么想我, 过了好一阵子才表现出亲昵。</p>\n<p>假期我给炉石组了新的卡组，感觉用得还挺顺手的，能够冲到黄金 8 了, 之前都是白银3、4徘徊 😂，我居然象小学生一样沉迷网游了, hhhhh</p>\n<p>自己感兴趣的东西也挺多，不过确实也得精简下注意力了。</p>\n<p>「想做的梦从不怕别人看见」</p>\n<p>自己搞的 weekly 还挺有用，至少会在工作上提醒我下一周应该做哪些工作。我是不是改搞一个生活 weekly，interesting。</p>\n","categories":["生活随感"],"tags":[]},{"title":"关于疯狂输出与摸 🐟","url":"http://jocolorful.com/2020/09/27/生活-关于疯狂输出与摸🐟/","content":"<p>最近自己搞了一个 weekly，每周五的时候自己总结本周的输出以及下周 todo，放在自己空间下还挺有成就感的。不过以后带不走就很尴尬。</p>\n<p>参加了 HR 的画画活动，希望能拿到两份小奖品，嘻嘻。</p>\n<p>北漂看山带着月饼踏上了回家之路，TA 要回去看亲爱的爸爸妈妈</p>\n<center><img src=\"/images/kanshan-moon.jpg\" width=\"350px\" /></center>\n<p>两只兔子遥望地球许下了心愿，希望她们的愿望能够成真。</p>\n<center><img src=\"/images/moon.jpg\"  width=\"500px\" /></center>\n<p>33th 🌟 是要吃一次螺蛳粉，打开外卖盖子那一刻臭味迎面扑来，我毫不犹豫地说了句「WOC」。我很怀疑自己能吃得下去并且开始有些佩服吃螺蛳粉的人。赶紧把汤汁倒进粉里，臭味压下去了一些。然后开始搅拌起来，鼻子逐渐接受了这个味道。捞起来尝了一根很不错。嗨，想念铜梁的手工酸辣粉了。忍不住对比起来，各有特色，不过辣劲还是老家的给劲儿。北京的变态辣对我来说都是变态咸或者变态油。</p>\n<p>这个月我爸买了新车🚗。本来打算一起陪他去看的，但是他前一天说「我明天要去买车了」，结果第二天他就把车开回了家（这就是我爸雷厉风行，一次性全款毫不心疼）。新车是五座的，我得好好让他规划一下国庆带我们去哪里玩。（我还是自己规划好了，我估计他会把大把时间花在麻将桌上… …</p>\n<p>30 号的高铁回重庆，有些期待 🐶</p>\n","categories":["生活随感"],"tags":[]},{"title":"Redis 那些事","url":"http://jocolorful.com/2020/09/06/后端-Redis那些事/","content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行</p>\n</blockquote>\n<p>2008 年，一家意大利创业公司嫌弃 MySQL 的性能，所以就自己搞了套数据库：Redis。这个个人开发的数据库究竟有哪些特性吸引着开发者？我将一一研读探秘：</p>\n<h1>特性</h1>\n<h2 id=\"存储结构\">存储结构</h2>\n<p>Redis 的全称是 Remote Dictionary Server（远程字典服务器）</p>\n<p>Redis 的键值除了是字符串还可以是其他数据类型：</p>\n<ol>\n<li>字符串</li>\n<li>散列</li>\n<li>列表</li>\n<li>集合</li>\n<li>有序集合</li>\n</ol>\n<h2 id=\"内容存储与持久化\">内容存储与持久化</h2>\n<p>所有的数据都存储在内存中，内存的读写速度快于硬盘，一秒内可读写超过十万个键值。</p>\n<h2 id=\"功能丰富\">功能丰富</h2>\n<p>键值的 TTL 、单线程模型、可实现队列</p>\n<h2 id=\"简单稳定\">简单稳定</h2>\n<h1>入门</h1>\n<h2 id=\"字符串类型\">字符串类型</h2>\n<p>字符串类型是 Redis 中最基本的类型，它能存储任何形式的字符串，包括二进制数据。是其他 4 种数据类型的基础，一个字符串类型键最大哦的容量是 512 MB。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET key value</span><br><span class=\"line\">GET key</span><br></pre></td></tr></table></figure>\n<h2 id=\"散列类型\">散列类型</h2>\n<p>散列即 hash，其存储了字段 field 和 字段值的映射，「但字段值只能是字符串」，不支持其他数据类型。所以散列类型不能嵌套其他数据类型。</p>\n<img src=\"/images/hash.png\"  width=\"500px\"/>\n<p>命名规范一般遵守：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key: 对象类型:id</span><br><span class=\"line\">field: 属性</span><br><span class=\"line\">value: 字段值</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HSET key field value</span><br><span class=\"line\">HGET key field</span><br></pre></td></tr></table></figure>\n<h2 id=\"列表类型\">列表类型</h2>\n<p>Redis 列表类型内部使用双向链表（double linked list）实现，越接近两端速度越快，常用操作是两列表两端添加元素，或者获取列表片段。列表类型适合用来记录日志或者网站新鲜事。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LPUSH key value or RPUSH key value</span><br></pre></td></tr></table></figure>\n<h2 id=\"集合类型\">集合类型</h2>\n<p>集合：不保证顺序、唯一</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SADD key member</span><br><span class=\"line\">SREM key member</span><br></pre></td></tr></table></figure>\n<h2 id=\"有序集合\">有序集合</h2>\n<ol>\n<li>内部是通过散列表和跳跃表实现的，所以即使读取中间的数据速度也很快（O(log(N))）</li>\n<li>列表对于位置的调整不太方便，但有序集合可以（更改元素分数即可）</li>\n<li>有序集合更消耗内存</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZADD key score memeber</span><br></pre></td></tr></table></figure>\n<h2 id=\"类型对比\">类型对比</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">数据类型</th>\n<th style=\"text-align:left\">使用场景</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">用于存储普通数据，int，string等等类型的基本类型数据</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">hash</td>\n<td style=\"text-align:left\">通常用于存储数据对象类型</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">list</td>\n<td style=\"text-align:left\">用于存储一些有序列表</td>\n<td style=\"text-align:left\">双端操作较快，适用于日志、 可实现队列（其实我也没实践过，哭</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">set</td>\n<td style=\"text-align:left\">无序集合</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sort set</td>\n<td style=\"text-align:left\">有序集合</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<p>有些关于 Redis Key 命名的设计规范，我借鉴了 <a href=\"https://www.infoq.cn/article/lxpytc3KckJPi72E8L3P\" target=\"_blank\" rel=\"noopener\">Redis 开发设计规范及案例分析</a> 做了以下总结，并且在实际场景中有所运用</p>\n<ol>\n<li>可读性： 以业务名为前缀，用冒号分隔，可使用业务名：子业务名：id 的结构命名，子业务下多单词可再用下划线分隔。</li>\n<li>简洁性：这里需要控制 key 的长度，key 的占用内存不容忽视。</li>\n<li>不包含转义：不包含空格、换行、单双引号以及其他转义字符。</li>\n</ol>\n<h1>一些高级用法</h1>\n<h2 id=\"事务\">事务</h2>\n<p>事务是「一组命令」的集合：要么执行，要么都不执行。只有所有的命令都执行完成才能得到每个结果的返回值。</p>\n<h3 id=\"事务的错误：\">事务的错误：</h3>\n<ol>\n<li>语法错误：只要有一个错误就会不会执行。</li>\n<li>运行错误：如果某条命令错误，那么其他命令会继续执行。（Redis 并没有事务回滚 rollback 的功能</li>\n</ol>\n<h3 id=\"WATCH\">WATCH</h3>\n<p>防止竞态：在 GET 获得键值后不被其他客户端修改。直到函数完成后才允许其他客户端修改。</p>\n<p>请出事务家族的另外一位成员「WATCH」</p>\n<p>WATCH 命令可以监控一个或者多个键，一旦其中一个键被修改或删除之后的事务就不再执行。监控直到 EXEC 执行。</p>\n<h2 id=\"过期时间\">过期时间</h2>\n<p>通过 EXPIRE 设置某个 key 的过期时间</p>\n<h2 id=\"访问频次限制\">访问频次限制</h2>\n","categories":["后端相关"],"tags":["Redis"]},{"title":"Hackathon","url":"http://jocolorful.com/2020/09/06/生活-Hackathon/","content":"<p>令人快乐的事：这周 Hackthon 我们拿了 final！</p>\n<center><img src=\"/images/127A0435.JPG\" width=\"600px\" /></center>\n<p>今年的 Hackthon 的主题是「聚焦创作者」</p>\n<p>（我想金亚哥哥考试成绩一定很好，因为他押题很准，毕竟船长在海盗船里一直传递这个想法）</p>\n<p>我们的战队名字叫PPA（Power Point Athon）回头来看了眼群公告：里面的内容包括了 「联调沙盒」、「立项」、「PPT」、「数据摸底」、「设计文档」… 不知道其他团队的公告是什么样的，但从公告里看得出我们确实做了充分的准备。</p>\n<h1>Day 1</h1>\n<p>主题「聚焦创作者」发送至各个海盗邮箱。脑暴开始，大家把自己的 idea 写进了 Google 文档。我想的 idea 是创作者成团和内容分发相关，以下👇</p>\n<p>来个鸡汤：一个人可以走很快，但一群人可以走很远。为什么普通的创作者死得快，因为他们没有专业的技能。<br>\n但是一个团队就不一样了，每个人只要发挥自己的特长就行。我们打造一个「成团榜单」即可，就像 Hackthon 吧。（PS，即便是快手、抖音应该也有专业的团队来运营这些号。但是，他们有专门的系统来帮助他们成团并且运营吗？我不知道。。。hhhh）</p>\n<h1>Day 2</h1>\n<p>晚上「快闪课堂」idea 筛选。从晚 7 点 到 晚 9 点。各抒己见之后决定利用百度云的 SDK</p>\n<ol>\n<li>基于视频检索，提供视频素材检索能力</li>\n<li>搜索框可以搜索到视频，提供一个视频搜索产品方案</li>\n<li>视频素材热度趋势排行榜</li>\n</ol>\n<h1>Day 3</h1>\n<p>基于 idea 产出产品原型，明确分工。同时还分析出了我们的成本其中包括人力成本、推广成本、技术成本（媒体分析 百度云 单价6元/小时、服务器、CDN、数据库…）</p>\n<ol>\n<li>PM: 老张、双男、张湃</li>\n<li>运营：程赛</li>\n<li>设计：静远</li>\n<li>前端：周颖、德镇</li>\n<li>后端：茗一、后斌</li>\n<li>数据分析：舒鸿</li>\n<li>演讲家：侯策</li>\n<li>整体进度：金亚</li>\n</ol>\n<p>金亚哥哥看上去像一个 CEO（只有傻子才等到周四才开始想）。前端利用已有的项目 xen 搭建了一个小页面。大家还脑暴了产品名字：积木计划！</p>\n<h1>Day 4</h1>\n<p>比赛拉开序幕后，大家开始写码。其他组似乎还在脑暴 idea，我们组看起来格外的轻松。我甚至边写还边溜达，Hackthon 的伙食不错：各类小食，饮料，水果。写码不是件难事，难的是 iead 的产出和设计（静远老师相当给力）当然演讲是最重要的一环。侯老师和舒鸿也在认真准备 PPT。（舒鸿是耐看型的，侯老师眼光不错）</p>\n<h1>Day 5</h1>\n<p>The last day。</p>\n<p>早上八点多我就到公司暗中观察，这些年轻小伙子们太理智了，居然没人通宵！</p>\n<p>xen 的 app 实在太多，构建非常耗时。导致交付前两小时有些凌乱。我抱着我的猪排饭紧盯着 zae 的构建，吃饭时甚至不敢讲话。当构建完成后，我和德镇的 Demo 终于能够串联起来，我俩终于松了口气。然后我就拎着不知道谁的滑板出去玩了。</p>\n<center><img src=\"/images/huaban\" width=\"300px\" /></center>\n<p>我也是没心没肺，回来时已经是带着受伤的猪蹄。德镇还在处理好物推荐的 bug，侯老师他们找了个小黑屋准备演讲。我拿着冰块敷着猪蹄 … 吃着鸡米花。我自嘲道，我这个样子怎么上台领奖呢？</p>\n<p>下午三点是作品 Battle Time。说实话，没有几个作品给我留下了深刻的印象，即便是获得人气奖的「摘星计划」</p>\n<p>今天公布第一名的时候，我看到积木计划愣了几秒，感觉有些陌生（我心里一直想的是 PPA 战队，后来反应过来，确实是我们嘛）。主持人说我们组看上去是比赛过程中最悠闲的一组，还拿着自己的手环到处交换颜色，确实也是如此 🤦‍♀️</p>\n<center><img src=\"/images/127A1071.JPG\" width=\"500px\" /></center>\n<center><img src=\"/images/money.jpg\" width=\"500px\" /></center>\n<center>同时周五也是我登船一周年的纪念日。</center>\n<p>我在 Qunar 也参加了很多的活动，什么趣味运动会、1024 视频活动、Code Review …每次想拿个奖都费了很大的力气。而这次大家都付出了努力，致敬每一位认真对待的参赛者！</p>\n<p>Hackthon 已经过去两天，当我回顾这次旅程时我的心情依旧感到快乐并且难以平静。</p>\n","categories":["生活随感"],"tags":[]},{"title":"🧗‍♀️当我爬山时，我在想什么？","url":"http://jocolorful.com/2020/08/29/生活-爬山/","content":"<p>作为一个户外的领队，我可以很自豪的说我爬过这些山： 东北灵，凤凰岭 妙峰山 阳台山（三山穿越）、百花山、玉渡山、五台（东台）、坡峰岭… …实在太多就不一一罗列。那当爬山时我在想些什么？</p>\n<p>一开始接触户外时，我就走了一个三峰（连续爬三座山，完事儿后还逛了个商场吃了个火锅）此时我发现我骨骼惊奇，开始有空就出门爬山。后来参加青青的次数太多觉得不划算，索性自己也当个领队好了。</p>\n<h1>初来乍到</h1>\n<p>其实作为一名合格的社畜，周末有时间爬山是非常难能可贵的。上一家公司加班尤为严重，所以刚开始接触爬山时，经过了一周的职场 PUA，在爬升的过程中我满脑子都是「我为什么就不能在家里睡个懒觉，非要跟这群不认识的人爬山？」、「这群人为什么走得这么快，我太弱了… …」、「这到底什么时候才是个头啊？」</p>\n<p>作为一个审慎的弱 🐔，在看见陡峭的岩石时会她会在心里暗暗盘算：我接下来应该这么走以便于好下脚；当手脚并用的爬过一段山路时，她会感到非常得意！当她一不小心摔了个屁股：害，糗大了！当她第一次拿到手台进行调频和其他人进行沟通时：哇，这个好神奇啊！香港电影的保安也用这个！</p>\n<h1>弱鸡进化时</h1>\n<p>山爬多了，弱鸡不再是弱鸡。她俨然成了一只魔王小鸡… …山路崎岖、风景独秀已经不再能让魔王鸡感到振奋以及新奇。那是什么支撑着魔王鸡爬山呢？</p>\n<p>最简单的理由是习惯吧！当然完美地进行一次徒步或者攀登，弱鸡队员们对魔王鸡表示的感谢同样也鼓舞着她继续带队。</p>\n<p>一个人爬山和一群人爬山途中的想法会略有不同：</p>\n<p>今天恰好一个人爬了香八拉，在登好汉坡的时候我告诉自己：既然已经出来了，就不用过多地追求速度，而是应该享受爬山的过程。当我爬到快山顶回头望时，风景是真真地好。</p>\n<center><img src=\"/images/xiangbala.jpg\"  width=\"300px\" /></center>\n<p>如果我没有爬过这里的经验，我有勇气带队员来这里吗？我的答案是否定的，因为人生总是充满了意外。作为组织者，如果有任何意外我都必须负起一定的责任。</p>\n<p>出门前我带了两瓶速溶，作为一个咖啡因患者，喝咖啡是我的习惯。但是爬山的时候我真正需要的是矿泉水。所以更应该关注：「你需要什么，而不是你喜欢什么」</p>\n<p>有一条小道我走叉了，因为我顾着和群里聊天忘记看路了… 幸好及时修正了过来</p>\n<p>“如果小熊在，她肯定又要走一些奇奇怪怪的路。”</p>\n<p>“阿凯也曾经一个人走过这条路线”</p>\n<p>… …</p>\n<p>当我一个人在爬山时，我在想什么👆？爬完之后我感觉更加的笃定，心情也相应地平静下来。</p>\n<p>那一群人爬山时，我在想什么？</p>\n<p>（这个人怎么还不走？这个人体力太差了，应该多锻炼多锻炼；这个小孩子太皮了，管都管不住。这个队员会不喜欢我今天的表现吗？… …）</p>\n<p>一群人爬山时也有一群人的快乐，比如今年就认识了废物无限的元老成员，当个废物没有什么不好。一群人爬山不会给个人留太多的思考时间，我们会一起聊天、唱歌拍照，会做游戏会做一切令人快乐的事。也经常会遇到同行，我们会有共同的语言：Javascript！</p>\n<p>趁着心血来潮就先写到这里，我也不知道该写些什么了。当我爬山时，下一次我希望什么都不用想… …</p>\n","categories":["生活随感"],"tags":[]},{"title":"如何优雅地处理前端异常？","url":"http://jocolorful.com/2020/07/09/前端-catch-error/","content":"<p>原文：<a href=\"https://zhuanlan.zhihu.com/p/51800345\" target=\"_blank\" rel=\"noopener\">如何优雅处理前端异常？</a></p>\n<h1>异常的种类</h1>\n<ol>\n<li>JS 语法错误、代码异常</li>\n<li>Ajax 请求异常</li>\n<li>静态资源加载异常</li>\n<li>Promise 异常</li>\n<li>iframe 异常</li>\n<li>跨域 Script error</li>\n<li>崩溃和卡顿</li>\n</ol>\n<p>对于第二点：Ajax 异常，我更偏好称之为 http 异常<br>\n对于第四点：Promise 异常，我更偏好称之为异步异常</p>\n<h1>异常的处理</h1>\n<p>针对以上异常的种类，我们来看一下怎么处理：</p>\n<h2 id=\"try-catch-的误区\">try-catch  的误区</h2>\n<blockquote>\n<p>try-catch 只能捕获到同步的运行时错误，对语法和异步错误却无能为力</p>\n</blockquote>\n<h2 id=\"window-onerror-并不是万能的\">window.onerror 并不是万能的</h2>\n<ol>\n<li>同步异常可捕获</li>\n<li>语法错误不能捕获</li>\n<li>异步异常可捕获</li>\n</ol>\n<blockquote>\n<p>onerror 最好写在所有 JS 脚本的前面，否则有可能捕获不到错误；onerror 无法捕获语法错误；</p>\n</blockquote>\n<h2 id=\"window-addEventListener\">window.addEventListener</h2>\n<p>当静态资源加载失败会触发 error 事件。由于网络请求异常不会事件冒泡，因此必须在捕获阶段将其捕捉到才行，但是这种方式虽然可以捕捉到网络请求的异常，但是无法判断 HTTP 的状态是 404 还是其他比如 500 等等，所以还需要配合服务端日志才进行排查分析才可以。</p>\n<h2 id=\"Promise-Catch\">Promise Catch</h2>\n<p>promise 的 catch 可以非常容易地捕获异步的错误。</p>\n<p>没有 catch 的 Promise 中抛出的错误无法被 onError 或 try-catch捕获到。所以务必要写 catch 处理抛出异常。</p>\n<p>解决方案： 为了防止有漏掉的 Promise 异常，建议在全局增加一个对 unhandledrejection 的监听，用来全局监听Uncaught Promise Error。使用方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"unhandledrejection\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>那如果对 Promise 不进行 catch 呢:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"unhandledrejection\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'捕获到异常：'</span>, e)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  reject(<span class=\"string\">'jartto: promise error'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><font color=\"red\">如果去掉控制台的异常显示，需要加上：</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">event.preventDefault()</span><br></pre></td></tr></table></figure>\n<h2 id=\"React-的异常处理\">React 的异常处理</h2>\n<p>UI的某部分引起的 JS 错误不应该破坏整个程序，为了帮React的使用者解决这个问题，React 16介绍了一种关于错误边界</p>\n<p>注意： error boundaries并不会捕捉这些错误：</p>\n<ol>\n<li>\n<p>事件处理器</p>\n</li>\n<li>\n<p>异步代码</p>\n</li>\n<li>\n<p>服务端的渲染代码</p>\n</li>\n<li>\n<p>在error boundaries区域内的错误</p>\n</li>\n</ol>\n<h2 id=\"iframe-异常\">iframe 异常</h2>\n<p>借助 window.onerror</p>\n<h2 id=\"script-异常\">script 异常</h2>\n<h2 id=\"崩溃和卡顿\">崩溃和卡顿</h2>\n<ol>\n<li>利用 window 对象的 「load」 和 「beforeunload」 事件实现了「网页崩溃」的监控</li>\n<li>使用 Service Worker 来实现网页崩溃的监控：\n<ol>\n<li>Service Worker 有自己独立的工作线程，与网页区分开，网页崩溃了，Service Worker 下不会崩溃；</li>\n<li>Service Worker 生命周期一般要比网页还要长，可以用来监控网页的状态；</li>\n<li>网页可以通过 navigator.serviceWorker.controller.postMessage API 向掌管自己的 SW发送消息</li>\n</ol>\n</li>\n</ol>\n<h1>错误上报</h1>\n<ol>\n<li>利用 Ajax 请求上报</li>\n<li>动态创建 img 标签的形式</li>\n</ol>\n<p>上报时，设置采集率以减少服务器压力</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Reporter.send = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 只采集 30%</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.random() &lt; <span class=\"number\">0.3</span>) &#123;</span><br><span class=\"line\">    send(data)      <span class=\"comment\">// 上报错误信息</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["前端相关"],"tags":[]},{"title":"GET 和 POST 的差异","url":"http://jocolorful.com/2020/07/07/Http-POST-GET/","content":"<p>原文：<a href=\"https://segmentfault.com/a/1190000018129846\" target=\"_blank\" rel=\"noopener\">都9102年了，还问GET和POST的区别</a></p>\n<ol>\n<li>\n<p>GET 和 POST 只是 HTTP 协议中两种请求方式，而 HTTP 协议是基于 TCP/IP 的应用层协议，无论 GET 还是 POST，用的都是同一个传输层协议，所以在传输层上，没有任何区别。</p>\n<ol>\n<li>当 GET 和 POST 「不携带参数」时，最大的区别是第一行方法名不同:<br>\n请求报文第一行</li>\n</ol>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /uri HTTP/1.1 \\r\\n</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /uri HTTP/1.1 \\r\\n</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>当 GET 和 POST 「携带参数」时，安装约定 GET 方法的参数应该放在 URL 里，POST 方法的参数应该放在  body 中</li>\n</ol>\n<p>GET 简约版报文</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /index.php?name=qiming.c&amp;age=22 HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br></pre></td></tr></table></figure>\n<p>POST 简约版报文</p>\n <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /index.php HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">name=qiming.c&amp;age=22</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>「浏览器」的 URL 有长度限制是出于「安全」和「性能」考虑，在解析长 URL 时需防止恶意构造长 URL 来进行攻击，和 HTTP 协议本身没有关系。</p>\n</li>\n</ol>\n","categories":["协议相关"],"tags":[]},{"title":"fecth 和 ajax 的区别","url":"http://jocolorful.com/2020/07/07/前端-Fetch和ajax的区别/","content":"<h1>fetch</h1>\n<p>window 的一个对象, 他是更加底层的一个API。</p>\n<ol>\n<li>\n<p>默认的请求为get请求 可以使用method:post 来进行配置</p>\n</li>\n<li>\n<p>第一步中的 response有许多方法 json() text() formData()</p>\n</li>\n<li>\n<p>Fetch跨域的时候默认不会带cookie 需要手动的指定 credentials:‘include’</p>\n</li>\n<li>\n<p>fetch 是一个 low-level 的 API，所以你需要自己 encode HTTP 请求的 payload，还要自己指定 HTTP Header 中的 Content-Type 字段。</p>\n</li>\n<li>\n<p>按照 MDN 的说法，fetch 只有在遇到网络错误的时候才会 reject 这个 promise，比如用户断网或请求地址的域名无法解析等。只要服务器能够返回 HTTP 响应（甚至只是 CORS preflight 的 OPTIONS 响应），promise 一定是 resolved 的状态。</p>\n</li>\n</ol>\n<h1>ajax</h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xml&#x3D;new XMLHttpRequest();</span><br><span class=\"line\">    xml.open(&#39;GET&#39;,&#39;a.json&#39;,true);  &#x2F;&#x2F;第三个参数表示是否异步</span><br><span class=\"line\">    xml.send(null);&#x2F;&#x2F;参数为要给服务器传递的参数  若只是单纯的向服务器取数据  则传递null</span><br><span class=\"line\">  xml.onreadystatechange&#x3D;function () &#123;</span><br><span class=\"line\">      if(xml.readyState&#x3D;&#x3D;4)&#123;</span><br><span class=\"line\">          console.log(11)</span><br><span class=\"line\">          if(xml.status&#x3D;&#x3D;200)&#123;</span><br><span class=\"line\">              console.log(xml.responseText)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n","categories":["前端相关"],"tags":[]},{"title":"前端性能量化标准读后感","url":"http://jocolorful.com/2020/07/01/前端-性能量化标准读后感/","content":"<p>祭出原 issue 👉 <a href=\"https://github.com/frontend9/fe9-library/issues/7\" target=\"_blank\" rel=\"noopener\">前端性能量化标准</a></p>\n<h1>它正在发生吗？</h1>\n<p>FP：First paint 第一个像素绘制时间<br>\nFCP：First Content paint 首次内容绘制时间</p>\n<ol>\n<li>\n<p>window.performance.getEntriesByType(‘paint’)</p>\n</li>\n<li>\n<p>当然也可以使用 lighthouse，<br>\n这里我全局安装的 lighthouse</p>\n</li>\n</ol>\n<h1>它是否有用？</h1>\n<p>FMP： First meaningful paint<br>\nhero element timing</p>\n<p>Lighthouse 使用的算法是：页面绘制布局「变化」最大的那次绘制（根据 页面高度/屏幕高度 调节权重）</p>\n<h1>它是否令人愉快的</h1>\n<p>Long tasks。</p>\n<p>JS 线程与 GUI 线程互斥。JS 如果在执行，那么渲染线程就会被阻塞。如果一个 LT 超过 50 ms ，就说明这个线程有问题。</p>\n<h1>它是否可用 ？</h1>\n<p>TTI：Time to interactive（页面已经渲染并且可以响应用户交互）。不能响应用户的原因有：</p>\n<ol>\n<li>JS 的资源还未加载完。</li>\n<li>Long Task 阻塞了主线程</li>\n</ol>\n<h1>思考</h1>\n<p>当然这片文章还提出了一些优化策略，优化过程应该是一个全链路的解决方案。</p>\n<p>关于测量标准记录这些，策略手段我想我的学习清单又是一篇长笔记！</p>\n","categories":["前端相关"],"tags":[]},{"title":"CSS 性能优化的 8 个技巧","url":"http://jocolorful.com/2020/06/19/CSS性能优化的8个技巧/","content":"<blockquote>\n<p>这周周会翼巧同学分享了「内联首屏关键CSS(Critical CSS)」我学习的热情又燃起来了！</p>\n</blockquote>\n<p>祭出原文👉 <a href=\"https://juejin.im/post/5ece2a1e6fb9a048021466b0?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">CSS性能优化的 8 个技巧</a></p>\n<p>翼巧同学使用的是第一种方式（但不是内联，是内嵌），反正我已经知道怎么做的了，来看看优缺点吧！</p>\n<h1>关键 CSS</h1>\n<h2 id=\"优点\">优点</h2>\n<ol>\n<li>内联 CSS 能够使浏览器开始页面渲染的时间提前</li>\n</ol>\n<h2 id=\"缺点\">缺点</h2>\n<ol>\n<li>\n<p>无法缓存 CSS</p>\n</li>\n<li>\n<p>内嵌样式体积需要较小</p>\n</li>\n</ol>\n<h1>异步加载 CSS</h1>\n<ol>\n<li>通过 script 标签异步创建 link 标签</li>\n<li></li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"preload\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mystyles.css\"</span> <span class=\"attr\">as</span>=<span class=\"string\">\"style\"</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"this.rel='stylesheet'\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1>文件压缩</h1>\n<h1>去除无用 CSS</h1>\n<ol>\n<li>保持简单，不要使用嵌套过多过于复杂的选择器</li>\n<li>通配符和属性选择器效率最低，需要匹配的元素最多，尽量避免使用</li>\n<li>不要使用类选择器和 ID 选择器修饰元素标签</li>\n<li>不要为了追求速度而放弃可读性与可维护性</li>\n</ol>\n<p>复习一遍： 为什么CSS选择器是从右向左匹配的</p>\n<blockquote>\n<p>CSS 中更多的选择器是不会匹配的，所以在考虑性能问题时，需要考虑的是如何在选择器「不匹配」时提升效率。从右向左匹配就是为了达成这一目的的，通过这一策略能够使得CSS选择器在不匹配的时候效率更高。这样想来，在匹配时多耗费一些性能也能够想的通了</p>\n</blockquote>\n<h1>减少使用昂贵的属性</h1>\n<h1>减少重排和避免重绘</h1>\n<h1>不要使用 @import</h1>\n<p>使用@import引用的 CSS 文件只有在引用它的那个css文件被「下载、解析」之后，浏览器才会知道还有另外一个 CSS 需要下载，这时才去下载，然后下载后开始解析、构建render tree等一系列操作。这就导致浏览器无法并行下载所需的样式文件。</p>\n<p>直接导致的后果：</p>\n<p>当然是异步加载完的重绘</p>\n<p>That’s All !</p>\n<p>犹梦杰同学分享了一个高大上的分享，反正我是听不到太懂？ 我决定周末在家无聊的时候补一下。hiahiahia</p>\n","categories":["漂亮的 CSS"],"tags":[]},{"title":"todo-list","url":"http://jocolorful.com/2020/06/19/todo-list/","content":"<h1>HTML</h1>\n<h1>JavaScript</h1>\n<ul>\n<li>[ ] Mercury</li>\n</ul>\n<h1>CSS</h1>\n<ul>\n<li>[x] <a href=\"http://jocolorful.com/2020/05/25/%E6%88%91%E9%9C%80%E8%A6%81%E8%83%8C%E4%BC%9A%E7%9A%84%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/\">css加载会造成阻塞吗</a></li>\n<li>[x] <a href=\"https://juejin.im/post/5c35953ce51d45523f04b6d2\" target=\"_blank\" rel=\"noopener\">不可思议的纯 CSS 滚动进度条效果</a></li>\n</ul>\n<h1>工程能力</h1>\n<ul>\n<li>[x] <a href=\"\">前端缓存最佳实践</a></li>\n<li>[x] <a href=\"https://github.com/frontend9/fe9-library/issues/7\" target=\"_blank\" rel=\"noopener\">前端性能量化标准</a></li>\n<li>[x] <a href=\"https://zhuanlan.zhihu.com/p/51800345\" target=\"_blank\" rel=\"noopener\">如何优雅处理前端异常？</a></li>\n</ul>\n<h1>阅读书单</h1>\n<ul>\n<li>[ ] <a href=\"https://www.zhihu.com/pub/book/119565177\" target=\"_blank\" rel=\"noopener\">算法图解</a></li>\n<li>[ ] <a href=\"https://www.zhihu.com/pub/book/119648496\" target=\"_blank\" rel=\"noopener\">算法（第 4 版)</a></li>\n</ul>\n<h1>电影</h1>\n<h1>工具</h1>\n<ul>\n<li>[x] iTerm2 的总结</li>\n<li>[ ] Sublime Text 配置</li>\n</ul>\n","categories":[],"tags":["学习清单"]},{"title":"天空之城","url":"http://jocolorful.com/2020/05/28/生活-天空之城/","content":"<center>\n我是天空里的云\n<p>投影在你的城</p>\n<p>你是否看得见</p>\n<p>那阵细雨有我的泪</p>\n<p>我放任在天空飞</p>\n<p>随风飘舞任风吹</p>\n<p>你是否还在那座城里</p>\n<p>坚守着我的归期</p>\n<p>不曾后悔爱过你</p>\n<p>你是我最美的回忆</p>\n<p>点点滴滴那些甜蜜抹不去</p>\n<p>全都是你的回忆</p>\n<p>你看那 看那  片天空</p>\n<p>依旧像昨天的蔚蓝</p>\n<p>你听那  听那  一阵风</p>\n<p>风里全都是我的思念</p>\n<p>不曾后悔爱过你</p>\n<p>你是我最美的回忆</p>\n<p>点点滴滴  那些甜蜜抹不去</p>\n<p>全都是你的回忆</p>\n<p>你看那  看那  片天空</p>\n<p>依旧像昨天的蔚蓝</p>\n<p>你听那  听那  一阵风</p>\n<p>风里全都是我的思念</p>\n<p>我是天空里的云</p>\n<p>投影在你的城</p>\n<p>你是否看得见</p>\n<p>那阵细雨有我的泪</p>\n<p>我放任在天空飞</p>\n<p>随风飘舞任风吹</p>\n<p>你是否还在那座城里</p>\n<p>坚守着我的归期 坚守着我的归期</p>\n</center>","categories":[],"tags":["小欢喜"]},{"title":"关于在 Koa 中全局注入反作弊的思考","url":"http://jocolorful.com/2020/05/26/Node-Koa全局注入反作弊/","content":"<p>我查阅过的资料</p>\n<p><a href=\"https://juejin.im/post/5ece2a1e6fb9a048021466b0?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">一杯茶的时间，上手 Koa2 + MySQL 开发</a></p>\n<p>前言：我们的项目是借助 Wepack，配置两套打包的脚本，分别输出服务端渲染「SSR」以及客户端渲染「CSR」所需要的资源。服务端渲染是利用「Koa」 以及渲染引擎 「Mustache」输出首屏内容。</p>\n<p>以上</p>\n<p>反作弊的状态码由后端返回</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MEMBER_FROZEN_EXCEPTION_MAP &#x3D; &#123;</span><br><span class=\"line\">  40350: &#39;abuseip&#39;,</span><br><span class=\"line\">  40351: &#39;imfrozen&#39;,</span><br><span class=\"line\">  40352: &#39;unhuman&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>http status 状态码为 403 时需要进行异常处理。</p>\n<p>Node 端和 Client 端本身就是隔离的（所以有了同构技术），需要考虑在不同环境对<code>http status</code>的处理。</p>\n<p>我可以联想到以下关键字👇</p>\n<p>「中间件」「责任链模式」「洋葱模型」「你是否真的懂 try…catch」</p>\n<h1>中间件</h1>\n<blockquote>\n<p>为什么叫中间件？因为出于 Http 的 Request 和 Response 中间，用来实现某种功能。</p>\n</blockquote>\n<p>我的老板提出这个问题时，我几乎立刻抖了个机灵：写个中间件呗？（因为我室友就是专业写中间件的，hahaha）</p>\n<p>老板：嗯？Koa 基于洋葱模型，那能拿到 http 状态吗？</p>\n<p>抖机灵：从 ctx 取呗？</p>\n<p>老板：那 C 端怎么做呢？</p>\n<p>抖机灵：从 fetch 请求直接 reject 出来！</p>\n<img src=\"/images/koa.png\"  width=\"500px\" />\n<p>哦! Koa 对标 Express 底层 <a href=\"https://github.com/senchalabs/connect\" target=\"_blank\" rel=\"noopener\">connect</a></p>\n<img src=\"/images/onion.png\"  width=\"500px\" />\n<p>嘿嘿嘿，虽然把网上这个图抄过来了。但是我们可以仔细看看这个中间件的设计！什么设计？顺序！</p>\n<p>目前我们的 xen 项目已经有了各类错误上抛的机制，我在想在 中间件 的基础上是否能在加入</p>\n<ol>\n<li>缓存控制的中间件</li>\n</ol>\n<p>还没想好，想好在补吧</p>\n","categories":["Node.js"],"tags":[]},{"title":"CSS 加载会造成阻塞吗？","url":"http://jocolorful.com/2020/05/25/CSS 加载会造成阻塞吗/","content":"<p><a href=\"https://github.com/Nealyang/PersonalBlog/issues/48\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<h1><a href=\"https://juejin.im/post/5b88ddca6fb9a019c7717096\" target=\"_blank\" rel=\"noopener\">👉 CSS 加载会造成阻塞吗</a></h1>\n<p>读后感：</p>\n<p>在浏览器引擎渲染的世界里，我简单地将 HTML 呈现给用户的方式分为了两个过程：加载以及渲染。</p>\n<p>DOM 树从上至下依次<strike>渲染</strike> 解析。遇到 script 标签时，默认会阻止页面解析并平行下载 JS 文件。所以大部分的文章建议你将 JS 文件放在 body 后面，这样不会影响 HTML 的解析。</p>\n<p>属性<code>defer</code>以及<code>async</code>不会阻塞页面解析，文档解析完成之后，<code>defer</code> 和 <code>async</code> 脚本执行。<code>defer</code>以及<code>async</code> 的区别在于：<code>defer</code>执行脚本的顺序是加载顺序 而<code>async</code>则不能保证顺序。同时这两个属性都只在外链时生效，即含有<code>src</code>属性时生效。</p>\n<p>在看完文章之后，我再次</p>\n<h1>提问？</h1>\n<p>既然问题是 CSS 是否会造成阻塞，那么阻塞什么内容呢？</p>\n<p>DOM 的解析？DOM 的渲染？JS 的加载？JS的执行？</p>\n<h1>结论</h1>\n<p>以上我们可以分析出：</p>\n<ol>\n<li>\n<p>CSS 的加载并不会阻塞 DOM 的解析</p>\n</li>\n<li>\n<p>CSS 的加载会阻塞 DOM 的渲染</p>\n</li>\n<li>\n<p>CSS 的加载不会阻塞 JS 的加载，JS 加载阻塞和 script 标签的位置以及是否含有 <code>defer</code> 和 <code>async</code> 属性相关</p>\n</li>\n<li>\n<p>CSS 的加载会阻塞「后面 JS」语句的执行，（DOMContentLoaded 内容解析完成）因为 JS 有可能需要操作前面 DOM 的样式。其他其他情况下，DOMContentLoaded 都不会等待 CSS 加载，并且 DOMContentLoaded 事件也不会等待图片、视频等其他资源加载。</p>\n</li>\n</ol>\n","categories":["漂亮的 CSS"],"tags":[]},{"title":"他山之石","url":"http://jocolorful.com/2020/05/23/实用Demo整理/","content":"<h1>工具类</h1>\n<p><a href=\"https://mdnice.com/\" target=\"_blank\" rel=\"noopener\">📓 微信公众号排版</a><br>\n<a href=\"https://carbon.now.sh/\" target=\"_blank\" rel=\"noopener\">🎨 代码界的美图秀秀</a><br>\n<a href=\"https://sequelpro.com/download\" target=\"_blank\" rel=\"noopener\">🐬 MySQL 可视化工具</a></p>\n<h1>Demo</h1>\n<p><a href=\"https://codesandbox.io/s/sortabletree-pwrfv\" target=\"_blank\" rel=\"noopener\">👉 使用 react-dnd 实现拖拽 </a><br>\n<a href=\"https://codesandbox.io/s/draft-js-highlight-ir4bd\" target=\"_blank\" rel=\"noopener\">👉 使用 draft.js 实现编辑器文本高亮</a></p>\n","categories":["他山之石"],"tags":[]},{"title":"搬砖公主折腾记","url":"http://jocolorful.com/2020/05/11/搬砖公主折腾记/","content":"<h1>前言</h1>\n<p>这也不知道是我第几次折腾博客了，希望是最后一次！<br>\n我的博客是基于 Hexo 的静态页面生成<br>\n在不断折腾博客的时候，我总结了几个坑👇</p>\n<ol>\n<li>源文件经常丢失。</li>\n<li>图片存储在七牛云，强依赖第三方过了几年有些图片已经不能正常显示。🤦‍♀️</li>\n<li>能动性不强，一年也就更个两三篇。</li>\n<li>主题常常跑偏…</li>\n</ol>\n<h1>回归之路</h1>\n<blockquote>\n<p>给自己提问：为什么要重新记录这个博客？我是否能够坚持？</p>\n</blockquote>\n<p>记录这个博客的原因很简单：</p>\n<ol>\n<li>\n<p>换电脑需要配置一些环境时，我希望能够有一份完善的配置记录，我能够无脑 copy 配置。</p>\n</li>\n<li>\n<p>作为一名前端开发，我希望能够有技术沉淀。将近三年的开发经验让我养成了「问为什么」的习惯。我希望我弄能掌握每个知识点。当然我的我的脸皮足够厚，即便到了第三个工作的年头，我依旧承认有些 HTML 的属性我并不是完全掌握。</p>\n</li>\n<li>\n<p>我能够坚持吗？hhhh，我自己都持怀疑态度，也许有人监督会好一些吧。但是我希望每一篇文章都足够高质量并且用心，有时候并不是为了产出而产出。可能会记更多 bug 以及思考之类的？</p>\n</li>\n</ol>\n<p>暂时只想到这些吧，源文件的丢失导致我得重新生成把以前的博客整理一下</p>\n<p>当然，我希望我的博客不仅仅只有技术，这里也融入了我对生活的态度。</p>\n","categories":["生活随感"],"tags":[]},{"title":"iTerm2","url":"http://jocolorful.com/2020/05/11/工具-iTerm2/","content":"<p>iTerm2 是我常用的终端工具，每次换电脑安装的第一个软件就是它。青睐于 iTerm 的原因很简单：</p>\n<ol>\n<li>支持分屏模式</li>\n<li>可配置插件</li>\n<li>颜值 online</li>\n</ol>\n<p>I love this black cat background！</p>\n<img src=\"/images/iterm.png\"  width=\"500px\"/>\n<h1>Shell 冷知识</h1>\n<p>前端开发往往不关心 *nix 内核。Shell 仅仅只是一个「壳」而已。我们借助 Shell 和内核打交道。Mac 自带终端的 Shell 是 bash。常见的 Shell 有 sh、bash、zsh、csh</p>\n<p>通过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &#x2F;etc&#x2F;shells</span><br></pre></td></tr></table></figure>\n<p>可以查看安装<br>\n<img src=\"/images/cat.png\"  width=\"300px\"/></p>\n<h1>zsh</h1>\n<h2 id=\"手动安装\">手动安装</h2>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class=\"line\">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>\n<p>换回bash</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chsh -s /bin/bash</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动安装\">自动安装</h2>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure>\n<h1>配置</h1>\n<h2 id=\"必备插件\">必备插件</h2>\n<p><a href=\"https://github.com/ohmyzsh/ohmyzsh\" target=\"_blank\" rel=\"noopener\">ohmyzsh</a><br>\nitermpreference.png</p>\n<p>内置了 git 的插件管理 还有一些漂亮的主题，这里不在赘述</p>\n<h2 id=\"快捷键\">快捷键</h2>\n<p>对于日常开发我常用分屏模式，已经能够满足对于多个窗口的诉求</p>\n<p>command + D<br>\ncommand + shift + D</p>\n<h3 id=\"默认打开工作区\">默认打开工作区</h3>\n<p>在 preference 的设置里面，我勾选了 Reuse previous session‘s directory。</p>\n<img src=\"/images/itermpreference.png\"  width=\"300px\"/>\n<p>这样每次打开都是从上一个工作区切出来的目录，这对于一个项目需要启动多个端口来说非常友好。</p>\n<h3 id=\"open-Buff\">open Buff</h3>\n<p>其实这算事 iTerm 的一个 Buff，我给 ~/.zshrc 配置了 open 命令的别名：</p>\n<img src=\"/images/itermalias.png\"  width=\"300px\"/>\n<p>这使得我可以使用终端快速打开文件。据我所知 atom 自带了 atom 命令来实现这个效果，但是我更倾向于自己 DIY，而不是依赖 IDE。这也是我选择 sublime 的原因。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subl &#123;path&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"颜值-Buff\">颜值 Buff</h3>\n<p>做为一只颜狗，我给 iTerm2 配置了背景图，并且设置了默认的行列数，以减少手动放大 iTerm2。</p>\n<img src=\"/images/itermbg.png\"  width=\"300px\"/>\n","categories":[],"tags":[]},{"title":"生活-十三陵","url":"http://jocolorful.com/2020/03/05/生活-十三陵/","content":"<h1>十三陵</h1>\n<p>三月六号即将去往十三陵，对于这种历史积淀较深的景点自然是不敢怠慢。奈何历史不好，对于明朝的影响无非就是小学看的电视剧《穿越时空的爱恋》，故得好好准备一番。</p>\n<p>明朝共有16位皇帝，但北京的明十三陵只有13位皇帝，未入陵者因由各异。明朝开国皇帝朱元璋早年建都于南京，死后葬于南京紫金山的“孝陵”；继位的明太祖朱元璋长孙明惠帝朱允炆，在其叔父燕王朱棣（即后来的明成祖）发起“靖难之役”攻破南京之后下落不明，加上永乐帝不承认其帝位，因此没有帝陵；第七帝明代宗朱祁钰，在其兄明英宗于土木堡之变被瓦剌所俘之后登上帝位。后来明英宗复辟，朱祁钰速死，明英宗不承认其帝位，捣毁其在天寿山修建的寿陵。还有一说，寿陵被改建为在位仅29天的明光宗的陵墓，改名为庆陵。明宪宗以亲王身份将他葬于北京西郊金山的景泰陵。</p>\n<p>大家前往的时候能够看见黄色琉璃屋顶，就知道是皇帝的陵园。但是因为分布众多，再加上交通不便和疫情影响，大部分只去往部分的开放景点，一般人走不完皇帝的最后归处。</p>\n<center><img src=\"/images/wKgEaVyGWPiASqXiAAipDFOOPKI84.jpeg\" width=\"500\" /></center>\n<h1>长陵「明成祖」</h1>\n<p>明长陵为明朝第三位皇帝明成祖朱棣的陵墓。为明十三陵的第一陵，也是主陵。陵内安葬明成祖朱棣和徐皇后。</p>\n<h1>献陵「明仁宗」</h1>\n<p>明仁宗是明成祖朱棣长子，生母徐皇后为徐达之女。</p>\n<h1>景陵「明宣宗」</h1>\n<h1>裕陵「明英宗」朱祁镇</h1>\n<p>明英宗「朱祁镇」是明朝第六任、第八任皇帝（1435—1449年、1457—1464年两次在位）。</p>\n<p>第一次继位称帝，年仅九岁，年号正统。国事全由太皇太后张氏把持，贤臣「三杨」主政。随之，张氏驾崩，三杨去位，宠信太监「王振」，导致宦官专权。</p>\n<p>正统十四年（1449年），发生土木堡之变。</p>\n<p>朱祁镇不顾吏部尚书王直等群臣反对，偕同王振率军五十余万御驾亲征。命皇弟郕王朱祁钰留守京师。此次出征，诏下两日五十万大军即匆忙集结启程，各项准备均不足，上下一片混乱。亲征诏书下达后，英宗对文武大臣的多次劝谏置之不理。英宗虽然名为亲征，但军务大事皆由监军太监王振决定，将领处处受王振节制，无法按己意指挥作战，而王振不懂军事，指挥接连失当，致使明军屡战屡败。</p>\n<p>土木堡之变是明朝由盛转衰的标志性事件。</p>\n<p>朱祁镇北伐瓦剌却惨败被俘的事变，其弟郕王「朱祁钰」登基称帝，遥尊英宗为太上皇，改元景泰。</p>\n<p>后英宗回京，被景泰帝软禁于南宫。景泰八年（1457年），石亨等人发动夺门之变，英宗复位，第二次称帝，改元天顺。</p>\n<p>明英宗复辟，朱祁钰速死，明英宗不承认其帝位，捣毁其在天寿山修建的寿陵。明宪宗以亲王身份将他葬于北京西郊金山的景泰陵。</p>\n<p>朱祁镇前后在位二十二年，在位初期励精图治稳定西南疆域。当初宠信王振，后来又宠信曹吉祥、石亨，政治上虽然有不足之处，但是晚年任用李贤，听信纳谏，仁俭爱民，美善很多。还废除了「殉葬制度」。天顺八年（1464年）明英宗病逝。庙号英宗，谥曰法天立道仁明诚敬昭文宪武至德广孝睿皇帝。葬于明十三陵之裕陵。</p>\n<h1>茂陵「明宪宗」朱见深</h1>\n<h1>泰陵「明孝宗」</h1>\n<p>朱祐樘</p>\n<p>明孝在位初期，励精图治、整肃朝纲、改革弊政，罢逐了朝中奸佞之臣、重用贤士，为于谦建祠平冤，减轻赋税、停征徭役、兴修水利、发展农业、繁荣经济，史称「弘治中兴」。</p>\n<p>清朝的学者对弘治中兴一直争论不休，褒扬者有之，怀疑者亦有之。弘治朝的功过是非，有人认为所谓的弘治中兴名不副实，它只是一个短暂、勉强的「治世」</p>\n<p>不为人知的历史趣事：朱祐樘发明家？据美国牙医学会的资料表示，明孝宗于 1498年 把猔毛插进一支 「骨制手把」上制成了牙刷。</p>\n<h1>康陵「明武宗」</h1>\n<p>武宗是明朝极具争议性的统治者。</p>\n<p>他任情恣性，为人嬉乐胡闹，荒淫无度。有时也抢夺有夫之妇，逸游无度。施政荒诞不经，朝廷乱象四起<br>\n又信仰密宗、伊斯兰教等，自称忽必烈（蒙古名，元世祖之名）、沙吉熬烂（波斯语，伊斯兰教苏菲派的苏菲师）、苏莱曼沙阿（波斯语）、大宝法王（藏密名，白教首领）。</p>\n<p>另一方面，他为人刚毅果断，，平定安化王、宁王之乱，在<br>\n「应州之役」中击败达「延汗」，令鞑靼多年不敢深入，并积极学习他国文化，促进中外交流，体现出有为之君的素质，是一位功过参半的皇帝。</p>\n<h1>永陵「明世宗」</h1>\n<p><a href=\"https://baike.baidu.com/item/%E6%9C%B1%E5%8E%9A%E7%86%9C/2412426?fromtitle=%E5%98%89%E9%9D%96%E7%9A%87%E5%B8%9D&amp;fromid=2374776\" target=\"_blank\" rel=\"noopener\">嘉靖</a>朱厚熜</p>\n<h1>昭陵「明穆宗」</h1>\n<p>明镜昭廉<br>\n「明代反贪尚廉历史观光园处」</p>\n<p><a href=\"https://www.dpm.org.cn/court/lineage/226264\" target=\"_blank\" rel=\"noopener\">穆宗隆庆皇帝</a> （唐太宗李世民陵墓也叫昭陵，位于 陕西 省 咸阳 市）</p>\n<p>按照传统的说法，隆庆帝也是一位「节俭仁厚」的君主。在隆庆帝在位期间，几乎没有爆发什么重大的变故，隆庆帝得以稳坐皇位六年且，仅6年，去世时 36 岁。</p>\n<p>这一切与他的童年经历密切相关，因生母杜康妃失宠，又非长子，朱载垕小时很少得到父爱。嘉靖三十二年（1553年），刚满 16 岁的朱载垕就开始了在「裕王邸」的独居生活。在裕王邸 13年 的生活，使朱载垕较多地接触到社会生活各方面，了解到明王朝的各种矛盾和危机，特别是严嵩专政，朝纲颓废，官吏腐败，「南倭北虏」之患，民不聊生之苦，内忧外患使他关心朝局，对他登基后处理政务有着较大的影响。</p>\n<h1><a href=\"https://baike.baidu.com/item/%E6%98%8E%E5%AE%9A%E9%99%B5/878416?fromtitle=%E5%AE%9A%E9%99%B5&amp;fromid=45384\" target=\"_blank\" rel=\"noopener\">定陵</a>「明神宗」</h1>\n<p>十三陵中最大的三座陵园：成祖长陵、世宗永陵、神宗定陵</p>\n<p>明星没隐私，皇帝没私坟。</p>\n<p>1956年 - 1957 年 对定陵进行了挖掘</p>\n<p>1958 对外发布消息：「明十三陵中定陵已打开……明朝第十三位皇帝朱翊钧和他的两个皇后尸体腐烂，骨架完好，头发软而有光。尸骨周围塞满了无数的金银玉器和成百匹的罗纱织锦… …」一经公布，引发了海内外无数艳羡的目光和赞叹之声。</p>\n<p>1966年，在「文化大革命」期间，定陵却被当做「牛鬼蛇神」批斗，万历皇帝及两位皇后（孝端、孝靖）的尸骨棺椁被毁。且由于当时人们文物保护意识不强和发掘技术有限，使定陵出土的大量丝织品未得到及时有效的保护，迅速风化，因此，定陵的发掘也被认为是考古史上的一大悲剧。</p>\n<p>此后，国家出台政策不再「主动」挖掘帝王陵墓。</p>\n<h1>庆陵「明光宗」</h1>\n<p>朱常洛 - 一月天子</p>\n<p>该陵墓原为「景泰帝」所建，因景泰帝为英宗复辟时所贬，葬于西郊金山，所以空出一处皇陵。</p>\n<p>由于明光宗在位时间仅 29 天，来不及修建陵墓，故继位的「明熹宗」朱由校将光宗安葬于此陵墓。</p>\n<p><a href=\"http://book.sbkk8.com/lishigushi/zhuchangluo/150447.html#:~:text=%E6%9C%B1%E5%B8%B8%E6%B4%9B%E5%AF%B9%E4%BA%8E%E5%A4%A7%E6%98%8E%E7%8E%8B%E6%9C%9D%E7%9A%84,%E6%9C%80%E7%BB%88%E6%AD%BB%E4%BA%8E%E7%BA%A2%E4%B8%B8%E3%80%82\" target=\"_blank\" rel=\"noopener\">死因</a>莫衷一是，三百余年来，史学家设想了种种答案，但没有一种令人信服</p>\n<h1>德陵「明熹宗」</h1>\n<p>光宗即位仅一月便驾崩，使朱由校匆匆登基为帝，朱由校当时年仅十四岁，未曾被立为太子，甚至未接受过正规教育，政事皆赖宦官辅佐，后来造就太监魏忠贤等人的干政，与阉党、东林党之党争。</p>\n<h1><a href=\"https://www.sohu.com/a/415553314_120514979\" target=\"_blank\" rel=\"noopener\">思陵</a></h1>\n<p>明朝最后一位皇帝：崇祯之墓。<br>\n崇祯上位之时，明朝已经是风雨飘摇，内忧外患。<br>\n崇祯十五年时，心爱的田贵妃去世，然而此时却是大明王朝最为危难的时刻，这一年明清之间规模最大的一场决战：松锦之战。<br>\n在东北：九边精锐损失殆尽，一众大将带领投降。<br>\n在中原：李自成和张献忠不断攻破城池。</p>\n<p>明朝节节败退，大片地区沦陷。</p>\n<p>即便这样的情形，崇祯出于对贵妃的思念还是决定在天平寿山修建陵寝。</p>\n<p>万万没想到的事，时隔两年，这座陵寝却成为崇祯自己的安葬之所。崇祯十七年，李自成攻破北京。李自成入宫后并没有找到崇祯本人,便在北京城内发下搜寻令：</p>\n<blockquote>\n<p>献帝者，赏万金，封伯爵；匿者，灭族</p>\n</blockquote>\n<p>第二天，在景山自缢的崇祯被找到，于是李自成下令，在东华门侧简单收殓了崇祯遗体，并搭建了临时性的灵棚。</p>\n<p>明朝官员生怕受崇祯牵连。谁也不敢前往吊唁，唯有襄城伯「李国桢」一人前往，跪在梓宫前踉跄大哭。</p>\n<p>李自成非常钦佩李国桢的勇气和忠心，于是对其进行了耐心的劝降，希望他能够为自己效力，而李国桢也随即开出了自己的三个“条件”：</p>\n<ul>\n<li>\n<p>其一，对于明朝的皇陵，不仅不能破坏，还要予以防卫和保护；</p>\n</li>\n<li>\n<p>其二，不能损毁崇祯的遗体，并且还要按照帝王规格礼仪进行妥善的安葬；</p>\n</li>\n<li>\n<p>其三，李自成不能加害已经被他俘获的崇祯太子朱慈烺，以及另外两位皇子朱慈炯和朱慈炤，而是要进行善待。</p>\n</li>\n</ul>\n<p>对于上述三点要求，李自成予以了照准，并着手准备崇祯皇帝的安葬工作，而由于此前崇祯并没有为自己修建陵寝，李自成随即决定将崇祯葬入田贵妃墓之中。</p>\n<h2 id=\"思陵现状\">思陵现状</h2>\n<p>思陵屡逢劫难，残毁十分严重。地下墓室曾先后两次被当地土匪盗发。1947年，国民党军队为修炮楼，又大规模地拆毁陵园地面建筑。上世纪90年代，十三陵特区曾对明思陵进行过简单的修缮。 思陵并未对外开放，门口的镇宅神兽的头已经不见了，神兽亦被时光磨平了棱角。</p>\n","categories":["生活随感"],"tags":[]},{"title":"各类路由的优缺点","url":"http://jocolorful.com/2019/07/21/前端-各类路由的优缺点/","content":"<h1>路由</h1>\n<ul>\n<li>路由是根据不同的 url 地址展示不同的内容或页面</li>\n<li>前端路由就是把不同路由对应不同的内容或页面的任务交给前端来做，之前是通过服务端根据 url 的不同返回不同的页面实现的。</li>\n</ul>\n<h1>Hash路由</h1>\n<p>hash 也 称作 锚点，本身是用来做页面定位的，她可以使对应 id 的元素显示在可视区域内。<br>\nhash 路由一个明显的标志是带有 #,我们主要是通过监听 url 中的 hash 变化来进行路由跳转。</p>\n<p>hash的优势就是兼容性更好,在老版IE中都有运行,问题在于url中一直存在#不够美观,而且hash路由更像是Hack而非标准,相信随着发展更加标准化的History API会逐步蚕食掉hash路由的市场。</p>\n<h1>History</h1>\n<ul>\n<li>window.history.back();       // 后退</li>\n<li>window.history.forward();    // 前进</li>\n<li>window.history.go(-3);       // 后退三个页面</li>\n</ul>\n","categories":["前端相关"],"tags":["路由"]},{"title":"Nginx","url":"http://jocolorful.com/2019/05/09/Nginx/","content":"<h2 id=\"重载配置文件\">重载配置文件</h2>\n<p>./nginx -s reload</p>\n<h2 id=\"日志切割\">日志切割</h2>\n<p>备份当前日志</p>\n<p>./nginx -s  reopen</p>\n<p>每周执行一次，写在脚本当中</p>\n<p>crontab</p>\n<p>gzip on<br>\ngzip_comp_level 2  压缩级别<br>\n压缩消耗GPU</p>\n<p>autoindex_moduls</p>\n<p>autoindex_on //  文件夹</p>\n<p>set limite-rate 控制流量 以秒为单位</p>\n<p>access.log</p>\n<h2 id=\"缓存\">缓存</h2>\n","categories":[],"tags":[]},{"title":"离线存储","url":"http://jocolorful.com/2019/04/19/前端-离线存储/","content":"<h1>离线存储</h1>\n<h2 id=\"什么是Cache-Manifest\">什么是Cache Manifest</h2>\n<p>浏览器会首先检查manifest文件是否有变动，如果有变动就会把相应的变得跟新下来，同时改变浏览器里面的app cache，如果没有变动，就会直接把app cache的资源返回，基本流程是这样的。</p>\n<h2 id=\"Manifest的特点\">Manifest的特点</h2>\n<ul>\n<li>离线浏览: 用户可以在离线状态下浏览网站内容。</li>\n<li>更快的速度: 因为数据被存储在本地，所以速度会更快.</li>\n<li>减轻服务器的负载: 浏览器只会下载在服务器上发生改变的资源。</li>\n</ul>\n<h2 id=\"Manifest文件\">Manifest文件</h2>\n<h3 id=\"CACHE-（必须）\">CACHE:（必须）</h3>\n<p>FALLBACK:（可选）</p>\n<p>如何更新缓存</p>\n<ul>\n<li>更新manifest文件</li>\n<li>通过javascript操作</li>\n<li>清除浏览器缓存</li>\n</ul>\n<h1>注意事项</h1>\n<ul>\n<li>浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。</li>\n<li>如果manifest文件，或者内部列举的某一个文件不能正常下载，整个更新过程都将失败，浏览器继续全部使用老的缓存。</li>\n<li>引用manifest的html必须与manifest文件同源，在同一个域下。</li>\n<li>FALLBACK中的资源必须和manifest文件同源。</li>\n<li>当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。</li>\n<li>站点中的其他页面即使没有设置manifest属性，请求的资源如果在缓存中也从缓存中访问。<br>\n当manifest文件发生改变时，资源请求本身也会触发更新。</li>\n</ul>\n","categories":["前端相关"],"tags":[]},{"title":"前端安全","url":"http://jocolorful.com/2019/03/29/前端-安全篇/","content":"<h1>安全问题</h1>\n<h2 id=\"xss跨站脚本攻击-Cascading-Style-Sheets-CSS\">xss跨站脚本攻击(Cascading Style Sheets, CSS)</h2>\n<ol>\n<li>原理： 通过篡改网页，插入恶意脚本。从用户浏览网页时开始，控制用户浏览器。XSS成功的条件：向页面注入恶意的HTML 代码；这些恶意代码能够执行。</li>\n<li>类型：\n<ol>\n<li>\n<p>反射型，诱导用户去访问一个包含恶意代码的UI了，这段恶意代码会直接在受害者主机上的浏览器执行。一次性的。前端发送恶意脚本，后端不做任何处理返回前端</p>\n<ul>\n<li>用户输入内容不包含特殊字符</li>\n<li>特殊字符转意 (小明转义URL的case，特殊字符转化为HTML实体)</li>\n<li>a 标签根据实际情况: 禁止掉：“javascript:” 、链接、非法 scheme 等</li>\n</ul>\n</li>\n<li>\n<p>存储型XSS：把攻击存放在服务端。发表了文章之类的，加入了代码。如果过滤不严格，就会存在服务器端。</p>\n</li>\n<li>\n<p>DOM-base型：DOM XSS 是由于浏览器解析机制导致的漏洞，服务器不参与，而存储型与反射型都需要服务器响应参与，反射型的一种。避免一些重定向的操作。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"HTTP劫持\">HTTP劫持</h2>\n<p>运营商HTTP劫持，当我们使用HTTP请求请求一个网站页面的时候，网络运营商会在正常的数据流中插入精心设计的网络数据报文，让客户端（通常是浏览器）展示“错误”的数据，通常是一些弹窗，宣传性广告或者直接显示某网站的内容，大家应该都有遇到过。</p>\n<h2 id=\"DNS劫持\">DNS劫持</h2>\n<p>重定向</p>\n<h2 id=\"CSRF-跨站请求伪造\">CSRF(跨站请求伪造)</h2>\n<p>维基百科举的例子：银行转账image表现<br>\nrefer头部<br>\n增加token校验</p>\n","categories":["前端相关"],"tags":[]},{"title":"Http2与Http3的不完全指北","url":"http://jocolorful.com/2019/03/18/Http2与Http3的不完全指北/","content":"","categories":[],"tags":[]},{"title":"前端-html","url":"http://jocolorful.com/2019/02/08/前端-html/","content":"<p>#HTML</p>\n<ul>\n<li>\n<p>Doctype作用？标准模式与兼容模式各有什么区别?</p>\n<ul>\n<li>\n<!DOCTYPE>声明位于HTML文档中的第一行，处于 <html>标签之前。告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。\n</li>\n<li>\n<p>标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示，模拟老式浏览器的行为以防止站点无法工作。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>渐进增强、优雅降级</p>\n<ul>\n<li>渐进增强：一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。</li>\n<li>优雅降级：一开始就构建站点的完整功能，然后针对浏览器测试和修复。</li>\n</ul>\n</li>\n<li>\n<p>HTML5 为什么只需要写 <!DOCTYPE HTML>？</p>\n<ul>\n<li>HTML5 不基于 SGML（标准通用标记语言），因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）；</li>\n<li>HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。</li>\n</ul>\n</li>\n<li>\n<p>行内元素、块级元素</p>\n<ul>\n<li>行内元素会在一条直线上排列（默认宽度只与内容有关），都是同一行的，水平方向排列。</li>\n<li>块级元素各占据一行（默认宽度是它本身父容器的100%（和父元素的宽度一致），与内容无关），垂直方向排列。块级元素从新行开始，结束接着一个断行。</li>\n<li>块级元素可以包含行内元素和块级元素。行内元素不能包含块级元素，只能包含文本或者其它行内元素。</li>\n<li>行内元素与块级元素属性的不同，主要是盒模型属性上：行内元素设置width无效，height无效(可以设置line-height)，margin上下无效，padding上下无效</li>\n</ul>\n</li>\n<li>\n<p>页面导入样式时，使用link和@import有什么区别？</p>\n<ul>\n<li>link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;</li>\n<li>页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;</li>\n<li>import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;</li>\n<li>link支持使用js控制DOM去改变样式，而@import不支持;</li>\n</ul>\n</li>\n<li>\n<p>对浏览器内核的理解</p>\n<ul>\n<li>\n<p>渲染引擎(layout engineer或Rendering Engine)和JS引擎。</p>\n</li>\n<li>\n<p>渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。</p>\n</li>\n<li>\n<p>JS引擎则：解析和执行javascript来实现网页的动态效果。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>iframe有那些缺点？</p>\n<ul>\n<li>iframe会阻塞主页面的 Onload 事件</li>\n<li>搜索引擎的检索程序无法解读这种页面，不利于SEO</li>\n<li>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载</li>\n<li>使用iframe之前需要考虑这两个缺。如果需要使用iframe，最好是通过javascript动态给iframe添加src属性值，这样可以绕开以上两个问题。</li>\n</ul>\n</li>\n</ul>\n","categories":[],"tags":[]},{"title":"事件循环","url":"http://jocolorful.com/2019/01/30/前端-Node/","content":"<blockquote>\n<p>Event Loop</p>\n</blockquote>\n<h1>Event Loop</h1>\n<h2 id=\"为什么是单线程\">为什么是单线程</h2>\n<h2 id=\"Why\">Why</h2>\n<p>解决单线程的一些问题</p>\n<h2 id=\"任务\">任务</h2>\n<p>单线程意味着，所有的任务都需要排队</p>\n<ul>\n<li>\n<p>同步任务</p>\n</li>\n<li>\n<p>异步任务,进入任务队列</p>\n<ul>\n<li>所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</li>\n<li>主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。</li>\n<li>一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</li>\n<li>主线程不断重复上面的第三步。</li>\n</ul>\n<p>只要主线程空了，就会去读取&quot;任务队列&quot;，这就是JavaScript的运行机制。这个过程会不断重复。</p>\n</li>\n</ul>\n<h2 id=\"事件和回调函数\">事件和回调函数</h2>\n<ul>\n<li>所谓&quot;回调函数&quot;（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。</li>\n</ul>\n<h2 id=\"Event-Loop\">Event Loop</h2>\n<p>主线程从&quot;任务队列&quot;中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。</p>\n<h2 id=\"Node-js\">Node.js</h2>\n<ul>\n<li>process.nextTick和setImmediate。\n<ul>\n<li>process.nextTick: 指定的任务总是发生在所有异步任务之前</li>\n<li>setImmediate方法则是在当前&quot;任务队列&quot;的尾部添加事件-&gt;</li>\n</ul>\n</li>\n</ul>\n<p>简言之就是JS只有一个主线程，主线程执行完执行栈的任务后去检查异步的任务队列，如果异步事件触发，则将其加到主线程的执行栈。</p>\n","categories":["前端相关"],"tags":[]},{"title":"iFrame","url":"http://jocolorful.com/2019/01/30/前端-iframe/","content":"<h1>确定</h1>\n<ul>\n<li>\n<p>iframe会阻塞主页面的Onload事件；</p>\n</li>\n<li>\n<p>搜索引擎的检索程序无法解读这种页面，不利于SEO;</p>\n</li>\n<li>\n<p>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</p>\n</li>\n</ul>\n<p>使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过 javascript<br>\n动态给iframe添加src属性值，这样可以绕开以上两个问题。</p>\n","categories":["前端相关"],"tags":[]},{"title":"令人迷茫的 CSS 单位","url":"http://jocolorful.com/2019/01/29/CSS-令人迷茫的px/","content":"<h1>物理像素（DP Device Pixels）</h1>\n<p>例如 iPhone5 的分辨率是 640 x 1136px，代表屏幕由 640行 * 1136列像素点组成。</p>\n<h1>CSS 像素 (逻辑像素)</h1>\n<p>桌面浏览器的 100% 缩放情况下，CSS 的 1 个像素往往都是对应着电脑屏幕的 1 个物理像素，会让你误以为 CSS 里的 1px 就是实际屏幕像素。</p>\n<p>小结：用户的缩放比会影响单位CSS像素点对应的实际物理像素的多少。看到这里就应该知道，<font color=\"red\">CSS 像素只是一个相对单位，与物理像素并不总是等价的。</font>CSS 中的 1px 并不是总代表设备像素上的 1px，尤其是在移动设备上。</p>\n<h1>像素密度(PPI，Pixels Per Inch)</h1>\n<p><img src=\"https://math.now.sh?inline=%5Csqrt%7BX%E5%B9%B3%E6%96%B9%2BY%E5%B9%B3%E6%96%B9%7D\" style=\"display:inline-block;margin: 0;\"/> / 尺寸</p>\n<h1>逻辑像素(dp，pt)</h1>\n<p>为了抹去高密度分辨率屏幕(高清屏)所带来的适配问题，iOS 与 Android 两个平台分别提出了 pt（point）与 dp(device-independent pixel 两个单位。他们的名称不一样但是意义是一样的。</p>\n<p>以 iPhone 为例：例如将 4/4s 的逻辑像素设定为 320 x 480pt（实际像素:640x960px），以物理屏幕左上角为原点，横向 X轴 320pt，纵向 Y轴 480pt。<font color=\"red\">所以 PPI 越高，1pt 的所覆盖的物理像素就越多。</font></p>\n<h1>设备像素比（DPR，Device Pixel Ratio）</h1>\n<blockquote>\n<p>设备像素比 ＝ 物理像素 / 设备独立像素</p>\n</blockquote>\n<p>window.devicePixelRatio</p>\n<p>iPhone6 的设备宽度和高度为 375pt * 667pt，可以理解为设备的独立像素；<br>\n而其 dpr为2，根据上面公式，我们可以很轻松得知其物理像素为750pt * 1334pt。</p>\n<p>之前我们已经介绍了物理像素与逻辑像素的概念，就可以很容易推导出设备像素比的公式了<br>\nDRP = 物理像素/dp或pt</p>\n<p>1倍：1pt=1dp=1px（iPhone 3GS）<br>\n2倍：1pt=1dp=2px（iPhone 4s/5/6）<br>\n3倍：1pt=1dp=3px（iPhone 6 plus）</p>\n<p><a href=\"https://github.com/jawil/blog/issues/21\" target=\"_blank\" rel=\"noopener\">https://github.com/jawil/blog/issues/21</a></p>\n","categories":["漂亮的 CSS"],"tags":[]},{"title":"CSS 加载会造成阻塞吗？","url":"http://jocolorful.com/2019/01/29/CSS-BFC/","content":"<h1>BFC 概念</h1>\n<p>它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其<font  color=\"red\">子元素</font>将如何定位，以及<font  color=\"red\">和其他元素</font>的关系和相互作用。</p>\n<p>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。</p>\n<p>通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p>\n<h1>触发 BFC</h1>\n<p>只要元素满足下面任一条件即可触发 BFC 特性：</p>\n<ul>\n<li>body 根元素</li>\n<li>浮动元素：float 除 none 以外的值</li>\n<li>绝对定位元素：position (absolute、fixed)</li>\n<li>display 为 inline-block、table-cells、flex</li>\n<li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li>\n</ul>\n<h1>BFC 特性及应用</h1>\n<ul>\n<li><font  color=\"red\">同一个 BFC </font>下外边距会发生折叠</li>\n<li>BFC 可以包含浮动的元素（清除浮动）overflow: hidden</li>\n<li>BFC 可以阻止元素被浮动元素覆盖</li>\n</ul>\n","categories":["漂亮的 CSS"],"tags":[]},{"title":"Web 的存储","url":"http://jocolorful.com/2019/01/29/前端-Web存储/","content":"<h1>客户端Cookie</h1>\n<h2 id=\"优点\">优点</h2>\n<ol>\n<li>通过良好的编程，控制保存在cookie中的session对象的大小。</li>\n<li>通过加密和安全传输技术（SSL），减少cookie被破解的可能性。</li>\n<li>只在cookie中存放不敏感数据，即使被盗也不会有重大损失。</li>\n<li>控制cookie的生命期，使之不会永远有效。偷盗者很可能拿到一个过期的cookie。</li>\n</ol>\n<h2 id=\"确定\">确定</h2>\n<ol>\n<li><code>Cookie</code>数量和长度的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉。</li>\n<li>安全性问题：如果cookie被人拦截 ,他只要原样转发cookie就可以达到目的了。邮箱</li>\n<li>隐私问题：隐私浏览模式，浏览器关闭之后，期间所有的 cookie 都消失。</li>\n<li></li>\n</ol>\n<h1>服务器端 Session</h1>\n<p>与盗取用户名、密码登陆用户帐户的方式有所不同，Session劫持是一种通过窃取用户的SessionID，使用该SessionID登录目标账户的攻击方法。此时攻击者实际上是使用了目标账户的有效Session。如果SessionID是保存在Cookie中的，则这种攻击可以成为Cookie劫持。</p>\n<h1>Webstorage</h1>\n<p>不与服务器又交互</p>\n<p>localStorage</p>\n<p>sessionStorage</p>\n","categories":["前端相关"],"tags":["混合开发"]},{"title":"JS 的内存管理","url":"http://jocolorful.com/2019/01/29/前端-内存/","content":"<h1>垃圾回收机制</h1>\n<p>JS内存空间分为栈(stack)、堆(heap)、池(一般也会归类为栈中)。 其中栈存放变量，堆存放复杂对象，池存放常量。</p>\n<h2 id=\"存储位置不同\">存储位置不同</h2>\n<ul>\n<li>\n<p>原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</p>\n</li>\n<li>\n<p>引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；<font color=\"red\">引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体</font></p>\n</li>\n</ul>\n<p>不管是任何的程序语言<br>\n内存生命周期</p>\n<ol>\n<li>分配你所需要的内存</li>\n<li>使用分配到的内存（读、写）</li>\n<li>不需要时将其释放\\归还</li>\n</ol>\n<h1>JS的内存分配</h1>\n<ol>\n<li>值的初始化</li>\n<li>通过函数调用分配内存</li>\n</ol>\n<h1>当内存不再需要使用时释放</h1>\n<p>高级语言设置了垃圾回收器，追踪内存的实用</p>\n<h2 id=\"标记清除\">标记清除</h2>\n<p>垃圾收集器在运行时会给存储在内存中的所有变量都加上一个标记,然后检查哪些变量还在环境中使用,将去掉这些变量的标记,检查哪些变量被环境中的变量说引用,也去掉这些变量的标记,最后剩下的这些带有标记的变量将会是”准备被清理的变量”</p>\n<h2 id=\"引用计数\">引用计数</h2>\n<p>这是一种不太常用的垃圾回收机制,声明一个变量时,并将一个引用类型的值A赋给该变量,这时引用计数的次数会加一.而如果变量又指向了另外一个引用类型的值B时,这时A其实已经没有变量来引用,A的引用次数会减一.</p>\n<ol>\n<li>如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收</li>\n</ol>\n<p>限制：循环引用</p>\n","categories":["前端相关"],"tags":[]},{"title":"跨域处理","url":"http://jocolorful.com/2019/01/29/前端-跨域篇/","content":"<p>#同源策略</p>\n<p>但是浏览器处于对安全方面的考虑，不允许跨域调用其他域下的东西。</p>\n<p>当协议，域名，端口相同的时候才算是同一个域名，否则均认为需要做跨域的处理。</p>\n<p>#方法</p>\n<p>Jsonp, json with padding</p>\n<h2 id=\"优点：\">优点：</h2>\n<ul>\n<li>它支持 GET 请求而不支持 POST 等其它类行的 HTTP 请求。</li>\n</ul>\n<h2 id=\"CORS：\">CORS：</h2>\n<h3 id=\"两种请求\">两种请求</h3>\n<p>简单请求(simple request)</p>\n<p>非简单请求（not-so-simple request）</p>\n<p>后端设置：Access-Control-Allow-Origin</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) 请求方法是以下三种方法之一：</span><br><span class=\"line\">HEAD</span><br><span class=\"line\">GET</span><br><span class=\"line\">POST</span><br><span class=\"line\"></span><br><span class=\"line\">2）HTTP的头信息不超出以下几种字段：</span><br><span class=\"line\">Accept</span><br><span class=\"line\">Accept-Language</span><br><span class=\"line\">Content-Language</span><br><span class=\"line\">Last-Event-ID</span><br><span class=\"line\">Content-Type：只限于三个值application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</span><br></pre></td></tr></table></figure>\n<h2 id=\"简单请求\">简单请求</h2>\n<ol>\n<li>\n<p>浏览器发现是跨域的话，会自动加上origin 字段</p>\n</li>\n<li>\n<p>如果Origin指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。然后浏览器发现，浏览器发现，这个回应的头信息没有包含Access-Control-Allow-Origin字段（详见下文），就知道出错了，从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。</p>\n</li>\n<li>\n<p>如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http:&#x2F;&#x2F;api.bob.com</span><br><span class=\"line\">Access-Control-Allow-Credentials: true &#x2F;&#x2F; 服务器明确许可，可以发送cookie</span><br><span class=\"line\">Access-Control-Expose-Headers: FooBar</span><br><span class=\"line\">Content-Type: text&#x2F;html; charset&#x3D;utf-8</span><br></pre></td></tr></table></figure>\n<p>Credentials：</p>\n<p>3.2 withCredentials 属性<br>\n开发者必须要使这个字段为true才可以。<br>\nxhr.withCredentials = true;</p>\n<p>需要注意的是，如果要发送Cookie，Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。</p>\n<h2 id=\"非简单请求\">非简单请求</h2>\n<p>方法：PUT或DELETE<br>\nContent-Type字段的类型是application/json</p>\n<p>加一次HTTP查询请求，称为&quot;预检&quot;请求（preflight）。浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。</p>\n<p>&quot;预检&quot;请求用的请求方法是OPTIONS，表示这个请求是用来询问的。头信息里面，关键字段是Origin，表示请求来自哪个源。</p>\n<p>除了Origin字段，&quot;预检&quot;请求的头信息包括两个特殊字段。</p>\n<pre><code>Access-Control-Request-Method\nAccess-Control-Request-Headers\n</code></pre>\n<p>Access-Control-Allow-Origin字段，表示http://api.bob.com可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。</p>\n<p>Access-Control-Max-Age</p>\n","categories":["前端相关"],"tags":[]},{"title":"HTTPS 使用与原理","url":"http://jocolorful.com/2019/01/29/前端Https/","content":"<h1>HTTPS</h1>\n<p>Http和TCP 之间多了一层(SSL/TLS)</p>\n<p>##对称加密</p>\n<p>将加密的内容 + 钥匙 都发送给对方</p>\n<p>（DES/AES<br>\n）</p>\n<h2 id=\"非对称加密\">非对称加密</h2>\n<p>(RSA、DSA)</p>\n<p>生成一对密钥 (k1, k2)。<br>\n凡是 k1 加密的数据，k1 自身不能解密，而需要 k2 才能解密；</p>\n<p>凡是 k2 加密的数据，k2 不能解密，需要 k1 才能解密。</p>\n<h2 id=\"散列加密\">散列加密</h2>\n<p>SHA-1、MD5 (128 bit)</p>\n<p>HTTPS把对称加密、非对称加密和CA结合起来以保证数据安全。如果想对对称加密和非对称加密以及SSL/TLS要更多了解可以参考下面两篇文章：</p>\n<h2 id=\"CA-证书\">CA 证书</h2>\n<p>解决公钥</p>\n<p>godaddy</p>\n<h1>HTTP</h1>\n<p>影响Http的因素主要有两个：</p>\n<ul>\n<li>带宽</li>\n<li>延迟\n<ul>\n<li>浏览器的阻塞，基于同一个域名，超过最大请求连接个数，请求会被阻塞。</li>\n<li>DNS的查询</li>\n<li>TCP的建立</li>\n</ul>\n</li>\n</ul>\n<h1>HTTP1.1</h1>\n<p>目前应用最广泛</p>\n<ul>\n<li>缓存</li>\n<li>带宽优化以及网络连接的使用，请求头引入range头域。它允许只请求资源的某个部分.即返回码是206（Partial Content）</li>\n<li>错误通知的管理</li>\n<li>长连接（PersistentConnection），Pipelining。一个TCP的连接，允许建立多个Http和请求和响应，减少了建立和关闭的消耗和延迟，默认开启Connection ：keep-alive。弥补Http1.0每次请求都要重新建立新连接的缺点。</li>\n</ul>\n<h2 id=\"HTTP1-0和1-1现存的一些问题\">HTTP1.0和1.1现存的一些问题</h2>\n<ul>\n<li>明文传输</li>\n<li>keep-alive使用过多会给服务器增加压力,单个文件不断被请求的服务，keep-alive可能会极大的影响性能，因为它在文件被请求之后还保持了不必要的连接很长时间。</li>\n<li>header内容过大，last-Modify</li>\n</ul>\n<h1>SPDY</h1>\n<ul>\n<li>降低延迟</li>\n</ul>\n<h1>HTTP2.0的新特性</h1>\n<ul>\n<li>二进制：HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。</li>\n<li>多路复用：二进制数据帧和流的概念，同样是因为有了序列，服务器就可以并行的传输数据，这就是流所做的事情。</li>\n<li>header压缩</li>\n<li>服务端推送</li>\n</ul>\n","categories":["协议相关"],"tags":[]},{"title":"混合开发-原理记录","url":"http://jocolorful.com/2019/01/27/前端-Hybrid/","content":"<h1>混合方案</h1>\n<ul>\n<li>WebView</li>\n<li>Native UI</li>\n<li>小程序方案</li>\n</ul>\n<p>以上的三种方案，其实同样都是基于 JSBridge 完成的通讯层，第二三种方案，其实可以看做是在方案一的基础上，继续通过不同的新技术进一步提高了应用的混合程度。因此，JSBridge 也是整个混合应用最关键的部分，例如我们在设置微信分享时用到的 JS-SDK，wx对象 便是我们最常见的 JSBridge:</p>\n<h1>Hybrid的通信原理</h1>\n<p>Hybrid App的本质，其实是在原生的 App 中，使用 WebView 作为容器直接承载 Web页面。因此，最核心的点就是 Native端 与 H5端 之间的双向通讯层，其实这里也可以理解为我们需要一套跨语言通讯方案，来完成 Native(Java/Objective-c/…) 与 JavaScript 的通讯。</p>\n<p>这个方案就是我们所说的 JSBridge，而实现的关键，便是作为容器的 WebView，一切的原理都是基于 WebView 的机制。</p>\n<h2 id=\"实现原理\">实现原理</h2>\n<p>在 WebView 中发出的网络请求，客户端都能进行监听和捕获</p>\n<h2 id=\"协议定制\">协议定制</h2>\n<ul>\n<li>不同的协议头代表着不同的含义，这样便能清楚知道每个协议的适用范围。</li>\n</ul>\n<h2 id=\"协议的拦截\">协议的拦截</h2>\n<h2 id=\"协议回调\">协议回调</h2>\n<h2 id=\"参数传递方式\">参数传递方式</h2>\n","categories":["前端相关"],"tags":[]},{"title":"RN - 性能优化手段","url":"http://jocolorful.com/2019/01/22/前端-RN的性能瓶颈/","content":"<h1>基础优化</h1>\n<ol>\n<li>比较吃性能的、耗时的操作可以放到componentDidMount中，然后再用 Interaction manager 在包裹一下，比如网络请求。</li>\n<li>无状态组件不会被实例化</li>\n<li>对于同层级的相同类型的组件，要给每个组件指定唯一的key值</li>\n<li>用 FlatList 替换 scrollView，因为在用 scrollView 的时候它会一下子把他上面的所有子组件都渲染出来，而 FlatList 可以设置首屏渲染的行数，这样就不会导致在刚进入这一页的时候出现卡顿现象。</li>\n</ol>\n<h1></h1>\n<p>本地分包： 把bundle拆分成公共基础bundle和业务bundle</p>\n<p>预加载： 预加载公共基础bundle</p>\n<p>缓存一部分数据</p>\n<p>预加载</p>\n<p>处理JS Bundle包大小、文件压缩、缓存</p>\n","categories":["前端相关"],"tags":["混合开发"]},{"title":"用React Hooks 搭一个 TodoList","url":"http://jocolorful.com/2019/01/22/前端-ReactHooks/","content":"<h1>用React Hooks 搭一个 TodoList</h1>\n<p>作为一个爱折腾的前端，今天讲点新东西: React Hooks</p>\n<h2 id=\"什么是Hooks\">什么是Hooks?</h2>\n<p>Hooks简单来说就是一系列的函数。你可以不用ES6的 classes component的语法；在function component(纯函数)同样可以获取到同样可以获取到React的一些特性，比如state和生命周期，excited？所以呢，我们不叫这些组件叫<code>无状态组件</code>了，<code>函数组件</code>is preferable～</p>\n<h3 id=\"Hooks类型\">Hooks类型</h3>\n<ul>\n<li>State hooks</li>\n<li>Effect hooks</li>\n<li>Custom hooks</li>\n</ul>\n<h3 id=\"讲讲优势\">讲讲优势</h3>\n<ul>\n<li>隔离了有状态的业务逻辑，更利于测试</li>\n<li>不用 render props或者通过 Hoc(higher-order components) 包装，也可以共享有状态的业务逻辑</li>\n<li>函数组件没有生命周期</li>\n<li>避免了ES6 的classes语法，jsx的class很诡异，并不是真正意义上的<code>类</code>。</li>\n</ul>\n<p>更多细节请参考：<a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"noopener\">Hooks简介</a></p>\n<h3 id=\"在prod环境暂不要使用\">在prod环境暂不要使用</h3>\n<p>Hooks还在 alpha 阶段，他们的API 随时都有可能变。在稳定之前，你可以跑跑Demo，边缘项目玩一玩~</p>\n<h2 id=\"来-Build-一个-Todo-List\">来 Build 一个 Todo List</h2>\n<p>我们只要做一下事情就好了</p>\n<ul>\n<li>展示你的Todos</li>\n<li>新增一个Todo</li>\n<li>删除一个Todo</li>\n</ul>\n<p>ease?</p>\n<h3 id=\"Setup\">Setup</h3>\n<ol>\n<li>使用<code>create-react-app</code>初始化项目</li>\n</ol>\n<blockquote>\n<p>create-react-app todo-hooks</p>\n</blockquote>\n<ol start=\"2\">\n<li>\n<p>升级package.json的react和react-domd，这里使用了antd,让我们的TodoUI更加好看。Antd的具体配置请移步<a href=\"https://ant.design/docs/react/use-with-create-react-app-cn\" target=\"_blank\" rel=\"noopener\">antd文档</a></p>\n<p>package.json:</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">  \t<span class=\"string\">\"antd\"</span>: <span class=\"string\">\"^3.12.4\"</span>,</span><br><span class=\"line\">   <span class=\"string\">\"react\"</span>: <span class=\"string\">\"16.7.0-alpha.0 - next\"</span>,</span><br><span class=\"line\">   <span class=\"string\">\"react-dom\"</span>: <span class=\"string\">\"16.7.0-alpha.0 - next\"</span>,</span><br><span class=\"line\">   <span class=\"string\">\"react-scripts\"</span>: <span class=\"string\">\"2.1.3\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"写一个TodoForm的组件\">写一个TodoForm的组件</h3>\n<p>之前就说过，Hooks就是一个函数。来，开始我们的第一个Hooks：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Form, Button, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> TodoForm = <span class=\"function\">(<span class=\"params\">&#123; saveTodo &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Form layout=<span class=\"string\">\"inline\"</span>&gt;</span><br><span class=\"line\">      &lt;Form.Item&gt;</span><br><span class=\"line\">        &lt;Input  style=&#123;&#123; <span class=\"attr\">width</span>: <span class=\"number\">300</span> &#125;&#125; placeholder=<span class=\"string\">\"Add todo\"</span>/&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Button type=\"primary\" htmlType=\"submit\" &gt;Add&lt;/</span>Button&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Form&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> TodoForm;</span><br></pre></td></tr></table></figure>\n<p>这看起来和<code>无状态</code>的组件没什么两样，接下来为这个 Hooks 添砖加瓦:</p>\n<h3 id=\"useState\">useState</h3>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> [value, setValue] = useState(<span class=\"string\">''</span>);</span><br></pre></td></tr></table></figure>\n<p>useState是一个函数，它可以返回state的初始状态并且返回一个数组。数组的第一项返回了当前的state值，第二项是正在更新的函数。用ES6的解构复制为它们命名: value,和setValue。</p>\n<h3 id=\"在-Forms-中使用useState\">在 Forms 中使用useState</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Form, Button, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> TodoForm = <span class=\"function\">(<span class=\"params\">&#123; saveTodo &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value, setValue] = useState(<span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Form</span><br><span class=\"line\">      layout=<span class=\"string\">\"inline\"</span></span><br><span class=\"line\">      onSubmit=&#123;event =&gt; &#123;</span><br><span class=\"line\">        event.preventDefault();</span><br><span class=\"line\">        saveTodo(value);</span><br><span class=\"line\">    &#125;&#125;&gt;</span><br><span class=\"line\">      &lt;Form.Item&gt;</span><br><span class=\"line\">        &lt;Input</span><br><span class=\"line\">          style=&#123;&#123; <span class=\"attr\">width</span>: <span class=\"number\">300</span> &#125;&#125;</span><br><span class=\"line\">          placeholder=<span class=\"string\">\"Add todo\"</span></span><br><span class=\"line\">          onChange=&#123;event =&gt; &#123;</span><br><span class=\"line\">            setValue(event.target.value);</span><br><span class=\"line\">          &#125;&#125;</span><br><span class=\"line\">          value=&#123;value&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Button type=\"primary\" htmlType=\"submit\" &gt;Add&lt;/</span>Button&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Form&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> TodoForm;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在-Todos中-使用useState\">在 Todos中 使用useState</h3>\n<p>我们的 todos 也需要状态。在 index.js中 初始化 todo，最开始的状态应该是一个空数组：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./App.css'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoForm <span class=\"keyword\">from</span> <span class=\"string\">'./TodoFroms'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> App =<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [todos, setTodos] = useState([]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">      &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">        &lt;TodoForm /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n<h3 id=\"TodoList-组件\">TodoList 组件</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> TodoList = <span class=\"function\">(<span class=\"params\">&#123; todos, deleteTodo &#125;</span>) =&gt;</span> (</span><br><span class=\"line\">  &lt;div className=<span class=\"string\">\"ant-col-12 code-boxes-col-1-1\"</span>&gt;</span><br><span class=\"line\">    &lt;List</span><br><span class=\"line\">      bordered</span><br><span class=\"line\">      itemLayout=<span class=\"string\">\"horizontal\"</span></span><br><span class=\"line\">      dataSource=&#123;todos&#125;</span><br><span class=\"line\">      renderItem=&#123;(todo)=&gt; (</span><br><span class=\"line\">        &lt;List.Item&gt;</span><br><span class=\"line\">          &lt;div&gt;&#123;todo&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>List.Item&gt;)&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>Todo List接受两个props:</p>\n<ul>\n<li>todos:  用来展示todo的数组</li>\n<li>deleteTodo: 点击删除按钮可以触发这个函数，通过index 值来找到将要被删除的todo</li>\n</ul>\n<p>加入你的app</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;TodoForm /&gt;</span><br><span class=\"line\">&lt;TodoList todos=&#123;todos&#125;/&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"增加Todo\">增加Todo</h3>\n<p>在appjs文件中，为TodoForm 增加saveTodo的props</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;TodoForm saveTodo=&#123;value =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> todoText = value.trim();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (todoText) &#123;</span><br><span class=\"line\">\t\tsetTodos([...todos, todoText]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;/&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除Todo\">删除Todo</h3>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &#123;todo&#125;</span><br><span class=\"line\">    &lt;Button</span><br><span class=\"line\">      onClick=&#123;() =&gt; &#123;deleteTodo(index);&#125;&#125;</span><br><span class=\"line\">      icon=<span class=\"string\">\"delete\"</span> type=<span class=\"string\">\"primary\"</span>&gt;Delete</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n<p>在父组件注册</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;TodoList</span><br><span class=\"line\">  todos=&#123;todos&#125;</span><br><span class=\"line\">  deleteTodo=&#123;todoIndex =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newTodos = todos</span><br><span class=\"line\">      .filter(<span class=\"function\">(<span class=\"params\">_, index</span>) =&gt;</span> index !== todoIndex);</span><br><span class=\"line\">      setTodos(newTodos);</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<p>看起来和一般的组件也没什么两样?</p>\n<h3 id=\"Abstracting-Form-Input-useState\">Abstracting Form Input useState</h3>\n<p>开始改造我们的 form<br>\n新建一个useInputState.js 的文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> initialValue =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value, setValue] = useState(initialValue);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    value,</span><br><span class=\"line\">    onChange: <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">      setValue(event.target.value);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    reset: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> setValue(<span class=\"string\">''</span>)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>现在我们的<code>TodoForm.js</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Form, Button, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> useInputState <span class=\"keyword\">from</span> <span class=\"string\">'./useInputState'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> TodoForm = <span class=\"function\">(<span class=\"params\">&#123; saveTodo &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> &#123; value, onChange &#125; = useInputState(<span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Form</span><br><span class=\"line\">      layout=<span class=\"string\">\"inline\"</span></span><br><span class=\"line\">      onSubmit=&#123;event =&gt; &#123;</span><br><span class=\"line\">        event.preventDefault();</span><br><span class=\"line\">        saveTodo(value);</span><br><span class=\"line\">      &#125;&#125;&gt;</span><br><span class=\"line\">      &lt;Form.Item&gt;</span><br><span class=\"line\">        &lt;Input</span><br><span class=\"line\">          style=&#123;&#123; <span class=\"attr\">width</span>: <span class=\"number\">300</span> &#125;&#125;</span><br><span class=\"line\">          placeholder=<span class=\"string\">\"Add todo\"</span></span><br><span class=\"line\">          onChange=&#123;event =&gt; &#123;</span><br><span class=\"line\">            onChange(event.target.value);</span><br><span class=\"line\">          &#125;&#125;</span><br><span class=\"line\">          value=&#123;value&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Button type=\"primary\" htmlType=\"submit\" &gt;Add&lt;/</span>Button&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Form&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> TodoForm;</span><br></pre></td></tr></table></figure>\n<h2 id=\"other\">other</h2>\n<p>当然除了userState，Hooks还提供了<code>useEffect</code>、 <code>useContext </code>、 <code>useRef </code><br>\nEnjoy：）</p>\n","categories":["前端相关"],"tags":["React"]},{"title":"Javascript 整洁之道","url":"http://jocolorful.com/2017/08/22/前端-clean-code-javascript/","content":"<h1>Javascript整洁之道</h1>\n<h2 id=\"简介\">简介</h2>\n<h2 id=\"变量\">变量</h2>\n<ol>\n<li>\n<p>使用有意义的和声明式的变量名</p>\n<p>Bad:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const yyyymmdstr &#x3D; moment.format(&#39;YYYY&#x2F;MM&#x2F;DD&#39;);</span><br></pre></td></tr></table></figure>\n<p>Good:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const currentDate &#x3D; moment.format(&#39;YYYY&#x2F;MM&#x2F;DD&#39;);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>对同样的变量类型使用相同的词汇</p>\n<p>Bad:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getUserInfo();</span><br><span class=\"line\">getClientData();</span><br><span class=\"line\">getCustomerRecord();</span><br></pre></td></tr></table></figure>\n<p>Good:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getUser();</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用可检索的变量名。<br>\n我们读的代码多于写的代码。所以代码的课可读性和可检索性非常重要。使用无意义的变量命名会为我们理解程序带来一定的困难。请确保你的变量名可搜索。类似于<a href=\"https://github.com/danielstjules/buddy.js\" target=\"_blank\" rel=\"noopener\">buddy.js</a>和<a href=\"https://github.com/eslint/eslint/blob/660e0918933e6e7fede26bc675a0763a6b357c94/docs/rules/no-magic-numbers.md\" target=\"_blank\" rel=\"noopener\">ESLint</a>可以检查这些没有命名的常量</p>\n<p>Bad：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;864000000到底是什么意思</span><br><span class=\"line\">setTimeout(blastOff, 86400000);</span><br></pre></td></tr></table></figure>\n<p>Good：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;将它声明为常量</span><br><span class=\"line\">const MILLSECONDS_IN_A_DAY &#x3D; 86400000;</span><br><span class=\"line\">setTimeout(blastOff, MILLSECONDS_IN_A_DAY);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用解释性的变量</p>\n<p>Bad:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const address &#x3D; &#39;One Infinite Loop , Cupertino 95014&#39;;</span><br><span class=\"line\">const cityZipCodeRegex &#x3D; &#x2F;^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d&#123;5&#125;)?$&#x2F;;</span><br><span class=\"line\">saveCityZipCode(address.match(cityZipCodeRegex)[1], address.match(cityZipCodeRegex)[2]);</span><br></pre></td></tr></table></figure>\n<p>Good:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const address &#x3D; &#39;One Infinite Loop, Cupertino 95014&#39;;</span><br><span class=\"line\">const cityZipCodeRegex &#x3D; &#x2F;^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d&#123;5&#125;)?$&#x2F;;</span><br><span class=\"line\">&#x2F;&#x2F;利用数组的解构，返回的变量</span><br><span class=\"line\">const [, city, zipCode] &#x3D; address.match(cityZipCodeRegex) || [];</span><br><span class=\"line\">saveCityZipCode(city, zipCode);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>详诉好于概述</p>\n<p>Bad:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const locations &#x3D; [&#39;Austin&#39;, &#39;New York&#39;, &#39;San Francisco&#39;];</span><br><span class=\"line\">        locations.forEach((l) &#x3D;&gt; &#123;</span><br><span class=\"line\">        doStuff();</span><br><span class=\"line\">        doSomeOtherStuff();</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">        &#x2F;&#x2F; Wait, what is &#96;l&#96; for again?</span><br><span class=\"line\">        dispatch(l);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Good:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const locations &#x3D; [&#39;Austin&#39;, &#39;New York&#39;, &#39;San Francisco&#39;];</span><br><span class=\"line\">        locations.forEach((location) &#x3D;&gt; &#123;</span><br><span class=\"line\">        doStuff();</span><br><span class=\"line\">        doSomeOtherStuff();</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">        dispatch(location);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>不要增加不需要的上下文</p>\n<p>如果你的类或者对象告诉了你一些事，不在你的变量名中重复这些名字</p>\n<p>Bad:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Car &#x3D; &#123;</span><br><span class=\"line\">        carMake: &#39;Honda&#39;,</span><br><span class=\"line\">        carModel: &#39;Accord&#39;,</span><br><span class=\"line\">        carColor: &#39;Blue&#39;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function paintCar(car) &#123;</span><br><span class=\"line\">        car.carColor &#x3D; &#39;Red&#39;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Good:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Car &#x3D; &#123;</span><br><span class=\"line\">        make: &#39;Honda&#39;,</span><br><span class=\"line\">        model: &#39;Accord&#39;,</span><br><span class=\"line\">        color: &#39;Blue&#39;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function paintCar(car) &#123;</span><br><span class=\"line\">        car.color &#x3D; &#39;Red&#39;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用默认参数代替短路判读或者条件判断</p>\n<blockquote>\n<p>默认的参数总是比短路赋值活着条件语句更加简洁。注意，你使用他们的时候，你的函数将会为未定义的参数提供一个默认值。其他的错误的值，类似于‘’、”“、false、null、0、and NAN将不会被默认值取代</p>\n</blockquote>\n<p>Bad</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createMicrobrewery(name) &#123;</span><br><span class=\"line\">        const breweryName &#x3D; name || &#39;Hipster Brew Co.&#39;;</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Good:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createMicrobrewery(breweryName &#x3D; &#39;Hipster Brew Co.&#39;) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"函数\">函数</h2>\n<ol>\n<li>\n<p>函数参数:</p>\n<p>理想情况下：两个或者更少。减少函数的参数越来越重要了，因为它会让你测试你的函数变得简单。拥有超过三个的参数会导致你的函数的测试用例爆炸式地增加（这么强=.=）.</p>\n<p>一个或者两个参数是理想的情况，三个就应该避免。超过三个就应该整合一下。通常， 如果你有超过两个以上的参数，你的函数就会尝试着做很多的事。大多数情况下，一个高阶的对象作为一个参数就满足了。</p>\n<p>因为在js中，什么都是对象。没有类的样板。如果你需要一大串参数，你可以使用对象。</p>\n<p>为了使函数期望的类型更加明显，你可以使用ES2015/ES6的解构语法，它有几点好处：</p>\n<ul>\n<li>\n<p>当某人一旦看到这个函数声明，就会明白什么属性会被用到。</p>\n<p>//TODO --未测试–</p>\n</li>\n<li>\n<p>解构同样克隆参数对象的一些基本类型的值给函数，这个可以排除一些副作用。注意：对象和数组从函数参数对象中不会被克隆</p>\n</li>\n<li>\n<p>Linter也可以警告你什么属性没有被用到。哪个属性将不会被解构</p>\n</li>\n</ul>\n<p>Bad:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createMenu(title, body, buttonText, cancellable) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Good:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createMenu(&#123; title, body, buttonText, cancellable &#125;) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">createMenu(&#123;</span><br><span class=\"line\">        title: &#39;Foo&#39;,</span><br><span class=\"line\">        body: &#39;Bar&#39;,</span><br><span class=\"line\">        buttonText: &#39;Baz&#39;,</span><br><span class=\"line\">        cancellable: true</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>函数应该只做一件事</p>\n<p>这是软件工程最重要的事，当函数做的事超过了一件。它们会变得越来越难以维护、测试。当你的函数从只做一件事脱离出来，它们可以轻易地被重构，你的代码可读性也会变得很高。</p>\n<p>Bad:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function emailClients(clients) &#123;</span><br><span class=\"line\">        clients.forEach((client) &#x3D;&gt; &#123;</span><br><span class=\"line\">            const clientRecord &#x3D; database.lookup(client);</span><br><span class=\"line\">                if (clientRecord.isActive()) &#123;</span><br><span class=\"line\">                    email(client);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Good:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function emailActiveClients(clients) &#123;</span><br><span class=\"line\">        clients.filter(isActiveClient)</span><br><span class=\"line\">        .forEach(email);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function isActiveClient(client) &#123;</span><br><span class=\"line\">        const clientRecord &#x3D; database.lookup(client);</span><br><span class=\"line\">        return clientRecord.isActive();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>函数名应该告诉他们在做什么</p>\n<p>Bad:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function addToDate(date, month) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const date &#x3D; new Date();</span><br><span class=\"line\">    &#x2F;&#x2F; 难以从函数名分辨出什么被添加了</span><br><span class=\"line\">addToDate(date, 1);</span><br></pre></td></tr></table></figure>\n<p>Good:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function addMonthToDate(month, date) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const date &#x3D; new Date();</span><br><span class=\"line\">addMonthToDate(1, date);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>函数应该只有一个级别的抽象</p>\n<p>当你的函数有多个级别的抽象事，分割函数可以使代码可读和更容易测试。</p>\n<p>Bad:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function parseBetterJSAlternative(code) &#123;</span><br><span class=\"line\">        const REGEXES &#x3D; [&#x2F;&#x2F; ...];</span><br><span class=\"line\">        const statements &#x3D; code.split(&#39; &#39;);</span><br><span class=\"line\">        const tokens &#x3D; [];</span><br><span class=\"line\">        REGEXES.forEach((REGEX) &#x3D;&gt; &#123;</span><br><span class=\"line\">\t        statements.forEach((statement) &#x3D;&gt; &#123;&#x2F;&#x2F; ...&#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        const ast &#x3D; [];    </span><br><span class=\"line\">        tokens.forEach((token) &#x3D;&gt; &#123;&#x2F;&#x2F; lex...&#125;);</span><br><span class=\"line\">        ast.forEach((node) &#x3D;&gt; &#123;&#x2F;&#x2F; parse...&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Good:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function tokenize(code) &#123;</span><br><span class=\"line\">        const REGEXES &#x3D; [&#x2F;&#x2F; ...];</span><br><span class=\"line\">        const statements &#x3D; code.split(&#39; &#39;);</span><br><span class=\"line\">        const tokens &#x3D; [];</span><br><span class=\"line\">        REGEXES.forEach((REGEX) &#x3D;&gt; &#123;</span><br><span class=\"line\">            statements.forEach((statement) &#x3D;&gt; &#123; tokens.push( &#x2F;* ... *&#x2F; );&#125;);&#125;);</span><br><span class=\"line\">            return tokens;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        function lexer(tokens) &#123;</span><br><span class=\"line\">            const ast &#x3D; [];</span><br><span class=\"line\">            tokens.forEach((token) &#x3D;&gt; &#123; ast.push( &#x2F;* ... *&#x2F; );&#125;);    </span><br><span class=\"line\">            return ast;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function parseBetterJSAlternative(code) &#123;</span><br><span class=\"line\">        const tokens &#x3D; tokenize(code);</span><br><span class=\"line\">        const ast &#x3D; lexer(tokens);</span><br><span class=\"line\">        ast.forEach((node) &#x3D;&gt; &#123;&#x2F;&#x2F; parse...&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>去掉重复的代码</p>\n<p>尽量不要复制代码。复制的代码意味着当你修改一个逻辑时，需要更改多个逻辑。假设你经营着一家餐馆，你的库存有的番茄，洋葱，咖喱等等。当你的多张库存表单都有这些东西，当上了一道菜之后，所有的库存表单都需要更新。如果你只有一张表，你就只需要更新一张表。</p>\n<p>很多时候，你复制代码因为你有两个或多个不同细微的东西。他们分享了很多共同的东西，但是它们迫使你分离两个或者更多的函数，但是却做着同样的事情。删除一些重复的代码意味着创造出抽象的部分，只用函数/模块/类来解决一系列的问题。</p>\n<p>让抽象的部分做正确的工作是至关重要的。不要重复你自己，否则你会发现你自己你想改变一个地方的时候需要更新很多地方。</p>\n<p>Bad:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function showDeveloperList(developers&#123;developers.forEach((developer) &#x3D;&gt; &#123;</span><br><span class=\"line\">        const expectedSalary &#x3D; developer.calculateExpectedSalary();</span><br><span class=\"line\">        const experience &#x3D; developer.getExperience();</span><br><span class=\"line\">        const githubLink &#x3D; developer.getGithubLink();</span><br><span class=\"line\">        const data &#x3D; &#123;</span><br><span class=\"line\">            expectedSalary,</span><br><span class=\"line\">            experience,</span><br><span class=\"line\">            githubLink</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        render(data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function showManagerList(managers) &#123;</span><br><span class=\"line\">        managers.forEach((manager) &#x3D;&gt; &#123;</span><br><span class=\"line\">            const expectedSalary &#x3D; manager.calculateExpectedSalary();</span><br><span class=\"line\">            const experience &#x3D; manager.getExperience();</span><br><span class=\"line\">            const portfolio &#x3D; manager.getMBAProjects();</span><br><span class=\"line\">            const data &#x3D; &#123;</span><br><span class=\"line\">                expectedSalary,</span><br><span class=\"line\">                experience,</span><br><span class=\"line\">                portfolio</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            render(data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Good:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function showEmployeeList(employees) &#123;</span><br><span class=\"line\">        employees.forEach((employee) &#x3D;&gt; &#123;</span><br><span class=\"line\">            const expectedSalary &#x3D; employee.calculateExpectedSalary();</span><br><span class=\"line\">            const experience &#x3D; employee.getExperience();</span><br><span class=\"line\">            const data &#x3D; &#123;</span><br><span class=\"line\">                  expectedSalary,</span><br><span class=\"line\">                  experience</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        switch (employee.type) &#123;</span><br><span class=\"line\">            case &#39;manager&#39;:</span><br><span class=\"line\">                data.portfolio &#x3D; employee.getMBAProjects();</span><br><span class=\"line\">            break;</span><br><span class=\"line\">            case &#39;developer&#39;:</span><br><span class=\"line\">                data.githubLink &#x3D; employee.getGithubLink();</span><br><span class=\"line\">            break    ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        render(data);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>为Object.assign设置默认的对象</p>\n<p>Bad:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const menuConfig &#x3D; &#123;</span><br><span class=\"line\">        title: null,</span><br><span class=\"line\">        body: &#39;Bar&#39;,</span><br><span class=\"line\">        buttonText: null,</span><br><span class=\"line\">        cancellable: true</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function createMenu(config) &#123;</span><br><span class=\"line\">        config.title &#x3D; config.title || &#39;Foo&#39;;</span><br><span class=\"line\">        config.body &#x3D; config.body || &#39;Bar&#39;;</span><br><span class=\"line\">        config.buttonText &#x3D; config.buttonText || &#39;Baz&#39;;</span><br><span class=\"line\">        config.cancellable &#x3D; config.cancellable !&#x3D;&#x3D; undefined ? config.cancellable : true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">createMenu(menuConfig);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Good:</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const menuConfig &#x3D; &#123;</span><br><span class=\"line\">        title: &#39;Order&#39;,</span><br><span class=\"line\">        &#x2F;&#x2F; User did not include &#39;body&#39; key</span><br><span class=\"line\">        buttonText: &#39;Send&#39;,</span><br><span class=\"line\">        cancellable: true</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function createMenu(config) &#123;</span><br><span class=\"line\">        config &#x3D; Object.assign(&#123;</span><br><span class=\"line\">            title: &#39;Foo&#39;,</span><br><span class=\"line\">            body: &#39;Bar&#39;,</span><br><span class=\"line\">            buttonText: &#39;Baz&#39;,</span><br><span class=\"line\">            cancellable: true&#125;, config);</span><br><span class=\"line\">            &#x2F;&#x2F; config now equals: &#123;title: &quot;Order&quot;, body: &quot;Bar&quot;, buttonText: &quot;Send&quot;, cancellable: true&#125;</span><br><span class=\"line\">            &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">createMenu(menuConfig);</span><br></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"7\">\n<li>\n<p>不要将flag设置为函数的参数</p>\n<p>flag告诉了你的用户，这个函数做了不止一件事情，函数应该只做一件事。如果像下面的代码，路径决定于不同的布尔值，就将它们拆分出来。</p>\n<p>Bad:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createFile(name, temp) &#123;</span><br><span class=\"line\">        if (temp) &#123;</span><br><span class=\"line\">            fs.create(&#96;.&#x2F;temp&#x2F;$&#123;name&#125;&#96;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            fs.create(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Good:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createFile(name) &#123;</span><br><span class=\"line\">        fs.create(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function createTempFile(name) &#123;</span><br><span class=\"line\">        createFile(&#96;.&#x2F;temp&#x2F;$&#123;name&#125;&#96;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>避免副作用</p>\n<ul>\n<li>\n<p>一个函数接收了一个参数返回了其他的值或数组。这个副作用可能改变全局变量，或者奇怪地将你口袋里的钱给一个陌生人。</p>\n<p>现在，你确实需要将这些副作用写进你的代码。像之前的例子，你可能会写一个文件。你需要做的是将这些集中起来。不要将几个函数或类写一个特定的文件。一个来写的工作就够了，有且只有一个。</p>\n<p>这个主要的点是在于避免常见的陷阱，比如一些没有结构的对象共享一些状态，使用无数据类型可以被随意赋值，记住将这些副作用集中起来。</p>\n</li>\n</ul>\n<p>Bad:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 全局的变量将被下面的函数引用</span><br><span class=\"line\">&#x2F;&#x2F; 如果另外一个函数使用这个名字，现在它会变成一个数组</span><br><span class=\"line\">let name &#x3D; &#39;Ryan McDermott&#39;;</span><br><span class=\"line\">function splitIntoFirstAndLastName() &#123;</span><br><span class=\"line\">        name &#x3D; name.split(&#39; &#39;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">splitIntoFirstAndLastName();</span><br><span class=\"line\">console.log(name); &#x2F;&#x2F; [&#39;Ryan&#39;, &#39;McDermott&#39;];</span><br></pre></td></tr></table></figure>\n<p>Good:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function splitIntoFirstAndLastName(name) &#123;</span><br><span class=\"line\">        return name.split(&#39; &#39;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const name &#x3D; &#39;Ryan McDermott&#39;;</span><br><span class=\"line\">const newName &#x3D; splitIntoFirstAndLastName(name);</span><br><span class=\"line\">console.log(name); &#x2F;&#x2F; &#39;Ryan McDermott&#39;;</span><br><span class=\"line\">console.log(newName); &#x2F;&#x2F; [&#39;Ryan&#39;, &#39;McDermott&#39;];</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>\n<p>在JS中，基本类型的通过值传递。对象和数组通过引用传递。在这些对象和数组中，如果你改变购物车中的数组，通过购买一些商品，然后其他的函数可能使用被这些影响了的<code>cat</code> 数组。这可能很棒，但是考虑一下情况：</p>\n<ul>\n<li>\n<p>用户点击了购买的按钮, 按钮需要调用一个购买的函数。这个函数可能会发送一个网络请求，然后将购物车的数组发送给服务器。在网络极差的情况下，这个购买函数会不断地发送请求。现在在网络请求真正发送之前，用户突然点击<code>Add to Cart</code>的按钮。这个购买函数将会发送意外的数据，因为它有对这个购物车数组的引用。</p>\n</li>\n<li>\n<p>一个好的解决思路是<code>addItemToCart</code>函数总是克隆这个<code>cart</code>，编辑它，然后返回克隆。这个保证了没有其他函数保持对这个购物车保持引用，排除了一些意外的影响。</p>\n</li>\n</ul>\n<p>注意：</p>\n<ol>\n<li>\n<p>这里存在确实想要改变输入框对象的情况，但是当你适应了这种编程方式你会发现这种方式弥足珍贵。为了没有副作用大多数的代码可以被重构。</p>\n</li>\n<li>\n<p>介于克隆一个大的对象在性能表现上代价非常昂贵。幸运的是在实践中，这不是一个很大的问题。因为有大量的<a href=\"https://facebook.github.io/immutable-js/\" target=\"_blank\" rel=\"noopener\">库</a>允许这种编程方式又快又好。不需要你去手动克隆对象和数组。</p>\n</li>\n</ol>\n</li>\n</ul>\n<ol start=\"10\">\n<li>不要写全局的函数</li>\n</ol>\n<pre><code>污染全局是非常不好的实践，污染全局变量在JavaScript中是一个不好的做法，因为可能会与另一个库冲突，并且使用你的API用户在生产环境中遇到异常之前不会更明智。让我们来想一个例子：如果你想扩展JavaScript的原生的Array，让两个数组显示出不同的diff函数。你可以在Array.prototype上进行扩展，但是可能会与尝试执行相同操作的另一个库冲突。如果其他库只是使用diff来找到数组的第一个和最后一个元素之间的区别呢？这就是为什么只使用ES2015 / ES6类并且只是扩展Array全局更好。\n\nBad:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.prototype.diff &#x3D; function diff(comparisonArray) &#123;</span><br><span class=\"line\">        const hash &#x3D; new Set(comparisonArray);</span><br><span class=\"line\">        return this.filter(elem &#x3D;&gt; !hash.has(elem));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\nGood:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SuperArray extends Array &#123;</span><br><span class=\"line\">        diff(comparisonArray) &#123;</span><br><span class=\"line\">            const hash &#x3D; new Set(comparisonArray);</span><br><span class=\"line\">            return this.filter(elem &#x3D;&gt; !hash.has(elem));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"10\">\n<li>面向函数编程而不要急于编程</li>\n</ol>\n<pre><code>JavaScript不是像Haskell的函数式编程语言。但是它却有函数式的味道，函数式语言是比较容易干净和测试的。尽你的可能去尝试这种编程方式。\n\nBad:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const programmerOutput &#x3D; [&#123;</span><br><span class=\"line\">            name: &#39;Uncle Bobby&#39;,</span><br><span class=\"line\">    \t    linesOfCode: 500</span><br><span class=\"line\">  \t&#125;, &#123;</span><br><span class=\"line\">    \t    name: &#39;Suzie Q&#39;,</span><br><span class=\"line\">    \t    linesOfCode: 1500</span><br><span class=\"line\">  \t&#125;, &#123;</span><br><span class=\"line\">            name: &#39;Jimmy Gosling&#39;,</span><br><span class=\"line\">    \t    linesOfCode: 150</span><br><span class=\"line\">  \t&#125;, &#123;</span><br><span class=\"line\">    \t    name: &#39;Gracie Hopper&#39;,</span><br><span class=\"line\">    \t    linesOfCode: 1000</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">let totalOutput &#x3D; 0;</span><br><span class=\"line\">for (let i &#x3D; 0; i &lt; programmerOutput.length; i++) &#123;</span><br><span class=\"line\">        totalOutput +&#x3D; programmerOutput[i].linesOfCode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\nGood:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const programmerOutput &#x3D; [&#123;</span><br><span class=\"line\">            name: &#39;Uncle Bobby&#39;,</span><br><span class=\"line\">    \t    linesOfCode: 500</span><br><span class=\"line\">  \t&#125;, &#123;</span><br><span class=\"line\">    \t    name: &#39;Suzie Q&#39;,</span><br><span class=\"line\">    \t    linesOfCode: 1500</span><br><span class=\"line\">  \t&#125;, &#123;</span><br><span class=\"line\">    \t    name: &#39;Jimmy Gosling&#39;,</span><br><span class=\"line\">    \t    linesOfCode: 150</span><br><span class=\"line\">  \t&#125;, &#123;</span><br><span class=\"line\">    \t    name: &#39;Gracie Hopper&#39;,</span><br><span class=\"line\">    \t    linesOfCode: 1000</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">const INITIAL_VALUE &#x3D; 0;</span><br><span class=\"line\">const totalOutput &#x3D; programmerOutput</span><br><span class=\"line\">        .map((programmer) &#x3D;&gt; programmer.linesOfCode)</span><br><span class=\"line\">        .reduce((acc, linesOfCode) &#x3D;&gt; acc + linesOfCode, INITIAL_VALUE)；</span><br></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"10\">\n<li>概括条件</li>\n</ol>\n<pre><code>Bad:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (fsm.state &#x3D;&#x3D;&#x3D; &#39;fetching&#39; &amp;&amp; isEmpty(listNode)) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nGood:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function shouldShowSpinner(fsm, listNode) &#123;</span><br><span class=\"line\">        return fsm.state &#x3D;&#x3D;&#x3D; &#39;fetching&#39; &amp;&amp; isEmpty(listNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (shouldShowSpinner(fsmInstance, listNodeInstance)) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"10\">\n<li>避免否定条件<br>\nBad:</li>\n</ol>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isDOMNodeNotPresent(node) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (!isDOMNodeNotPresent(node)) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nGood:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isDOMNodePresent(node) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (isDOMNodePresent(node)) &#123;</span><br><span class=\"line\">         &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"14\">\n<li>避免多条件</li>\n</ol>\n<pre><code>这个看起来像是不可完成的任务。当第一次听到这个的时候，人们都会说：&quot;没有``if`` 我能够做什么？ &quot;这个回答是：你可以在不同的情况下使用多态完成相同的任务。第二个问题通常是：&quot; 听起来不错，可是为什么我被希望要求做这个？&quot;答案是我们之前学到过的概念：函数只应该做一件事。当你的`class`和`function`有了条件判断，你在告诉你的用户，你的函数在做不止一件事。记住，函数只做一件事。\n\nBad:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Airplane &#123;</span><br><span class=\"line\">\t&#x2F;&#x2F; ...</span><br><span class=\"line\">        getCruisingAltitude() &#123;</span><br><span class=\"line\">            switch (this.type) &#123;</span><br><span class=\"line\">                case &#39;777&#39;:</span><br><span class=\"line\">                    return this.getMaxAltitude() - this.getPassengerCount();</span><br><span class=\"line\">                case &#39;Air Force One&#39;:</span><br><span class=\"line\">                    return this.getMaxAltitude();</span><br><span class=\"line\">                case &#39;Cessna&#39;:</span><br><span class=\"line\">                    return this.getMaxAltitude() - this.getFuelExpenditure();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\nGood:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Airplane &#123;</span><br><span class=\"line\">         &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Boeing777 extends Airplane &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">        getCruisingAltitude() &#123;</span><br><span class=\"line\">            return this.getMaxAltitude() - this.getPassengerCount();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class AirForceOne extends Airplane &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">        getCruisingAltitude() &#123;</span><br><span class=\"line\">            return this.getMaxAltitude();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Cessna extends Airplane &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">        getCruisingAltitude() &#123;</span><br><span class=\"line\">            return this.getMaxAltitude() - this.getFuelExpenditure();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"15\">\n<li>\n<p>避免多条件地查询</p>\n<ul>\n<li>JavaScript是无类型的语言，这意味着你可以使用任何类型来作为参数。有时候你会被这种自由反咬一口，然后尝试着在函数中做类型检测。这里有很多方法去避免这种情况，首先要考虑的是现有的API</li>\n</ul>\n<p>Bad:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function travelToTexas(vehicle) &#123;</span><br><span class=\"line\">        if (vehicle instanceof Bicycle) &#123;</span><br><span class=\"line\">            vehicle.pedal(this.currentLocation, new Location(&#39;texas&#39;));</span><br><span class=\"line\">        &#125; else if (vehicle instanceof Car) &#123;</span><br><span class=\"line\">            vehicle.drive(this.currentLocation, new Location(&#39;texas&#39;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Good :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function travelToTexas(vehicle) &#123;</span><br><span class=\"line\">        vehicle.move(this.currentLocation, new Location(&#39;texas&#39;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果你使用的是像字符串和整数这种基本类型的值，但是你不使用多态但是依旧感觉到做类型检测很有必要，你可以考虑<code>TypeScript</code>。他是<code>JavaScript</code>非常卓越的替代品。它提供了在JS语法基础上的静态类型检测(FaceBook不是有flow吗…)。手动检查普通类型的JavaScript,需要额外多的代码，这种人造的类型安全使代码丧失了可读性。让代码整洁，书写好的测试用例，才会有好的code  review。否则，用TypeScript来弥补这个缺失。</li>\n</ul>\n<p>Bad:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function combine(val1, val2) &#123;</span><br><span class=\"line\">        if (typeof val1 &#x3D;&#x3D;&#x3D; &#39;number&#39; &amp;&amp; typeof val2 &#x3D;&#x3D;&#x3D; &#39;number&#39; ||</span><br><span class=\"line\">            typeof val1 &#x3D;&#x3D;&#x3D; &#39;string&#39; &amp;&amp; typeof val2 &#x3D;&#x3D;&#x3D; &#39;string&#39;) &#123;</span><br><span class=\"line\">                return val1 + val2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        throw new Error(&#39;Must be of type String or Number&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Good:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function combine(val1, val2) &#123;</span><br><span class=\"line\">        return val1 + val2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>不要过度优化<br>\n现代浏览器在底层运行时做了很多的优化。很多时候你在优化代码只是在浪费时间。这里有很多好的<a href=\"https://github.com/petkaantonov/bluebird/wiki/Optimization-killers\" target=\"_blank\" rel=\"noopener\">资源</a>来查看哪些底层的优化是缺失的。</p>\n<p>Bad:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; On old browsers, each iteration with uncached &#96;list.length&#96; would be costly</span><br><span class=\"line\">&#x2F;&#x2F; because of &#96;list.length&#96; recomputation. In modern browsers, this is optimized.</span><br><span class=\"line\">for (let i &#x3D; 0, len &#x3D; list.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Good:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (let i &#x3D; 0; i &lt; list.length; i++) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>移除无用的代码<br>\n无用的代码和复制来的代码一样不好，你的代码库没有理由去保留它。如果没有被调用过，清除它。如果你始终需要它就让它存在在历史版本中。</p>\n</li>\n</ol>\n<pre><code>Bad:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function oldRequestModule(url) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function newRequestModule(url) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const req &#x3D; newRequestModule;</span><br><span class=\"line\">inventoryTracker(&#39;apples&#39;, req, &#39;www.inventory-awesome.io&#39;);</span><br></pre></td></tr></table></figure>\n\nGood:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function newRequestModule(url) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const req &#x3D; newRequestModule;</span><br><span class=\"line\">inventoryTracker(&#39;apples&#39;, req, &#39;www.inventory-awesome.io&#39;);</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"对象和数据结构\">对象和数据结构</h2>\n<pre><code>1.  使用getter和setter\n\n\t在对象上使用getter和setter来获取数据比单纯地在一个对象上获取属性好。你可能会问为什么，这里有几个不被注意的原因。\t\t*  当你不仅仅只想获取对象属性的时候，你不得不在代码库查找每一个获取对象属性的代码。\n\t*  当做一个set的时候，需要做一些校验。\n\t* 概括内部的表达式。\n\t*  当使用setting和getting的时候更容易增加log和错误处理。\n\t* 你可以懒加载对象属性，我们是说doing服务器获取它。\n\nBad:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function makeBankAccount() &#123;</span><br><span class=\"line\">\t &#x2F;&#x2F; ...</span><br><span class=\"line\">\t  return &#123;</span><br><span class=\"line\">\t  \tbalance: 0,</span><br><span class=\"line\">\t  \t&#x2F;&#x2F; ...</span><br><span class=\"line\">\t  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const account &#x3D; makeBankAccount();</span><br><span class=\"line\">account.balance &#x3D; 100;</span><br></pre></td></tr></table></figure>\n\nGood:\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function makeBankAccount() &#123;</span><br><span class=\"line\">\t &#x2F;&#x2F;这是一个私有的属性</span><br><span class=\"line\">\t let balance &#x3D; 0;</span><br><span class=\"line\">\t &#x2F;&#x2F; a &quot;getter&quot;,通过下面的返回对象使之成为公有。</span><br><span class=\"line\">\t function getBalance() &#123;</span><br><span class=\"line\">\t \treturn balance;</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t  &#x2F;&#x2F; a &quot;setter&quot;, 通过下面的返回对象使之成为公有。</span><br><span class=\"line\">\t  function setBalance(amount) &#123;</span><br><span class=\"line\">\t  \t&#x2F;&#x2F; ... validate before updating the balance</span><br><span class=\"line\">\t  \tbalance &#x3D; amount;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  return &#123;</span><br><span class=\"line\">\t \t &#x2F;&#x2F; ...</span><br><span class=\"line\">\t  \tgetBalance,</span><br><span class=\"line\">\t\t  setBalance,</span><br><span class=\"line\">\t  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const account &#x3D; makeBankAccount();</span><br><span class=\"line\">account.setBalance(100);</span><br></pre></td></tr></table></figure>\n2.   使用getter和setter\n</code></pre>\n","categories":["前端相关"],"tags":[]},{"title":"category","url":"http://jocolorful.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"http://jocolorful.com/css/personal-style.css","content":"* {\n  transition-duration: .5s;\n  scroll-behavior: smooth;\n}\n\nhtml {\n  width: 100vw;\n  height: 100vh;\n}\n\nbody {\n  background: rgba(150, 220, 230, 0.35);\n}\n\n.article-content blockquote {\n  background: rgba(0, 0, 0, 0.02);\n  border-left: 6px solid rgba(0, 0, 0, 0.2);\n  padding: 1px 10px;\n  border-radius: 5px;\n  margin: 0 14px 14px;\n}\n\n.article-content blockquote  p {\n  line-height: 24px;\n  border-radius: 5px;\n  font-size: 13px;\n}\n.article-content li {\n  margin-bottom: 10px;\n}\n\n.page-header {\n  background: transparent;\n}\n\n\n\n.layout {\n  overflow: hidden;\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  width: 100vw;\n  height: 100vh;\n  background: url(https://img.zcool.cn/community/01c9905b858a3ca8012126ce7c37c0.jpg@1280w_1l_0o_100sh.jpg);\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n}\n.layout .category-box{\n  margin-top: 100px;\n}\n\n\n.layout .content-category-wrap .item-post .post-title {\n  font-size: 12px;\n  text-overflow: ellipsis;\n}\n\n.layout .content-category {\n  font-size: 12px;\n  width: 100%;\n}\n\n.layout .content-category-wrap {\n  position: relative;\n  padding-left: 20px;\n  width: 600px;\n  height: 100vh;\n  overflow: hidden scroll;\n}\n\n.content-category-wrap::-webkit-scrollbar {\n  display: none;\n}\n\n.layout .content-home {\n  position: relative;\n}\n\n.content-home .slogan,\n.content-home .name {\n  margin: 12px 0;\n  color: #333333;\n}\n\n.article-content a {\n  color: rgba(0,132,255, 0.9);\n}\n\n.content.content-archive .toolbox {\n  margin-left: -30px;\n}\n\n.page-header {\n  margin-bottom: 0px !important;\n}\n\n.page-header .list-toolbox {\n  display: block !important;\n}\n\n\na:hover {\n  color: #1890ff !important;\n}\n\n.highlight .html, .gutter{\n  display: none\n}\n\n.highlight {\n  background: black;\n}\n\n.pagination .next,\n.pagination .prev {\n  display: none !important;\n}\n\ncode,\nfigure.highlight {\n  padding-top: 40px;\n  background: rgba(255, 255, 255, 0.7) !important;\n  background: rgba(0, 0, 0, 1) !important;\n  position: relative;\n}\n\ncode {\n  padding: 2px 4px;\n  position: relative;\n}\n\n\n.highlight::after {\n  top: 12px;\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  position: absolute;\n  background: rgb(255, 95, 86);\n  content: '';\n}\n\n\n.highlight::before {\n  top: 12px;\n  left: 40px;\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  position: absolute;\n  background: rgb(255, 189, 46);\n  content: '';\n}\n\n.box-blog-info {\n  display: flex !important;\n  align-items: center;\n  margin-top: 20px;\n}\n\n.toolbox-list {\n  display: flex;\n  align-items: center;\n  margin: 0px 15px;\n}\n\n.item-toolbox a {\n  display: inline-block;\n  font-size: 12px;\n  line-height: 40px;\n  width: 40px;\n  display: inline-block;\n  height: 40px;\n  margin-right: 12px;\n  transition-duration: .5s;\n  text-align: center;\n  color: #555;\n  border-radius: 20px;\n  background: #f0f0f0;\n  transition: box-shadow .3s ease-in-out\n}\n\n.item-toolbox a:hover {\n  box-shadow: 0 0 0 3px #e6f7ff;;\n  background: #e6f7ff !important;\n  color: #1890ff !important;\n}\n\n.gt-btn {\n  background: #0084ff !important;\n  opacity: 0.9;\n}\n.gt-btn:hover {\n  opacity: 1;\n  transition-duration: .5s;\n}\n\n.gt-btn-text {\n  color: #FFF;\n}\n\n\n.content.content-search .wrap-search-box {\n  margin-top: 20px;\n}\n\n.content.content-link .link-list .link-item .link-url {\n  display: flex;\n}\n\n.content.content-link .link-list .link-item .wrap-info {\n  margin-left: 12px;\n  flex-direction: column;\n  display: flex !important;\n  justify-content: space-between !important;\n}\n\n.content.content-link .link-list .link-item {\n  padding: 12px 0;\n}\n\n.link-list .link-item .info {\n  font-size: 12px !important;\n}\n\n\n.box-prev-next {\n  margin-top: 20px;\n}\n\n.layout .category-box {\n  width: 80%;\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.layout .category-box .category-list .category-item .category-size {\n  font-family: serif;\n  font-weight: bold;\n}\n\n.category-box--top {\n  margin-bottom: 15px;\n}\n\n@media screen and (max-width: 450px) {\n  .layout {\n    overflow: hidden;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    width: 100vw;\n    height: 100vh;\n    background: url(https://img.zcool.cn/community/01c9905b858a3ca8012126ce7c37c0.jpg@1280w_1l_0o_100sh.jpg);\n    background-repeat: no-repeat;\n    background-size: 100% 100%;\n  }\n\n  .layout .category-box,\n  .layout .content-category-wrap {\n    display: none;\n  }\n}","categories":[],"tags":[]},{"title":"link","url":"http://jocolorful.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://jocolorful.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://jocolorful.com/tag/index.html","content":"","categories":[],"tags":[]}]