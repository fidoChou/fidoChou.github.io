[{"title":"晴雅集","url":"http://jocolorful.com/2021/06/20/晴雅集/","content":"<h2 id=\"2021-书单\"><a href=\"#2021-书单\" class=\"headerlink\" title=\"2021 书单\"></a>2021 书单</h2><ul>\n<li><p><a href=\"https://book.douban.com/subject/1386094/\" target=\"_blank\" rel=\"noopener\">《PeterPan》</a> 在读</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26422275/\" target=\"_blank\" rel=\"noopener\">《向死而生》</a> 作者：李开复 ｜ 推荐指数：🌟🌟🌟</p>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/11524204/\" target=\"_blank\" rel=\"noopener\">《围城》</a> 作者：钱钟书 ｜ 推荐指数：🌟🌟🌟</p>\n<blockquote>\n<p>困住我们的何止婚姻？选择没有对错，只是这名利场让人迷失了一切。</p>\n</blockquote>\n</li>\n<li><p><a href=\"https://book.douban.com/subject/26278687/\" target=\"_blank\" rel=\"noopener\">《皮囊》</a> 作者：蔡崇达 ｜ 推荐指数：🌟🌟🌟🌟</p>\n</li>\n</ul>\n<blockquote>\n<p>海藏不住，也圈不住。对待海最好的办法，就是让每个人自己去寻找到和它相处的方式。每片海，沉浮着不同的景致，也翻滚着各自的危险。生活也是，人的欲望也是。以前以为节制或者自我用逻辑框住，甚至掩耳盗铃地掩藏住，是最好的方法，然而，无论如何，它终究永远在那躁动起伏</p>\n</blockquote>\n","categories":[],"tags":[]},{"title":"奇怪的言论又来了","url":"http://jocolorful.com/2021/06/19/抖个机灵/","content":"<ul>\n<li>部落格被装扮得花花绿绿，我还挺喜欢！</li>\n</ul>\n","categories":[],"tags":[]},{"title":"留言板","url":"http://jocolorful.com/2021/06/19/留言板/","content":"<blockquote>\n<p>hi~，很高兴见到你！很期待能在我的留言板上留下你的足迹！</p>\n</blockquote>\n","categories":[],"tags":[]},{"title":"Weekly","url":"http://jocolorful.com/2021/06/19/Weekly/","content":"<h4 id=\"2021-06-14-2021-06-20\"><a href=\"#2021-06-14-2021-06-20\" class=\"headerlink\" title=\"2021.06.14 - 2021.06.20\"></a>2021.06.14 - 2021.06.20</h4><p><a href=\"https://blog.webpagetest.org/posts/benchmarking-javascript-memory-usage/\" target=\"_blank\" rel=\"noopener\">JS 内存使用的基准测试</a></p>\n<ol>\n<li>根据v8 团队的研究：网络上 35% 的内存分配与 JavaScript 相关；10% 用于表示内存中的 DOM 元素；剩下的 55% 是图像。<a href=\"https://web.dev/monitor-total-page-memory-usage/\" target=\"_blank\" rel=\"noopener\">measureUserAgentSpecificMemory</a> API 目前仅限于 JS 和 DOM 相关信息，但确实也占据页面实际内存使用量的很大一部分（约 45%）。</li>\n</ol>\n<p>总结</p>\n<ol>\n<li>内存仍然是 Web 性能的一个尚未开发的主要领域，但这可能需要改变。随着发布的 JavaScript 数量不断增加，内存使用量也在增加。</li>\n<li>我们仍然需要更多信息来完善全貌。在任何时间点，浏览器实际可用的内存有多少？内存与关键业务和用户参与度指标有何关联？什么是内存的使用不与JavaScript和DOM的复杂性？</li>\n<li>虽然今天使用真实用户监控为您的站点获取这些数据可能存在挑战，但我在此处进行测试所采用的相同方法（一些 Chrome 标志与自定义指标配对）使您可以开始将内存相关数据提取到您的测试结果今天，我也喜欢看到人们这样做只是所以我们可以更多地了解我们是如何做的今天，其意义是什么，以及如何开始好转。</li>\n</ol>\n<p><a href=\"https://developer.chrome.com/blog/memory-inspector/\" target=\"_blank\" rel=\"noopener\">memory-inspector for chrome</a></p>\n<h4 id=\"2021-06-07-2021-06-11\"><a href=\"#2021-06-07-2021-06-11\" class=\"headerlink\" title=\"2021.06.07 - 2021.06.11\"></a>2021.06.07 - 2021.06.11</h4><p><a href=\"https://bytecodealliance.org/articles/making-javascript-run-fast-on-webassembly\" target=\"_blank\" rel=\"noopener\">Making JavaScript run fast on WebAssembly</a><br><a href=\"https://jsonmatic.com/\" target=\"_blank\" rel=\"noopener\">https://jsonmatic.com/</a><br><a href=\"https://domevents.dev/\" target=\"_blank\" rel=\"noopener\">https://domevents.dev/</a></p>\n","categories":["Weekly"],"tags":[]},{"title":"随便写写","url":"http://jocolorful.com/2021/06/15/随便写写/","content":"<ul>\n<li>想干的越多，越不知道从哪里入手。心情便越是烦闷，如此恶性循环。</li>\n<li>不喜欢吃苹果，苹果味儿的汽水依然不喜欢</li>\n<li>回家的时候，金百万在地上各种打滚示爱，可能是在和爸爸争宠</li>\n<li>执着于规划自己的生活，不知道干什么的时候最为恐怖</li>\n</ul>\n<p>嗯，把这些随便想想的记下来心里面也会充实一些</p>\n<ul>\n<li>6.16：上班路上也挺美好，看见道路边的小公园，叶子都开了。新绿、嫩绿、浅绿、翠绿、深绿。终于有了些夏天繁茂的样子。路上上班的人很多，想想自己也是他们普通中的一员，也许他们和我也会有同样的想法吧：我们都是普通人。关注了知乎一个问题<a href=\"https://www.zhihu.com/question/288017836\" target=\"_blank\" rel=\"noopener\">「既然所有的生命都要死亡，那么生命的意义是什么?」</a></li>\n</ul>\n","categories":["生活随感"],"tags":[]},{"title":"微前端相关知识","url":"http://jocolorful.com/2021/06/14/微前端相关知识/","content":"<p>目前 <a href=\"https://qiankun.umijs.org/zh\" target=\"_blank\" rel=\"noopener\">qiankun</a> <a href=\"https://zhuanlan.zhihu.com/p/78362028\" target=\"_blank\" rel=\"noopener\">可能</a>是更好的微前端解决方案</p>\n<ol>\n<li><a href=\"https://juejin.cn/post/6844904162509979662\" target=\"_blank\" rel=\"noopener\">微前端-最容易看懂的微前端知识</a></li>\n</ol>\n<p>大应用涵盖子应用</p>\n<ol>\n<li>技术隔离、样式隔离</li>\n<li>基座配置</li>\n</ol>\n","categories":["前端相关"],"tags":[]},{"title":"CSP","url":"http://jocolorful.com/2021/03/30/CSP/","content":"<p>PM 要求将 iframe 里面的某个元素，对 window 进行定位。<br>主要解决思路：我参考了👉<a href=\"https://blog.csdn.net/hejiancsdn/article/details/80495333\" target=\"_blank\" rel=\"noopener\">解决 iframe 中 fixed 失效的问题</a>。</p>\n<p>这个过程主要分为两步：</p>\n<ol>\n<li>使该元素 fixed。并且计算出相对真实 window 的 marginTop 值</li>\n<li>监听 window 的滚动事件，滚动偏移量即是 fixed 的 top 值</li>\n</ol>\n<p>在实践的过程中，我主要遇到了以下问题</p>\n<h3 id=\"Q1-iframe-通信问题\"><a href=\"#Q1-iframe-通信问题\" class=\"headerlink\" title=\"Q1: iframe 通信问题\"></a>Q1: iframe 通信问题</h3><p>在本地开发模式中，由于a、b 两个项目，端口号不同，根据浏览器的同源策略，在 iframe 中监听上层 window 时报错如图下：</p>\n<h3 id=\"A1-解决方案\"><a href=\"#A1-解决方案\" class=\"headerlink\" title=\"A1: 解决方案\"></a>A1: 解决方案</h3><p>直接暴力启动一个允许跨域的浏览器，先保证开发正常进行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">open -n -a /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --args --user-data-dir=<span class=\"hljs-string\">\"/tmp/chrome_dev_test\"</span> --<span class=\"hljs-built_in\">disable</span>-web-security<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"深入-CSP\"><a href=\"#深入-CSP\" class=\"headerlink\" title=\"深入 CSP\"></a>深入 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP\" target=\"_blank\" rel=\"noopener\">CSP</a></h2><p>既然问题出现，那就再深入一点，多剖析一下 CSP 相关内容：</p>\n<p>Content Secure Policy：内容安全策略</p>\n<h3 id=\"如何使用：\"><a href=\"#如何使用：\" class=\"headerlink\" title=\"如何使用：\"></a>如何使用：</h3><ol>\n<li><p>通过添加 <code>Content-Security-Policy</code> 头部指定</p>\n</li>\n<li><p>通过 <code>meta</code> 标签来指定</p>\n</li>\n</ol>\n<h3 id=\"主要目标：\"><a href=\"#主要目标：\" class=\"headerlink\" title=\"主要目标：\"></a>主要目标：</h3><ol>\n<li>CSP 的主要目标是减少和报告 XSS 攻击 ，XSS 攻击利用了浏览器对于从服务器所获取的内容的信任。</li>\n<li>数据包嗅探攻击：除加载域以外，还可以限制协议。如：https</li>\n</ol>\n<h3 id=\"相关策略\"><a href=\"#相关策略\" class=\"headerlink\" title=\"相关策略\"></a>相关策略</h3><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/default-src\" target=\"_blank\" rel=\"noopener\">default-src</a>: 这个是为其他以下几个指令提供 fallback 机制</li>\n<li>img-src</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/connect-src\" target=\"_blank\" rel=\"noopener\">connect-src</a> a 标签、fetch、ajax</li>\n<li>frame-src</li>\n<li>mailto</li>\n<li>script-src</li>\n<li>style-src</li>\n</ul>\n<h3 id=\"上报机制\"><a href=\"#上报机制\" class=\"headerlink\" title=\"上报机制\"></a>上报机制</h3><p>通过 <code>report-uri</code> 进行一个 post 上报</p>\n<p>开源的 <a href=\"https://github.com/helmetjs/helmet/blob/042ee406c753c492a84d7c771010e38477f8c5cb/middlewares/content-security-policy/index.ts#L213\" target=\"_blank\" rel=\"noopener\">koa-hemlet</a>本质也就是设置 Content-Secuiry-Policy</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>CSP 只是作为一种为网站策略增强的一种手段。和 iFrame 通信并没有什么联系。只是可以控制网站加载 iFrame 的源。所以我应该还去了解并且动手实现跨域的情况下，如何实现window 和 iframe 的通信。</p>\n","categories":["前端相关"],"tags":[]},{"title":"About","url":"http://jocolorful.com/2021/03/02/about/","content":"","categories":[],"tags":[]},{"title":"Babel","url":"http://jocolorful.com/2020/12/18/babel/","content":"<p>最好的学习当然是从看官方文档，如果英文不行那就来份<a href=\"https://www.babeljs.cn/\" target=\"_blank\" rel=\"noopener\">中文文档</a>的 🤦‍♀️</p>\n<p>从官方文档来看，总共五个方面：指南、概览、用法、预设以及工具。</p>\n<h1 id=\"指南\"><a href=\"#指南\" class=\"headerlink\" title=\"指南\"></a>指南</h1><ol>\n<li>是什么：Babel 的作用是将「先进」的 ES 语法进行降级，编译成较低版本的浏览器能够识别的语法。</li>\n</ol>\n<h1 id=\"插件-amp-预设\"><a href=\"#插件-amp-预设\" class=\"headerlink\" title=\"插件 &amp; 预设\"></a>插件 &amp; 预设</h1><p>插件的作用就是 translate，预设的作用是启用一组插件</p>\n<h2 id=\"短名称\"><a href=\"#短名称\" class=\"headerlink\" title=\"短名称\"></a>短名称</h2><ol>\n<li><p>插件 babel-plugin- 可忽略<br> eg: babel-plugin-lodash 等同于 lodash</p>\n<p> 可适用冠名 @org/</p>\n</li>\n<li><p>预设 babel-preset- 可忽略<br> eg: babel-preset-myPreset 等同于 myPreset</p>\n<p> 可适用冠名 @org/</p>\n</li>\n</ol>\n<p>##. 顺序<br>2. 插件顺序：从左往右</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123;<br>  <span class=\"hljs-string\">\"plugins\"</span>: [<span class=\"hljs-string\">\"transform-decorators-legacy\"</span>, <span class=\"hljs-string\">\"transform-class-properties\"</span>]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>预设顺序：从右往左</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123;<br>  <span class=\"hljs-string\">\"presets\"</span>: [<span class=\"hljs-string\">\"@babel/preset-env\"</span>, <span class=\"hljs-string\">\"@babel/preset-react\"</span>]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"AttachMent\"><a href=\"#AttachMent\" class=\"headerlink\" title=\"AttachMent\"></a>AttachMent</h2><h3 id=\"Polyfills-可按需引入\"><a href=\"#Polyfills-可按需引入\" class=\"headerlink\" title=\"Polyfills 可按需引入\"></a>Polyfills 可按需引入</h3><p><a href=\"https://betgar.github.io/2019/07/30/babel6-loose-mode/\" target=\"_blank\" rel=\"noopener\">loose 参数</a></p>\n<p>即松散模式：转换为简单的 ES5 实现。<br>而严格模式：转换时尽可能遵循、接近 ES6 语义。</p>\n<p>可全局配置添加预设，也可给每个 plugin 设置参数</p>\n","categories":["前端相关"],"tags":[]},{"title":"进击的 NPM","url":"http://jocolorful.com/2020/12/10/进击的-NPM/","content":"<h1 id=\"NPM2\"><a href=\"#NPM2\" class=\"headerlink\" title=\"NPM2\"></a>NPM2</h1><p>优点：完整的依赖拓扑图<br>缺点：很暴力，重复依赖</p>\n<h1 id=\"NPM3\"><a href=\"#NPM3\" class=\"headerlink\" title=\"NPM3\"></a>NPM3</h1><p>公共依赖提升，但是由于下载顺序问题，最极端情况下还是 npm2，并不能完全解决依赖重复</p>\n<h1 id=\"NPM4\"><a href=\"#NPM4\" class=\"headerlink\" title=\"NPM4\"></a>NPM4</h1><p>npm-shrinkwrap.json 被认为是完整的安装清单，但是 npm2 就有 npm-shrinkwrap.json</p>\n<h1 id=\"NPM5\"><a href=\"#NPM5\" class=\"headerlink\" title=\"NPM5\"></a>NPM5</h1><h2 id=\"lockfile\"><a href=\"#lockfile\" class=\"headerlink\" title=\"lockfile\"></a>lockfile</h2><table style=\"width:100%\">\n  <tr>\n    <th width=\"500px\">npm@5 以前：npm-shrinkwrap.json</th>\n    <th width=\"500px\">npm@5 以后：package-lock.json</th>\n  </tr>\n  <tr>\n    <td>发布包时如果有锁定需求，可用 npm shrinkwrap 命令把 package-lock.json 转为 npm-shrinkwrap.json 随包发布（向下兼容）</td>\n    <td>开发时提交和使用，来保证不同环境、人员安装依赖的一致性。</td>\n  </tr>\n</table>\n\n<h2 id=\"cache-优化\"><a href=\"#cache-优化\" class=\"headerlink\" title=\"cache 优化\"></a>cache 优化</h2><table style=\"width:100%\">\n  <tr>\n    <th></th>\n    <th width=\"500px\">npm@5 以前</th>\n    <th width=\"500px\">npm@5 以后</th>\n  </tr>\n  <tr>\n    <th width=\"120px\">缓存路径</td>\n    <td>~/.npm 文件夹中以模块名的形式直接存储 <br/>eg: koa 模块存储在 ~/.npm/koa </td>\n    <td>路径存放在 ~/.npm/_cacache</td>\n  </tr>\n  <tr>\n    <th width=\"120px\">缓存管理</td>\n    <td></td>\n    <td>由系统统一管理，数据发生错误就会重新获取，除非需要释放磁盘空间。需要 --force 参数</td>\n  </tr>\n</table>\n\n<h2 id=\"文件下载优化\"><a href=\"#文件下载优化\" class=\"headerlink\" title=\"文件下载优化\"></a>文件下载优化</h2><p>如果将本地目录作为依赖来安装</p>\n<p>npm@5 before：将会把文件目录作为「副本拷贝」到 node_modules 中。</p>\n<p>npm@5 after： symlinks 的方式来实现（使用本地 tarball 包除外），而不再执行文件拷贝。这将会提升安装速度：</p>\n<ol start=\"2\">\n<li>安装耗时打印</li>\n<li>新的 [package-lock.json] 文件锁</li>\n<li>发包模块不包含 lock 文件</li>\n<li>install 时默认 –save，除非使用 –no-save</li>\n</ol>\n<h2 id=\"npx\"><a href=\"#npx\" class=\"headerlink\" title=\"npx\"></a>npx</h2><p>npx 一个随着 npm 5.2.0 发布的命令，会帮你执行依赖包里的二进制文件。比如对于没有全局安装的命令你想执行的话就只能 ./node_modules/.bin/webpack -v，有 npx 之后就可以直接使用 npx webpack -v。</p>\n<h1 id=\"NPM6\"><a href=\"#NPM6\" class=\"headerlink\" title=\"NPM6\"></a>NPM6</h1><p>解决安全相关问题</p>\n<p>npm audit：这个命令本地试过，但是貌似已经没撒用了 🤔</p>\n<h1 id=\"NPM7\"><a href=\"#NPM7\" class=\"headerlink\" title=\"NPM7\"></a>NPM7</h1><ol>\n<li>npm workspace</li>\n<li>自动安装 「对等依赖」（有些意思 🤔）</li>\n<li>lock 文件格式向 yarn 看齐</li>\n</ol>\n<h2 id=\"breaking-Changes\"><a href=\"#breaking-Changes\" class=\"headerlink\" title=\"breaking Changes\"></a>breaking Changes</h2><ol>\n<li>npx 被「npm exec」重写</li>\n</ol>\n<p>相关文章</p>\n<p><a href=\"https://github.com/Kimi-Gao/Program-Blog/issues/112\" target=\"_blank\" rel=\"noopener\">npm@5 新特性使用指南</a><br><a href=\"https://medium.com/npm-inc/announcing-npm-6-5d0b1799a905\" target=\"_blank\" rel=\"noopener\">Announcing npm@6</a><br><a href=\"https://blog.npmjs.org/post/173239798780/beyond-npm6-the-future-of-the-npm-cli\" target=\"_blank\" rel=\"noopener\">npm blog V6</a><br><a href=\"https://blog.npmjs.org/post/626173315965468672/npm-v7-series-beta-release-and-semver-major\" target=\"_blank\" rel=\"noopener\">npm blog V7</a><br><a href=\"https://www.youtube.com/watch?v=7gFaBjY7fHs\" target=\"_blank\" rel=\"noopener\">Youtube: V7 Released</a></p>\n","categories":["Node.js"],"tags":[]},{"title":"Pause","url":"http://jocolorful.com/2020/12/09/Pause/","content":"<p>时间似乎按下了暂停键，快到年底了。</p>\n<p>我在 new 这篇文章的时候收到了两封邮件，一封是来自我的产品 zhaojin 的产品 RFC 邮件提示，另外一封是 老张的。</p>\n<p>前几天 zhaojin 在群里问什么是内卷，他已经开始要走傻白甜的路线了么？</p>\n<ol>\n<li>去厦门玩耍了一趟</li>\n<li>隔壁室友搬家，我大概再也不想见到那对情侣了，新室友很好至少不做饭，不会把厨房弄得乱糟糟的。公共的区域给我保留了放鞋的地方。冰箱也不会有臭臭的味道，毕竟他们跟我一样没什么东西。</li>\n</ol>\n<p>我似乎长胖了一点，不过也是好事，太干巴巴也不好看。</p>\n<p>奥，我的 OKR 似乎有了一点点新的进展，姑且评估为 30%，写的时候真的挺痛苦，没撒帮手，小群内的人几乎不说话。我和 lvbin 私聊的时候说了进展然后说接下来的打算，问他可不可以来搭把手，他很爽快地答应了，然后还说「We are a team ！」这种话简直太令人喜欢了，周会上还说似乎很久没见着我的样子。</p>\n<p>另外我的批量上传其实成功了，但是产品方案实际上变了，我几乎花了一周空闲的时间研究阿里云的 OSS SDK。也没觉得彭 🐱 封装的「中间层」好用，反而觉得是累赘。🐱 喜欢过度封装。但是事实上他的思路很好，很多都是我想不到的。机智的 🐱🐱。</p>\n<p>我还给企业微信群添加了机器人，执行定时任务给大家讲笑话撒的，我似乎对这种大家都觉得无趣的事情充满了热情，明明就很有趣啊！</p>\n<p>所以这个月除了出去玩，我还是学到了不少东西。</p>\n<ol>\n<li>批量上传 + 断点续传</li>\n<li>爬虫 + 定时任务</li>\n</ol>\n<p>发哥对侯老师说的 npm 管理似乎有些误解，但是我没有找到相关的文章，所以我应该花个时间研究一下 npm 的 CHANGELOG。果真给自己积 TODO 还是有用。工作的第三年开始了，加油了喂！</p>\n","categories":["生活随感"],"tags":[]},{"title":"PPT 准备与演讲技巧","url":"http://jocolorful.com/2020/10/29/准备与演讲技巧/","content":"<blockquote>\n<p>这周给老板们做了「无头浏览器」相关的分享，我终于可以放心写代码了！</p>\n</blockquote>\n<center>\n    <img src=\"/images/talk.png\"  width=\"400px\" />\n</center>\n\n<p>演讲是否足够精彩，我想观众们的掌声已经给了答案。在这之前，我做过的分享都是自己准备，这个准备的过程，侯老师帮我 review 了很多，从准备到演讲这个过程都是收获满满。</p>\n<p>我记录这些希望除了在分享以外我能够收获学习到更多。</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>PPT 是 Talk 中最重要的一个环节之一。特别是对于技术分享来说，你的观众可能不会在意你的长相穿着，但是你的 PPT 却尤为重要。做好 PPT 的演讲主要有以下几个方面：</p>\n<ol>\n<li>主题确定</li>\n<li>围绕主题，梳理大纲内容</li>\n<li>从大纲出发，进行发散</li>\n<li>演讲的总结</li>\n</ol>\n<h1 id=\"主题的确定\"><a href=\"#主题的确定\" class=\"headerlink\" title=\"主题的确定\"></a>主题的确定</h1><p>侯老师让我剖析「posterMan」。这其实是 Node 很小的一个应用。本质是利用了 puppter 的无头浏览器技术来实现一个截图的功能。当遇见一个新鲜的事物时总是能学到许多有意思的事情👇：</p>\n<p>这分析这个工程的代码时，我先把他跑起来。在通过    package.json 分析相关依赖并剖析依赖的作用。这个过程我把有疑问的点全部记录了下来并且逐一分析。</p>\n<p>这样大致下来就能知道</p>\n<p>其中我发现了「Puppter」以及 「gerneric pool」这俩重点包。</p>\n<ol>\n<li><p>「纵向挖掘」，作为一个不造轮子的好开发：可以用来做什么 &gt;&gt; 实现原理</p>\n</li>\n<li><p>「横向对比」：前端同样可以截屏，和前端截屏的对比，以及各方优势</p>\n</li>\n</ol>\n<h1 id=\"大纲确定\"><a href=\"#大纲确定\" class=\"headerlink\" title=\"大纲确定\"></a>大纲确定</h1><ol>\n<li>自我介绍</li>\n<li>演讲目录介绍</li>\n<li>内容（横向与纵向对比内容）</li>\n<li>未来及展望</li>\n<li>演讲总结</li>\n</ol>\n<h1 id=\"演讲的幽默\"><a href=\"#演讲的幽默\" class=\"headerlink\" title=\"演讲的幽默\"></a>演讲的幽默</h1><p>大概就是多打打比方，写写比喻句～</p>\n<h1 id=\"重复练习\"><a href=\"#重复练习\" class=\"headerlink\" title=\"重复练习\"></a>重复练习</h1><p>不要觉得自己准备的过程已经熟悉了内容，真实的演讲需要用「口述」和预想的差异会很大。所以需要注意多练习几次，其中包括 PPT 的内容完整性，衔接流畅。只有对内容做到了熟悉这样在演讲的过程才不会紧张。</p>\n<p>AnyWay，演讲还是多找找有经验的人帮忙多多 review。自己也要多准备多思考～</p>\n","categories":[],"tags":["软技能"]},{"title":"做一颗饱满的麦穗","url":"http://jocolorful.com/2020/10/22/做一颗饱满的麦穗/","content":"<p>今天是农历九月初九。(所以待会儿一定要给爸爸妈妈打电话！)</p>\n<p>先将思绪简单整理下吧。可爱的人啊，开心烦恼的事啊，靡间生长繁而茂盛。</p>\n<h1 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h1><p>这周和侯老师 one on one。今年的工作也算是得到了侯老师的认可，其实我自己本身对技术不太自信，我自己不太喜欢研究太过底层的东西（因为我知道我学了就忘）。今年年初交付团队的时候只有三个前端，我使劲儿把从章辰、雨豪身上学到的东西给用上了。（我在 Qunar 都学撒了？🤦‍♀️）那段时间 CRM 没有用户，可劲儿裸奔不断提代码的感觉真的挺爽。我跟侯老师说想要做没有做过的需求。他问我什么是没有做过的呢，C端？我说能够使我自我怀疑，我到底能不能做好的需求。后来我思考了一下，觉得自己有些幼稚。毕竟自己是个「打工人」，公司都是以结果为导向，我为自己这个想法感到些许的羞愧…</p>\n<p>然后第二件事是自测不足。哎，我实在不喜欢做自测。一股脑儿把代码合了，要命。一定要改改改！！</p>\n<p>侯老师突然让我准备分享。是关于 puppter 的。在我印象中做过几次分享</p>\n<ol>\n<li>koa 的爬虫 @36kr</li>\n<li>http 协议 @Qunar</li>\n<li>CSS 的六种命名 @Qunar</li>\n<li>基于 Webpack 分装 FFP 插件的解决思路 @zhihu</li>\n</ol>\n<p>没有很好的口才以及天赋，思维还特别跳跃。那就只能好好准备了，有时候我思考一个问题能联想特别多的东西，脱口而出别人就会一脸懵逼… …</p>\n<p>看来下次可以写写「技术分享」的经验以及总结，即便我的分享经验很少。</p>\n<p>这次主题是「Headless」在大前端的应用。我的观众是技术 leader ，所以我的周末没了… … 侯老师对我的帮助真的很大，无论从 PPT 知乎三巨头格，结构内容以及讲解的高度都有一个质的提升。虽然我在知乎的日子真的很舒服。但我收获了以前两年工作经历都换不到的宝贵财富。算一算，第四个年头就要开启了，莫等闲以及感恩珍惜。</p>\n<h2 id=\"不要高估自己的执行力\"><a href=\"#不要高估自己的执行力\" class=\"headerlink\" title=\"不要高估自己的执行力\"></a>不要高估自己的执行力</h2><p>我以为周末可以至少一天去学画画，另外一天可以准备 PPT 顺便看牙。</p>\n<p>真实的周末是花了一天改 bug（恰好 1024 那天，有趣）一天准备 PPT。改 bug 的时间把衣服都洗了，被子也晒了（Mark 一下最好的晒被子时间是 11 点 ～ 14 点）。希望晚上能够睡一个好觉。</p>\n<p>不过我还是一直在拖延，比如我的 👙 还没洗，🦷 也没看… 说好要把公司的组件整理到至少 50%。我就整理了五个，害…真的是没有技术含量的工作啊，难受。</p>\n<p>来日并不方长 …</p>\n<h1 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h1><p>遇见了可爱的人，翼巧的表妹来我们公司实习。不过她可能不会在北京呆很久。1023 的夜晚她陪我去逛街买格子衫，我说过节要有仪式感，可能至 16 年以来就没有女生陪我逛街了。本来是她陪我，但是她自己逛得好开心，虽然我不咋喜欢商场里的东西并且还让我帮她抱衣服，被人使唤的感觉还是可以的。至少觉得自己是被需要的。</p>\n<p>跟老公吵架了 … 虽然不是那种大声嚷嚷地吵架，这种矛盾更加可怕吧。台湾人的想法和大陆的真的不太一致吗？好像他们更加烂漫些，然鹅我现在已经快活生生变成一个物质的人了。谁不是在现实的毒打中过生活呢？</p>\n<p>夜色逐渐降临，我闭了下眼睛：摩托车，汽车的鸣笛。窗外有小孩的尖叫。我得去洗衣服了。</p>\n","categories":["生活随感"],"tags":[]},{"title":"无头浏览器在前端的应用场景","url":"http://jocolorful.com/2020/10/21/无头浏览器在前端的应用场景/","content":"<blockquote>\n<p>无头浏览器 from wikipedia： A headless browser is a web browser without a graphical user interface。无头实际上是指无界面地运行浏览器<br>我们在终端或者代码层，使用无头浏览器的技术来可以模拟用户在网页端的浏览及操作。</p>\n</blockquote>\n<h1 id=\"无头浏览器的相关应用\"><a href=\"#无头浏览器的相关应用\" class=\"headerlink\" title=\"无头浏览器的相关应用\"></a>无头浏览器的相关应用</h1><ol>\n<li>E2E 测试：无需打开UI界面，即可完成对应的测试内容。模拟表单提交，键盘输入，点击等行为</li>\n<li>网络爬虫 、SSR 服务端渲染</li>\n<li>网页截图生成海报或  PDF</li>\n<li>捕获网站时间线，帮助诊断性能问题（Lighthouse 就是使用了无头浏览器的技术的性能测量工具，他可生成各种性能数据以及网页加载时的快照，以辅助前端做一些性能优化</li>\n</ol>\n<p>以上，无头浏览器的作用非常强大；今天我就以 posterman 这个比较简单但是很有代表性的服务，来讲一下在前端的具体应用。</p>\n<h1 id=\"posterMan-简介\"><a href=\"#posterMan-简介\" class=\"headerlink\" title=\"posterMan 简介\"></a>posterMan 简介</h1><p>类似于网抑云音乐，知乎的划线笔记。用户在截屏时可以生成封面海报。</p>\n<center><img src=\"/images/poster.jpg\" width=\"320px\" /></center>\n\n<p>posterMan 是一个 Node 服务。当我们提供一个 url 链接给到 posterMan 时，即可生成相应的封面截图。</p>\n<h2 id=\"海报生成链路\"><a href=\"#海报生成链路\" class=\"headerlink\" title=\"海报生成链路\"></a>海报生成链路</h2><center><img src=\"/images/link.png\" width=\"640px\" /></center>\n\n<h2 id=\"Puppteer-相关介绍\"><a href=\"#Puppteer-相关介绍\" class=\"headerlink\" title=\"Puppteer 相关介绍\"></a>Puppteer 相关介绍</h2><blockquote>\n<p>译：木偶；基于 CDP（Chrome devtools-protocol） 封装的 Node 库</p>\n</blockquote>\n<p>原理:</p>\n<ol>\n<li>基于 WebSocket，利用 WebSocket 实现与浏览器内核的快速数据通道</li>\n<li>CDP 分为多个域，每个域中都定义了相关的命令和事件（Commands and Events）</li>\n<li>基于 CDP 封装一些工具对 Chrome 浏览器进行调试及分析</li>\n</ol>\n<h2 id=\"Puppeteer-VS-Phantomjs\"><a href=\"#Puppeteer-VS-Phantomjs\" class=\"headerlink\" title=\"Puppeteer VS Phantomjs\"></a>Puppeteer VS Phantomjs</h2><table style=\"width:100%\">\n  <tr>\n    <th></th>\n    <th>puppeteer</th>\n    <th>phantomjs</th>\n  </tr>\n  <tr>\n    <td>环境依赖</td>\n    <td>依赖 Node</td>\n    <td>Linux: GLIBCXX_3.4.9 和 GLIBC_2.7</td>\n  </tr>\n  <tr>\n    <td>更新进度</td>\n    <td>持续更新（V1.8）</td>\n    <td>停止更新（V2.1）</td>\n  </tr>\n  <tr>\n    <td>JavaScript 标准</td>\n    <td>新的ES 标准</td>\n    <td>ES5</td>\n  </tr>\n  <tr>\n    <td rowspan=\"3\">整体优点</td>\n    <td>持续更新，功能性能可期</td>\n    <td>部署快捷方便，基本上达到了开箱即用</td>\n  </tr>\n  <tr>\n    <td>使用新ES标准，对异步事件处理更简便</td>\n    <td>脚本语言更适合原生开发，学习成本低</td>\n  </tr>\n  <tr>\n    <td>支持chrome插件</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td rowspan=\"3\">整体缺点</td>\n    <td>部署相对复杂，且需要翻墙</td>\n    <td>已经停更</td>\n  </tr>\n  <tr>\n    <td>java端调用仍需使用cmd和shell调用，node端可直接使用</td>\n    <td>只能通过 cmd 和 shell 调用</td>\n  </tr>\n  <tr>\n    <td></td>\n    <td>开放的api较少, 且调试过程复杂</td>\n  </tr>\n</table>\n\n<h3 id=\"Puppeteer-模拟用户操作\"><a href=\"#Puppeteer-模拟用户操作\" class=\"headerlink\" title=\"Puppeteer 模拟用户操作\"></a>Puppeteer 模拟用户操作</h3><center><img src=\"/images/op.png\" width=\"640px\" /></center>\n\n<h2 id=\"链接池-Generic-pool\"><a href=\"#链接池-Generic-pool\" class=\"headerlink\" title=\"链接池 Generic pool\"></a>链接池 Generic pool</h2><p>当用户访问调用 posterMan 时，就会创建一个 puppteer 的实例子，但是当我们的服务访问量巨大的时候，频繁的创建和销毁连接会产生非常大的系统开销。这个时候，链接池 Generic pool 就隆重登场了。</p>\n<h3 id=\"线程池-合理配置\"><a href=\"#线程池-合理配置\" class=\"headerlink\" title=\"线程池-合理配置\"></a>线程池-合理配置</h3><center><img src=\"/images/pool.png\" width=\"300px\" /></center>\n\n<ol>\n<li>合理设置连接池数；posterMan 阈值（min：2；Max：10）</li>\n<li>尽可能利用缓存，减少对数据库的查询。</li>\n<li>使用完一个数据库连接后，尽快释放给管理池。</li>\n</ol>\n<h1 id=\"纯前端实现有两种方式\"><a href=\"#纯前端实现有两种方式\" class=\"headerlink\" title=\"纯前端实现有两种方式\"></a>纯前端实现有两种方式</h1><h2 id=\"利用CanvasAPI-（html2Canvas）\"><a href=\"#利用CanvasAPI-（html2Canvas）\" class=\"headerlink\" title=\"利用CanvasAPI （html2Canvas）\"></a>利用CanvasAPI （html2Canvas）</h2><ol>\n<li>递归取出目标模版的所有 DOM 节点，填充到一个 rederList，并附加是否为顶层元素/包含内容的容器 等信息</li>\n<li>通过 z-index postion float等css属性和元素的层级信息将 rederList 排序，计算出一个 canvas 的 renderQueue</li>\n<li>遍历 renderQueue，将 css 样式转为 setFillStyle 可识别的参数，依据 nodeType 调用相对应 canvas 方法，如文本则调用 fillText，图片 drawImage，设置背景色的 div 调用 fillRect 等</li>\n<li>将画好的canvas填充进页面</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>无法渲染跨域资源(支持同域)</li>\n<li>无法渲染 iFrame和 Flash 内容</li>\n<li>大量的递归和计算会非常缓慢</li>\n</ol>\n<h2 id=\"SVG\"><a href=\"#SVG\" class=\"headerlink\" title=\"SVG\"></a>SVG</h2><ol>\n<li>首先，我们要声明一个基础的svg模版，这个模版需要一些基础的描述信息，最重要的，它要有<foreignObject></foreignObject>这对标签</li>\n<li>将要渲染的 DOM 模版模版嵌入 foreignObject</li>\n<li>利用 Blob 构建 SVG 图像</li>\n<li>取出 URL</li>\n</ol>\n<p>一个最为严肃的问题在于：SVG 无法加载外部资源，也就是说，在 SVG 里面，无论是还是 或者 CSS 中的背景图, 这些资源都是无法加载的。在使用 canvas 实现时，因为我们使用 Node 去绘制，所以不存在资源引用的问题。但使用 SVG  实现，相当于我们把文档交给 SVG 再来渲染，这对于我们来说是其实是无法控制的黑盒操作，是受 SVG 限制的</p>\n<center>\n    <img src=\"/images/diff.png\" width=\"700px\" />\n</center>\n","categories":["Node.js"],"tags":[]},{"title":"一件悲伤的事","url":"http://jocolorful.com/2020/09/28/一件悲伤的事/","content":"<p>有一个梦我做了很多遍：就是牙齿蛀掉了一拔就拔出来了，没有一点疼痛，然后我就把所有的牙都拔光了。梦醒之后我甚至在网上搜了「梦见自己蛀牙意味着什么」，周公解梦大多都是负面消极的解答。</p>\n<p>这个梦真的不止一次出现了，这大概是驱使我认真刷牙的动力。即便不是这个梦的意味带来的影响，为了吃饭倍棒我也要好好刷牙。</p>\n<p>可是现实中的这一天还是来了，没有一丝丝防备 😫</p>\n<p>大牙旁边的那颗牙齿，以前从外面看就不太健康，不是一般牙齿通透的白，能够很明显感受到里面黑乎乎的存在。以前问医生说是黑色素的沉淀。</p>\n<p>忧患最终还是变成了现实，今天它崩了，几乎有四分之一都没了漏出了狰狞的黑洞🧎‍♀️。我想里面健康完整的部分可能不剩可怜的一半。</p>\n<p>在大陆补牙实在太贵，如果在台湾有健保的话可能不到十元 RMB 就能补好牙齿。不过幸好今天它崩了，因为以他蛀虫的趋势，里面变得更大再崩可能就没有机会补了。</p>\n<center>\n--------------------------------- 2020.10.07---------------------------------</center>\n\n<p>该来的还是来了，10.01 拍了牙片，我要做根管治疗了（回家我把嘴张给爸爸看，确实要做治疗了）。7 号回北京医生说我的洞蛀得太大需要打桩。oh my baby father！我… … 其实我爸是牙医，对于牙科材料的成本我爸是最清楚的（除了肉痛还有羞耻，作为牙医的女儿，不爱护好牙齿，牙齿还需要其他人来做，我… …）补吧，第一次麻药让我第二天睡到了十点，没有想象中的那么恐怖。值得欣慰的是，医生说我的其他牙齿都很健康。</p>\n<p>奥，回家的时候看了老家的房子，7k+，可惜时间太短前期功课做得也很不充分就不了了之，不过家里的环境真的要比帝都好太多，爸爸看到我去看房了非常开心，不过和以前回家不同的是，他们都会催我快点回去工作，这次居然没催我，反而让我好好呆在北京 🤔 我不想成为一个不稳定因素，即使我的心是向往自由。只有在一个地方稳定持续的发展才是对自己的人生有利的吧。可是我又挺想回去了，带着我的百万宝宝。孤独感都是从回家到机场，下地铁到出租屋这段路上，工作的时间会冲淡这种感觉。回到北京的出租屋里，金百万正在睡觉。她并没有我想象中的那么想我, 过了好一阵子才表现出亲昵。</p>\n<p>假期我给炉石组了新的卡组，感觉用得还挺顺手的，能够冲到黄金 8 了, 之前都是白银3、4徘徊 😂，我居然象小学生一样沉迷网游了, hhhhh</p>\n<p>自己感兴趣的东西也挺多，不过确实也得精简下注意力了。</p>\n<p>「想做的梦从不怕别人看见」</p>\n<p>自己搞的 weekly 还挺有用，至少会在工作上提醒我下一周应该做哪些工作。我是不是改搞一个生活 weekly，interesting。</p>\n","categories":["生活随感"],"tags":[]},{"title":"关于疯狂输出与摸 🐟","url":"http://jocolorful.com/2020/09/27/关于疯狂输出与摸🐟/","content":"<p>最近自己搞了一个 weekly，每周五的时候自己总结本周的输出以及下周 todo，放在自己空间下还挺有成就感的。不过以后带不走就很尴尬。</p>\n<p>参加了 HR 的画画活动，希望能拿到两份小奖品，嘻嘻。</p>\n<p>北漂看山带着月饼踏上了回家之路，TA 要回去看亲爱的爸爸妈妈</p>\n<center><img src=\"/images/kanshan-moon.jpg\" width=\"350px\" /></center>\n\n<p>两只兔子遥望地球许下了心愿，希望她们的愿望能够成真。</p>\n<center><img src=\"/images/moon.jpg\"  width=\"500px\" /></center>\n\n<p>33th 🌟 是要吃一次螺蛳粉，打开外卖盖子那一刻臭味迎面扑来，我毫不犹豫地说了句「WOC」。我很怀疑自己能吃得下去并且开始有些佩服吃螺蛳粉的人。赶紧把汤汁倒进粉里，臭味压下去了一些。然后开始搅拌起来，鼻子逐渐接受了这个味道。捞起来尝了一根很不错。嗨，想念铜梁的手工酸辣粉了。忍不住对比起来，各有特色，不过辣劲还是老家的给劲儿。北京的变态辣对我来说都是变态咸或者变态油。</p>\n<p>这个月我爸买了新车🚗。本来打算一起陪他去看的，但是他前一天说「我明天要去买车了」，结果第二天他就把车开回了家（这就是我爸雷厉风行，一次性全款毫不心疼）。新车是五座的，我得好好让他规划一下国庆带我们去哪里玩。（我还是自己规划好了，我估计他会把大把时间花在麻将桌上… …</p>\n<p>30 号的高铁回重庆，有些期待 🐶</p>\n","categories":["生活随感"],"tags":[]},{"title":"Redis 那些事","url":"http://jocolorful.com/2020/09/06/Redis那些事/","content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行</p>\n</blockquote>\n<p>2008 年，一家意大利创业公司嫌弃 MySQL 的性能，所以就自己搞了套数据库：Redis。这个个人开发的数据库究竟有哪些特性吸引着开发者？我将一一研读探秘：</p>\n<h1 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h1><h2 id=\"存储结构\"><a href=\"#存储结构\" class=\"headerlink\" title=\"存储结构\"></a>存储结构</h2><p>Redis 的全称是 Remote Dictionary Server（远程字典服务器）</p>\n<p>Redis 的键值除了是字符串还可以是其他数据类型：</p>\n<ol>\n<li>字符串</li>\n<li>散列</li>\n<li>列表</li>\n<li>集合</li>\n<li>有序集合</li>\n</ol>\n<h2 id=\"内容存储与持久化\"><a href=\"#内容存储与持久化\" class=\"headerlink\" title=\"内容存储与持久化\"></a>内容存储与持久化</h2><p>所有的数据都存储在内存中，内存的读写速度快于硬盘，一秒内可读写超过十万个键值。</p>\n<h2 id=\"功能丰富\"><a href=\"#功能丰富\" class=\"headerlink\" title=\"功能丰富\"></a>功能丰富</h2><p>键值的 TTL 、单线程模型、可实现队列</p>\n<h2 id=\"简单稳定\"><a href=\"#简单稳定\" class=\"headerlink\" title=\"简单稳定\"></a>简单稳定</h2><h1 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h1><h2 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h2><p>字符串类型是 Redis 中最基本的类型，它能存储任何形式的字符串，包括二进制数据。是其他 4 种数据类型的基础，一个字符串类型键最大哦的容量是 512 MB。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">SET key value<br>GET key<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"散列类型\"><a href=\"#散列类型\" class=\"headerlink\" title=\"散列类型\"></a>散列类型</h2><p>散列即 hash，其存储了字段 field 和 字段值的映射，「但字段值只能是字符串」，不支持其他数据类型。所以散列类型不能嵌套其他数据类型。</p>\n<img src=\"/images/hash.png\"  width=\"500px\"/>\n\n<p>命名规范一般遵守：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">key: 对象类型:id<br>field: 属性<br>value: 字段值<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">HSET key field value<br>HGET key field<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"列表类型\"><a href=\"#列表类型\" class=\"headerlink\" title=\"列表类型\"></a>列表类型</h2><p>Redis 列表类型内部使用双向链表（double linked list）实现，越接近两端速度越快，常用操作是两列表两端添加元素，或者获取列表片段。列表类型适合用来记录日志或者网站新鲜事。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">LPUSH key value or RPUSH key value<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"集合类型\"><a href=\"#集合类型\" class=\"headerlink\" title=\"集合类型\"></a>集合类型</h2><p>集合：不保证顺序、唯一</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">SADD key member<br>SREM key member<br></code></pre></td></tr></table></figure>\n<h2 id=\"有序集合\"><a href=\"#有序集合\" class=\"headerlink\" title=\"有序集合\"></a>有序集合</h2><ol>\n<li>内部是通过散列表和跳跃表实现的，所以即使读取中间的数据速度也很快（O(log(N))）</li>\n<li>列表对于位置的调整不太方便，但有序集合可以（更改元素分数即可）</li>\n<li>有序集合更消耗内存</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">ZADD key score memeber<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"类型对比\"><a href=\"#类型对比\" class=\"headerlink\" title=\"类型对比\"></a>类型对比</h2><table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">使用场景</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">string</td>\n<td align=\"left\">用于存储普通数据，int，string等等类型的基本类型数据</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">hash</td>\n<td align=\"left\">通常用于存储数据对象类型</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">list</td>\n<td align=\"left\">用于存储一些有序列表</td>\n<td align=\"left\">双端操作较快，适用于日志、 可实现队列（其实我也没实践过，哭</td>\n</tr>\n<tr>\n<td align=\"left\">set</td>\n<td align=\"left\">无序集合</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">sort set</td>\n<td align=\"left\">有序集合</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>有些关于 Redis Key 命名的设计规范，我借鉴了 <a href=\"https://www.infoq.cn/article/lxpytc3KckJPi72E8L3P\" target=\"_blank\" rel=\"noopener\">Redis 开发设计规范及案例分析</a> 做了以下总结，并且在实际场景中有所运用</p>\n<ol>\n<li>可读性： 以业务名为前缀，用冒号分隔，可使用业务名：子业务名：id 的结构命名，子业务下多单词可再用下划线分隔。</li>\n<li>简洁性：这里需要控制 key 的长度，key 的占用内存不容忽视。</li>\n<li>不包含转义：不包含空格、换行、单双引号以及其他转义字符。</li>\n</ol>\n<h1 id=\"一些高级用法\"><a href=\"#一些高级用法\" class=\"headerlink\" title=\"一些高级用法\"></a>一些高级用法</h1><h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><p>事务是「一组命令」的集合：要么执行，要么都不执行。只有所有的命令都执行完成才能得到每个结果的返回值。</p>\n<h3 id=\"事务的错误：\"><a href=\"#事务的错误：\" class=\"headerlink\" title=\"事务的错误：\"></a>事务的错误：</h3><ol>\n<li>语法错误：只要有一个错误就会不会执行。</li>\n<li>运行错误：如果某条命令错误，那么其他命令会继续执行。（Redis 并没有事务回滚 rollback 的功能</li>\n</ol>\n<h3 id=\"WATCH\"><a href=\"#WATCH\" class=\"headerlink\" title=\"WATCH\"></a>WATCH</h3><p>防止竞态：在 GET 获得键值后不被其他客户端修改。直到函数完成后才允许其他客户端修改。</p>\n<p>请出事务家族的另外一位成员「WATCH」</p>\n<p>WATCH 命令可以监控一个或者多个键，一旦其中一个键被修改或删除之后的事务就不再执行。监控直到 EXEC 执行。</p>\n<h2 id=\"过期时间\"><a href=\"#过期时间\" class=\"headerlink\" title=\"过期时间\"></a>过期时间</h2><p>通过 EXPIRE 设置某个 key 的过期时间</p>\n<h2 id=\"访问频次限制\"><a href=\"#访问频次限制\" class=\"headerlink\" title=\"访问频次限制\"></a>访问频次限制</h2>","categories":["后端相关"],"tags":["Redis"]},{"title":"Hackathon","url":"http://jocolorful.com/2020/09/06/Hackathon/","content":"<p>令人快乐的事：这周 Hackthon 我们拿了 final！</p>\n<center><img src=\"/images/127A0435.JPG\" width=\"600px\" /></center>\n\n<p>今年的 Hackthon 的主题是「聚焦创作者」</p>\n<p>（我想金亚哥哥考试成绩一定很好，因为他押题很准，毕竟船长在海盗船里一直传递这个想法）</p>\n<p>我们的战队名字叫PPA（Power Point Athon）回头来看了眼群公告：里面的内容包括了 「联调沙盒」、「立项」、「PPT」、「数据摸底」、「设计文档」… 不知道其他团队的公告是什么样的，但从公告里看得出我们确实做了充分的准备。</p>\n<h1 id=\"Day-1\"><a href=\"#Day-1\" class=\"headerlink\" title=\"Day 1\"></a>Day 1</h1><p>主题「聚焦创作者」发送至各个海盗邮箱。脑暴开始，大家把自己的 idea 写进了 Google 文档。我想的 idea 是创作者成团和内容分发相关，以下👇</p>\n<p>来个鸡汤：一个人可以走很快，但一群人可以走很远。为什么普通的创作者死得快，因为他们没有专业的技能。<br>但是一个团队就不一样了，每个人只要发挥自己的特长就行。我们打造一个「成团榜单」即可，就像 Hackthon 吧。（PS，即便是快手、抖音应该也有专业的团队来运营这些号。但是，他们有专门的系统来帮助他们成团并且运营吗？我不知道。。。hhhh）</p>\n<h1 id=\"Day-2\"><a href=\"#Day-2\" class=\"headerlink\" title=\"Day 2\"></a>Day 2</h1><p>晚上「快闪课堂」idea 筛选。从晚 7 点 到 晚 9 点。各抒己见之后决定利用百度云的 SDK</p>\n<ol>\n<li>基于视频检索，提供视频素材检索能力</li>\n<li>搜索框可以搜索到视频，提供一个视频搜索产品方案</li>\n<li>视频素材热度趋势排行榜</li>\n</ol>\n<h1 id=\"Day-3\"><a href=\"#Day-3\" class=\"headerlink\" title=\"Day 3\"></a>Day 3</h1><p>基于 idea 产出产品原型，明确分工。同时还分析出了我们的成本其中包括人力成本、推广成本、技术成本（媒体分析 百度云 单价6元/小时、服务器、CDN、数据库…）</p>\n<ol>\n<li>PM: 老张、双男、张湃</li>\n<li>运营：程赛</li>\n<li>设计：静远</li>\n<li>前端：周颖、德镇</li>\n<li>后端：茗一、后斌</li>\n<li>数据分析：舒鸿</li>\n<li>演讲家：侯策</li>\n<li>整体进度：金亚</li>\n</ol>\n<p>金亚哥哥看上去像一个 CEO（只有傻子才等到周四才开始想）。前端利用已有的项目 xen 搭建了一个小页面。大家还脑暴了产品名字：积木计划！</p>\n<h1 id=\"Day-4\"><a href=\"#Day-4\" class=\"headerlink\" title=\"Day 4\"></a>Day 4</h1><p>比赛拉开序幕后，大家开始写码。其他组似乎还在脑暴 idea，我们组看起来格外的轻松。我甚至边写还边溜达，Hackthon 的伙食不错：各类小食，饮料，水果。写码不是件难事，难的是 iead 的产出和设计（静远老师相当给力）当然演讲是最重要的一环。侯老师和舒鸿也在认真准备 PPT。（舒鸿是耐看型的，侯老师眼光不错）</p>\n<h1 id=\"Day-5\"><a href=\"#Day-5\" class=\"headerlink\" title=\"Day 5\"></a>Day 5</h1><p>The last day。</p>\n<p>早上八点多我就到公司暗中观察，这些年轻小伙子们太理智了，居然没人通宵！</p>\n<p>xen 的 app 实在太多，构建非常耗时。导致交付前两小时有些凌乱。我抱着我的猪排饭紧盯着 zae 的构建，吃饭时甚至不敢讲话。当构建完成后，我和德镇的 Demo 终于能够串联起来，我俩终于松了口气。然后我就拎着不知道谁的滑板出去玩了。</p>\n<center><img src=\"/images/huaban\" width=\"300px\" /></center>\n\n<p>我也是没心没肺，回来时已经是带着受伤的猪蹄。德镇还在处理好物推荐的 bug，侯老师他们找了个小黑屋准备演讲。我拿着冰块敷着猪蹄 … 吃着鸡米花。我自嘲道，我这个样子怎么上台领奖呢？</p>\n<p>下午三点是作品 Battle Time。说实话，没有几个作品给我留下了深刻的印象，即便是获得人气奖的「摘星计划」</p>\n<p>今天公布第一名的时候，我看到积木计划愣了几秒，感觉有些陌生（我心里一直想的是 PPA 战队，后来反应过来，确实是我们嘛）。主持人说我们组看上去是比赛过程中最悠闲的一组，还拿着自己的手环到处交换颜色，确实也是如此 🤦‍♀️</p>\n<center><img src=\"/images/127A1071.JPG\" width=\"500px\" /></center>\n\n<center><img src=\"/images/money.jpg\" width=\"500px\" /></center>\n\n\n<center>同时周五也是我登船一周年的纪念日。</center>\n\n<p>我在 Qunar 也参加了很多的活动，什么趣味运动会、1024 视频活动、Code Review …每次想拿个奖都费了很大的力气。而这次大家都付出了努力，致敬每一位认真对待的参赛者！</p>\n<p>Hackthon 已经过去两天，当我回顾这次旅程时我的心情依旧感到快乐并且难以平静。</p>\n","categories":["生活随感"],"tags":[]},{"title":"🧗‍♀️当我爬山时，我在想什么？","url":"http://jocolorful.com/2020/08/29/climb/","content":"<p>作为一个户外的领队，我可以很自豪的说我爬过这些山： 东北灵，凤凰岭 妙峰山 阳台山（三山穿越）、百花山、玉渡山、五台（东台）、坡峰岭… …实在太多就不一一罗列。那当爬山时我在想些什么？</p>\n<p>一开始接触户外时，我就走了一个三峰（连续爬三座山，完事儿后还逛了个商场吃了个火锅）此时我发现我骨骼惊奇，开始有空就出门爬山。后来参加青青的次数太多觉得不划算，索性自己也当个领队好了。</p>\n<h1 id=\"初来乍到\"><a href=\"#初来乍到\" class=\"headerlink\" title=\"初来乍到\"></a>初来乍到</h1><p>其实作为一名合格的社畜，周末有时间爬山是非常难能可贵的。上一家公司加班尤为严重，所以刚开始接触爬山时，经过了一周的职场 PUA，在爬升的过程中我满脑子都是「我为什么就不能在家里睡个懒觉，非要跟这群不认识的人爬山？」、「这群人为什么走得这么快，我太弱了… …」、「这到底什么时候才是个头啊？」</p>\n<p>作为一个审慎的弱 🐔，在看见陡峭的岩石时会她会在心里暗暗盘算：我接下来应该这么走以便于好下脚；当手脚并用的爬过一段山路时，她会感到非常得意！当她一不小心摔了个屁股：害，糗大了！当她第一次拿到手台进行调频和其他人进行沟通时：哇，这个好神奇啊！香港电影的保安也用这个！</p>\n<h1 id=\"弱鸡进化时\"><a href=\"#弱鸡进化时\" class=\"headerlink\" title=\"弱鸡进化时\"></a>弱鸡进化时</h1><p>山爬多了，弱鸡不再是弱鸡。她俨然成了一只魔王小鸡… …山路崎岖、风景独秀已经不再能让魔王鸡感到振奋以及新奇。那是什么支撑着魔王鸡爬山呢？</p>\n<p>最简单的理由是习惯吧！当然完美地进行一次徒步或者攀登，弱鸡队员们对魔王鸡表示的感谢同样也鼓舞着她继续带队。</p>\n<p>一个人爬山和一群人爬山途中的想法会略有不同：</p>\n<p>今天恰好一个人爬了香八拉，在登好汉坡的时候我告诉自己：既然已经出来了，就不用过多地追求速度，而是应该享受爬山的过程。当我爬到快山顶回头望时，风景是真真地好。</p>\n<center><img src=\"/images/xiangbala.jpg\"  width=\"300px\" /></center>\n\n<p>如果我没有爬过这里的经验，我有勇气带队员来这里吗？我的答案是否定的，因为人生总是充满了意外。作为组织者，如果有任何意外我都必须负起一定的责任。</p>\n<p>出门前我带了两瓶速溶，作为一个咖啡因患者，喝咖啡是我的习惯。但是爬山的时候我真正需要的是矿泉水。所以更应该关注：「你需要什么，而不是你喜欢什么」</p>\n<p>有一条小道我走叉了，因为我顾着和群里聊天忘记看路了… 幸好及时修正了过来</p>\n<p>“如果小熊在，她肯定又要走一些奇奇怪怪的路。”</p>\n<p>“阿凯也曾经一个人走过这条路线”</p>\n<p>… …</p>\n<p>当我一个人在爬山时，我在想什么👆？爬完之后我感觉更加的笃定，心情也相应地平静下来。</p>\n<p>那一群人爬山时，我在想什么？</p>\n<p>（这个人怎么还不走？这个人体力太差了，应该多锻炼多锻炼；这个小孩子太皮了，管都管不住。这个队员会不喜欢我今天的表现吗？… …）</p>\n<p>一群人爬山时也有一群人的快乐，比如今年就认识了废物无限的元老成员，当个废物没有什么不好。一群人爬山不会给个人留太多的思考时间，我们会一起聊天、唱歌拍照，会做游戏会做一切令人快乐的事。也经常会遇到同行，我们会有共同的语言：Javascript！</p>\n<p>趁着心血来潮就先写到这里，我也不知道该写些什么了。当我爬山时，下一次我希望什么都不用想… …</p>\n","categories":["生活随感"],"tags":[]},{"title":"定时整理 - 夏日随想","url":"http://jocolorful.com/2020/08/06/夏日随想/","content":"<p>很浮躁，趁着没什么需求就随便记录点什么吧。觉得自己是一个充满了 bug 的人。<br>是不是该花点时间读书了？读书笔记很久没有写了。</p>\n<p>我发现我有很多想法，但是我会把这些想法删了又删，我其实好像还是很怕暴露自己的想法。</p>\n<p>我没有归纳总结的能力，就算是有我很难得到教训…</p>\n<p>我需要不断充实自己，因为    我想离开这座城市。</p>\n<p>在离开这里前我想去这些城市 👇</p>\n<table>\n<thead>\n<tr>\n<th>起点</th>\n<th>终点</th>\n<th>想去的地方</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>北京</td>\n<td>泰安</td>\n<td>泰山</td>\n</tr>\n<tr>\n<td></td>\n<td>秦皇岛</td>\n<td>阿那亚</td>\n</tr>\n<tr>\n<td></td>\n<td>山东</td>\n<td>长岛</td>\n</tr>\n<tr>\n<td></td>\n<td>吉林</td>\n<td>长白山</td>\n</tr>\n</tbody></table>\n<p>先摸 🐟 到这里吧，毕竟还是要学习，hhh… 如果我今天有其他的想法，晚上我会在记录一下。如果没有就 End     ～</p>\n","categories":["生活随感"],"tags":[]},{"title":"如何优雅地处理前端异常？","url":"http://jocolorful.com/2020/07/09/catch-error/","content":"<p>原文：<a href=\"https://zhuanlan.zhihu.com/p/51800345\" target=\"_blank\" rel=\"noopener\">如何优雅处理前端异常？</a></p>\n<h1 id=\"异常的种类\"><a href=\"#异常的种类\" class=\"headerlink\" title=\"异常的种类\"></a>异常的种类</h1><ol>\n<li>JS 语法错误、代码异常</li>\n<li>Ajax 请求异常</li>\n<li>静态资源加载异常</li>\n<li>Promise 异常</li>\n<li>iframe 异常</li>\n<li>跨域 Script error</li>\n<li>崩溃和卡顿</li>\n</ol>\n<p>对于第二点：Ajax 异常，我更偏好称之为 http 异常<br>对于第四点：Promise 异常，我更偏好称之为异步异常</p>\n<h1 id=\"异常的处理\"><a href=\"#异常的处理\" class=\"headerlink\" title=\"异常的处理\"></a>异常的处理</h1><p>针对以上异常的种类，我们来看一下怎么处理：</p>\n<h2 id=\"try-catch-的误区\"><a href=\"#try-catch-的误区\" class=\"headerlink\" title=\"try-catch  的误区\"></a>try-catch  的误区</h2><blockquote>\n<p>try-catch 只能捕获到同步的运行时错误，对语法和异步错误却无能为力</p>\n</blockquote>\n<h2 id=\"window-onerror-并不是万能的\"><a href=\"#window-onerror-并不是万能的\" class=\"headerlink\" title=\"window.onerror 并不是万能的\"></a>window.onerror 并不是万能的</h2><ol>\n<li>同步异常可捕获</li>\n<li>语法错误不能捕获</li>\n<li>异步异常可捕获</li>\n</ol>\n<blockquote>\n<p>onerror 最好写在所有 JS 脚本的前面，否则有可能捕获不到错误；onerror 无法捕获语法错误；</p>\n</blockquote>\n<h2 id=\"window-addEventListener\"><a href=\"#window-addEventListener\" class=\"headerlink\" title=\"window.addEventListener\"></a>window.addEventListener</h2><p>当静态资源加载失败会触发 error 事件。由于网络请求异常不会事件冒泡，因此必须在捕获阶段将其捕捉到才行，但是这种方式虽然可以捕捉到网络请求的异常，但是无法判断 HTTP 的状态是 404 还是其他比如 500 等等，所以还需要配合服务端日志才进行排查分析才可以。</p>\n<h2 id=\"Promise-Catch\"><a href=\"#Promise-Catch\" class=\"headerlink\" title=\"Promise Catch\"></a>Promise Catch</h2><p>promise 的 catch 可以非常容易地捕获异步的错误。</p>\n<p>没有 catch 的 Promise 中抛出的错误无法被 onError 或 try-catch捕获到。所以务必要写 catch 处理抛出异常。</p>\n<p>解决方案： 为了防止有漏掉的 Promise 异常，建议在全局增加一个对 unhandledrejection 的监听，用来全局监听Uncaught Promise Error。使用方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\"unhandledrejection\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>&#123;<br>  <span class=\"hljs-built_in\">console</span>.log(e)<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p>那如果对 Promise 不进行 catch 呢:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">\"unhandledrejection\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>&#123;<br>  e.preventDefault()<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'捕获到异常：'</span>, e)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span><br>&#125;)<br><br><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>  reject(<span class=\"hljs-string\">'jartto: promise error'</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p><font color=\"red\">如果去掉控制台的异常显示，需要加上：</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">event.preventDefault()<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"React-的异常处理\"><a href=\"#React-的异常处理\" class=\"headerlink\" title=\"React 的异常处理\"></a>React 的异常处理</h2><p>UI的某部分引起的 JS 错误不应该破坏整个程序，为了帮React的使用者解决这个问题，React 16介绍了一种关于错误边界</p>\n<p>注意： error boundaries并不会捕捉这些错误：</p>\n<ol>\n<li><p>事件处理器</p>\n</li>\n<li><p>异步代码</p>\n</li>\n<li><p>服务端的渲染代码</p>\n</li>\n<li><p>在error boundaries区域内的错误</p>\n</li>\n</ol>\n<h2 id=\"iframe-异常\"><a href=\"#iframe-异常\" class=\"headerlink\" title=\"iframe 异常\"></a>iframe 异常</h2><p>借助 window.onerror</p>\n<h2 id=\"script-异常\"><a href=\"#script-异常\" class=\"headerlink\" title=\"script 异常\"></a>script 异常</h2><h2 id=\"崩溃和卡顿\"><a href=\"#崩溃和卡顿\" class=\"headerlink\" title=\"崩溃和卡顿\"></a>崩溃和卡顿</h2><ol>\n<li>利用 window 对象的 「load」 和 「beforeunload」 事件实现了「网页崩溃」的监控</li>\n<li>使用 Service Worker 来实现网页崩溃的监控：<ol>\n<li>Service Worker 有自己独立的工作线程，与网页区分开，网页崩溃了，Service Worker 下不会崩溃；</li>\n<li>Service Worker 生命周期一般要比网页还要长，可以用来监控网页的状态；</li>\n<li>网页可以通过 navigator.serviceWorker.controller.postMessage API 向掌管自己的 SW发送消息</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"错误上报\"><a href=\"#错误上报\" class=\"headerlink\" title=\"错误上报\"></a>错误上报</h1><ol>\n<li>利用 Ajax 请求上报</li>\n<li>动态创建 img 标签的形式</li>\n</ol>\n<p>上报时，设置采集率以减少服务器压力</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">Reporter.send = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>&#123;<br>  <span class=\"hljs-comment\">// 只采集 30%</span><br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Math</span>.random() &lt; <span class=\"hljs-number\">0.3</span>) &#123;<br>    send(data)      <span class=\"hljs-comment\">// 上报错误信息</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>","categories":["前端相关"],"tags":[]},{"title":"GET 和 POST 的差异","url":"http://jocolorful.com/2020/07/07/2020-POST/","content":"<p>原文：<a href=\"https://segmentfault.com/a/1190000018129846\" target=\"_blank\" rel=\"noopener\">都9102年了，还问GET和POST的区别</a></p>\n<ol>\n<li><p>GET 和 POST 只是 HTTP 协议中两种请求方式，而 HTTP 协议是基于 TCP/IP 的应用层协议，无论 GET 还是 POST，用的都是同一个传输层协议，所以在传输层上，没有任何区别。</p>\n<ol>\n<li><p>当 GET 和 POST 「不携带参数」时，最大的区别是第一行方法名不同:<br>请求报文第一行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">GET /uri HTTP/1.1 \\r\\n<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">POST /uri HTTP/1.1 \\r\\n<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>当 GET 和 POST 「携带参数」时，安装约定 GET 方法的参数应该放在 URL 里，POST 方法的参数应该放在  body 中</p>\n<p>GET 简约版报文</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">GET /index.php?name=qiming.c&amp;age=22 HTTP/1.1<br>Host: localhost<br></code></pre></td></tr></table></figure>\n\n<p>POST 简约版报文</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">POST /index.php HTTP/1.1<br>Host: localhost<br>Content-Type: application/x-www-form-urlencoded<br>name=qiming.c&amp;age=22<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>「浏览器」的 URL 有长度限制是出于「安全」和「性能」考虑，在解析长 URL 时需防止恶意构造长 URL 来进行攻击，和 HTTP 协议本身没有关系。</p>\n</li>\n</ol>\n","categories":["协议 - 相关知识"],"tags":[]},{"title":"前端性能量化标准读后感","url":"http://jocolorful.com/2020/07/01/前端性能量化标准读后感/","content":"<p>祭出原 issue 👉 <a href=\"https://github.com/frontend9/fe9-library/issues/7\" target=\"_blank\" rel=\"noopener\">前端性能量化标准</a></p>\n<h1 id=\"它正在发生吗？\"><a href=\"#它正在发生吗？\" class=\"headerlink\" title=\"它正在发生吗？\"></a>它正在发生吗？</h1><p>FP：First paint 第一个像素绘制时间<br>FCP：First Content paint 首次内容绘制时间</p>\n<ol>\n<li><p>window.performance.getEntriesByType(‘paint’)</p>\n</li>\n<li><p>当然也可以使用 lighthouse，<br>这里我全局安装的 lighthouse</p>\n</li>\n</ol>\n<h1 id=\"它是否有用？\"><a href=\"#它是否有用？\" class=\"headerlink\" title=\"它是否有用？\"></a>它是否有用？</h1><p>FMP： First meaningful paint<br>hero element timing</p>\n<p>Lighthouse 使用的算法是：页面绘制布局「变化」最大的那次绘制（根据 页面高度/屏幕高度 调节权重）</p>\n<h1 id=\"它是否令人愉快的\"><a href=\"#它是否令人愉快的\" class=\"headerlink\" title=\"它是否令人愉快的\"></a>它是否令人愉快的</h1><p>Long tasks。</p>\n<p>JS 线程与 GUI 线程互斥。JS 如果在执行，那么渲染线程就会被阻塞。如果一个 LT 超过 50 ms ，就说明这个线程有问题。</p>\n<h1 id=\"它是否可用-？\"><a href=\"#它是否可用-？\" class=\"headerlink\" title=\"它是否可用 ？\"></a>它是否可用 ？</h1><p>TTI：Time to interactive（页面已经渲染并且可以响应用户交互）。不能响应用户的原因有：</p>\n<ol>\n<li>JS 的资源还未加载完。</li>\n<li>Long Task 阻塞了主线程</li>\n</ol>\n<h1 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>当然这片文章还提出了一些优化策略，优化过程应该是一个全链路的解决方案。</p>\n<p>关于测量标准记录这些，策略手段我想我的学习清单又是一篇长笔记！</p>\n","categories":["前端相关"],"tags":[]},{"title":"CSS 性能优化的 8 个技巧","url":"http://jocolorful.com/2020/06/19/CSS性能优化的8个技巧/","content":"<blockquote>\n<p>这周周会翼巧同学分享了「内联首屏关键CSS(Critical CSS)」我学习的热情又燃起来了！</p>\n</blockquote>\n<p>祭出原文👉 <a href=\"https://juejin.im/post/5ece2a1e6fb9a048021466b0?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">CSS性能优化的 8 个技巧</a></p>\n<p>翼巧同学使用的是第一种方式（但不是内联，是内嵌），反正我已经知道怎么做的了，来看看优缺点吧！</p>\n<h1 id=\"关键-CSS\"><a href=\"#关键-CSS\" class=\"headerlink\" title=\"关键 CSS\"></a>关键 CSS</h1><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>内联 CSS 能够使浏览器开始页面渲染的时间提前</li>\n</ol>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li><p>无法缓存 CSS</p>\n</li>\n<li><p>内嵌样式体积需要较小</p>\n</li>\n</ol>\n<h1 id=\"异步加载-CSS\"><a href=\"#异步加载-CSS\" class=\"headerlink\" title=\"异步加载 CSS\"></a>异步加载 CSS</h1><ol>\n<li>通过 script 标签异步创建 link 标签</li>\n<li><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"preload\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"mystyles.css\"</span> <span class=\"hljs-attr\">as</span>=<span class=\"hljs-string\">\"style\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.rel='stylesheet'\"</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h1 id=\"文件压缩\"><a href=\"#文件压缩\" class=\"headerlink\" title=\"文件压缩\"></a>文件压缩</h1><h1 id=\"去除无用-CSS\"><a href=\"#去除无用-CSS\" class=\"headerlink\" title=\"去除无用 CSS\"></a>去除无用 CSS</h1><ol>\n<li>保持简单，不要使用嵌套过多过于复杂的选择器</li>\n<li>通配符和属性选择器效率最低，需要匹配的元素最多，尽量避免使用</li>\n<li>不要使用类选择器和 ID 选择器修饰元素标签</li>\n<li>不要为了追求速度而放弃可读性与可维护性</li>\n</ol>\n<p>复习一遍： 为什么CSS选择器是从右向左匹配的</p>\n<blockquote>\n<p>CSS 中更多的选择器是不会匹配的，所以在考虑性能问题时，需要考虑的是如何在选择器「不匹配」时提升效率。从右向左匹配就是为了达成这一目的的，通过这一策略能够使得CSS选择器在不匹配的时候效率更高。这样想来，在匹配时多耗费一些性能也能够想的通了</p>\n</blockquote>\n<h1 id=\"减少使用昂贵的属性\"><a href=\"#减少使用昂贵的属性\" class=\"headerlink\" title=\"减少使用昂贵的属性\"></a>减少使用昂贵的属性</h1><h1 id=\"减少重排和避免重绘\"><a href=\"#减少重排和避免重绘\" class=\"headerlink\" title=\"减少重排和避免重绘\"></a>减少重排和避免重绘</h1><h1 id=\"不要使用-import\"><a href=\"#不要使用-import\" class=\"headerlink\" title=\"不要使用 @import\"></a>不要使用 @import</h1><p>使用@import引用的 CSS 文件只有在引用它的那个css文件被「下载、解析」之后，浏览器才会知道还有另外一个 CSS 需要下载，这时才去下载，然后下载后开始解析、构建render tree等一系列操作。这就导致浏览器无法并行下载所需的样式文件。</p>\n<p>直接导致的后果：</p>\n<p>当然是异步加载完的重绘</p>\n<p>That’s All !</p>\n<p>犹梦杰同学分享了一个高大上的分享，反正我是听不到太懂？ 我决定周末在家无聊的时候补一下。hiahiahia</p>\n","categories":["漂亮的 CSS"],"tags":[]},{"title":"我的学习清单","url":"http://jocolorful.com/2020/06/19/ReadList/","content":"<h1 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h1><h1 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h1><ul>\n<li><input disabled=\"\" type=\"checkbox\"> Mercury</li>\n</ul>\n<h1 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h1><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"http://jocolorful.com/2020/05/25/%E6%88%91%E9%9C%80%E8%A6%81%E8%83%8C%E4%BC%9A%E7%9A%84%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/\">css加载会造成阻塞吗</a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://juejin.im/post/5c35953ce51d45523f04b6d2\" target=\"_blank\" rel=\"noopener\">不可思议的纯 CSS 滚动进度条效果</a></li>\n</ul>\n<h1 id=\"工程能力\"><a href=\"#工程能力\" class=\"headerlink\" title=\"工程能力\"></a>工程能力</h1><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"\">前端缓存最佳实践</a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/frontend9/fe9-library/issues/7\" target=\"_blank\" rel=\"noopener\">前端性能量化标准</a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://zhuanlan.zhihu.com/p/51800345\" target=\"_blank\" rel=\"noopener\">如何优雅处理前端异常？</a></li>\n</ul>\n<h1 id=\"阅读书单\"><a href=\"#阅读书单\" class=\"headerlink\" title=\"阅读书单\"></a>阅读书单</h1><h1 id=\"电影\"><a href=\"#电影\" class=\"headerlink\" title=\"电影\"></a>电影</h1><h1 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h1><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> iTerm2 的总结</li>\n<li><input disabled=\"\" type=\"checkbox\"> sublime 配置</li>\n</ul>\n","categories":[],"tags":["学习清单"]},{"title":"天空之城","url":"http://jocolorful.com/2020/05/28/天空之城/","content":"<center>\n我是天空里的云\n\n<p>投影在你的城</p>\n<p>你是否看得见</p>\n<p>那阵细雨有我的泪</p>\n<p>我放任在天空飞</p>\n<p>随风飘舞任风吹</p>\n<p>你是否还在那座城里</p>\n<p>坚守着我的归期</p>\n<p>不曾后悔爱过你</p>\n<p>你是我最美的回忆</p>\n<p>点点滴滴那些甜蜜抹不去</p>\n<p>全都是你的回忆</p>\n<p>你看那 看那  片天空</p>\n<p>依旧像昨天的蔚蓝</p>\n<p>你听那  听那  一阵风</p>\n<p>风里全都是我的思念</p>\n<p>不曾后悔爱过你</p>\n<p>你是我最美的回忆</p>\n<p>点点滴滴  那些甜蜜抹不去</p>\n<p>全都是你的回忆</p>\n<p>你看那  看那  片天空</p>\n<p>依旧像昨天的蔚蓝</p>\n<p>你听那  听那  一阵风</p>\n<p>风里全都是我的思念</p>\n<p>我是天空里的云</p>\n<p>投影在你的城</p>\n<p>你是否看得见</p>\n<p>那阵细雨有我的泪</p>\n<p>我放任在天空飞</p>\n<p>随风飘舞任风吹</p>\n<p>你是否还在那座城里</p>\n<p>坚守着我的归期 坚守着我的归期</p>\n</center>","categories":[],"tags":["小欢喜"]},{"title":"关于在 Koa 中全局注入反作弊的思考","url":"http://jocolorful.com/2020/05/26/Koa全局注入反作弊/","content":"<p>我查阅过的资料</p>\n<p><a href=\"https://juejin.im/post/5ece2a1e6fb9a048021466b0?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">一杯茶的时间，上手 Koa2 + MySQL 开发</a></p>\n<p>前言：我们的项目是借助 Wepack，配置两套打包的脚本，分别输出服务端渲染「SSR」以及客户端渲染「CSR」所需要的资源。服务端渲染是利用「Koa」 以及渲染引擎 「Mustache」输出首屏内容。</p>\n<p>以上</p>\n<p>反作弊的状态码由后端返回</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">const MEMBER_FROZEN_EXCEPTION_MAP &#x3D; &#123;<br>  40350: &#39;abuseip&#39;,<br>  40351: &#39;imfrozen&#39;,<br>  40352: &#39;unhuman&#39;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>http status 状态码为 403 时需要进行异常处理。</p>\n<p>Node 端和 Client 端本身就是隔离的（所以有了同构技术），需要考虑在不同环境对<code>http status</code>的处理。</p>\n<p>我可以联想到以下关键字👇</p>\n<p>「中间件」「责任链模式」「洋葱模型」「你是否真的懂 try…catch」</p>\n<h1 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h1><blockquote>\n<p>为什么叫中间件？因为出于 Http 的 Request 和 Response 中间，用来实现某种功能。</p>\n</blockquote>\n<p>我的老板提出这个问题时，我几乎立刻抖了个机灵：写个中间件呗？（因为我室友就是专业写中间件的，hahaha）</p>\n<p>老板：嗯？Koa 基于洋葱模型，那能拿到 http 状态吗？</p>\n<p>抖机灵：从 ctx 取呗？</p>\n<p>老板：那 C 端怎么做呢？</p>\n<p>抖机灵：从 fetch 请求直接 reject 出来！</p>\n<img src=\"/images/koa.png\"  width=\"500px\" />\n\n<p>哦! Koa 对标 Express 底层 <a href=\"https://github.com/senchalabs/connect\" target=\"_blank\" rel=\"noopener\">connect</a></p>\n<img src=\"/images/onion.png\"  width=\"500px\" />\n\n<p>嘿嘿嘿，虽然把网上这个图抄过来了。但是我们可以仔细看看这个中间件的设计！什么设计？顺序！</p>\n<p>目前我们的 xen 项目已经有了各类错误上抛的机制，我在想在 中间件 的基础上是否能在加入</p>\n<ol>\n<li>缓存控制的中间件</li>\n</ol>\n<p>还没想好，想好在补吧</p>\n","categories":["Node.js"],"tags":[]},{"title":"CSS 加载会造成阻塞吗？","url":"http://jocolorful.com/2020/05/25/CSS 加载会造成阻塞吗/","content":"<p><a href=\"https://github.com/Nealyang/PersonalBlog/issues/48\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<h1 id=\"👉-CSS-加载会造成阻塞吗\"><a href=\"#👉-CSS-加载会造成阻塞吗\" class=\"headerlink\" title=\"👉 CSS 加载会造成阻塞吗\"></a><a href=\"https://juejin.im/post/5b88ddca6fb9a019c7717096\" target=\"_blank\" rel=\"noopener\">👉 CSS 加载会造成阻塞吗</a></h1><p>读后感：</p>\n<p>在浏览器引擎渲染的世界里，我简单地将 HTML 呈现给用户的方式分为了两个过程：加载以及渲染。</p>\n<p>DOM 树从上至下依次<strike>渲染</strike> 解析。遇到 script 标签时，默认会阻止页面解析并平行下载 JS 文件。所以大部分的文章建议你将 JS 文件放在 body 后面，这样不会影响 HTML 的解析。</p>\n<p>属性<code>defer</code>以及<code>async</code>不会阻塞页面解析，文档解析完成之后，<code>defer</code> 和 <code>async</code> 脚本执行。<code>defer</code>以及<code>async</code> 的区别在于：<code>defer</code>执行脚本的顺序是加载顺序 而<code>async</code>则不能保证顺序。同时这两个属性都只在外链时生效，即含有<code>src</code>属性时生效。</p>\n<p>在看完文章之后，我再次</p>\n<h1 id=\"提问？\"><a href=\"#提问？\" class=\"headerlink\" title=\"提问？\"></a>提问？</h1><p>既然问题是 CSS 是否会造成阻塞，那么阻塞什么内容呢？</p>\n<p>DOM 的解析？DOM 的渲染？JS 的加载？JS的执行？</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>以上我们可以分析出：</p>\n<ol>\n<li><p>CSS 的加载并不会阻塞 DOM 的解析</p>\n</li>\n<li><p>CSS 的加载会阻塞 DOM 的渲染</p>\n</li>\n<li><p>CSS 的加载不会阻塞 JS 的加载，JS 加载阻塞和 script 标签的位置以及是否含有 <code>defer</code> 和 <code>async</code> 属性相关</p>\n</li>\n<li><p>CSS 的加载会阻塞「后面 JS」语句的执行，（DOMContentLoaded 内容解析完成）因为 JS 有可能需要操作前面 DOM 的样式。其他其他情况下，DOMContentLoaded 都不会等待 CSS 加载，并且 DOMContentLoaded 事件也不会等待图片、视频等其他资源加载。</p>\n</li>\n</ol>\n","categories":["漂亮的 CSS"],"tags":[]},{"title":"他山之石","url":"http://jocolorful.com/2020/05/23/实用Demo整理/","content":"<h1 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h1><p><a href=\"https://mdnice.com/\" target=\"_blank\" rel=\"noopener\">📓 微信公众号排版</a><br><a href=\"https://carbon.now.sh/\" target=\"_blank\" rel=\"noopener\">🎨 代码界的美图秀秀</a><br><a href=\"https://sequelpro.com/download\" target=\"_blank\" rel=\"noopener\">🐬 MySQL 可视化工具</a></p>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><p><a href=\"https://codesandbox.io/s/sortabletree-pwrfv\" target=\"_blank\" rel=\"noopener\">👉 使用 react-dnd 实现拖拽 </a><br><a href=\"https://codesandbox.io/s/draft-js-highlight-ir4bd\" target=\"_blank\" rel=\"noopener\">👉 使用 draft.js 实现编辑器文本高亮</a></p>\n","categories":["他山之石"],"tags":[]},{"title":"搬砖公主折腾记","url":"http://jocolorful.com/2020/05/11/搬砖公主折腾记/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这也不知道是我第几次折腾博客了，希望是最后一次！<br>我的博客是基于 Hexo 的静态页面生成<br>在不断折腾博客的时候，我总结了几个坑👇</p>\n<ol>\n<li>源文件经常丢失。</li>\n<li>图片存储在七牛云，强依赖第三方过了几年有些图片已经不能正常显示。🤦‍♀️</li>\n<li>能动性不强，一年也就更个两三篇。</li>\n<li>主题常常跑偏…</li>\n</ol>\n<h1 id=\"回归之路\"><a href=\"#回归之路\" class=\"headerlink\" title=\"回归之路\"></a>回归之路</h1><blockquote>\n<p>给自己提问：为什么要重新记录这个博客？我是否能够坚持？</p>\n</blockquote>\n<p>记录这个博客的原因很简单：</p>\n<ol>\n<li><p>换电脑需要配置一些环境时，我希望能够有一份完善的配置记录，我能够无脑 copy 配置。</p>\n</li>\n<li><p>作为一名前端开发，我希望能够有技术沉淀。将近三年的开发经验让我养成了「问为什么」的习惯。我希望我弄能掌握每个知识点。当然我的我的脸皮足够厚，即便到了第三个工作的年头，我依旧承认有些 HTML 的属性我并不是完全掌握。</p>\n</li>\n<li><p>我能够坚持吗？hhhh，我自己都持怀疑态度，也许有人监督会好一些吧。但是我希望每一篇文章都足够高质量并且用心，有时候并不是为了产出而产出。可能会记更多 bug 以及思考之类的？</p>\n</li>\n</ol>\n<p>暂时只想到这些吧，源文件的丢失导致我得重新生成把以前的博客整理一下</p>\n<p>当然，我希望我的博客不仅仅只有技术，这里也融入了我对生活的态度。</p>\n","categories":["生活随感"],"tags":[]},{"title":"iTerm2","url":"http://jocolorful.com/2020/05/11/2/","content":"<p>iTerm2 是我常用的终端工具，每次换电脑安装的第一个软件就是它。青睐于 iTerm 的原因很简单：</p>\n<ol>\n<li>支持分屏模式</li>\n<li>可配置插件</li>\n<li>颜值 online</li>\n</ol>\n<p>I love this black cat background！</p>\n<img src=\"/images/iterm.png\"  width=\"500px\"/>\n\n<h1 id=\"Shell-冷知识\"><a href=\"#Shell-冷知识\" class=\"headerlink\" title=\"Shell 冷知识\"></a>Shell 冷知识</h1><p>前端开发往往不关心 *nix 内核。Shell 仅仅只是一个「壳」而已。我们借助 Shell 和内核打交道。Mac 自带终端的 Shell 是 bash。常见的 Shell 有 sh、bash、zsh、csh</p>\n<p>通过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">cat &#x2F;etc&#x2F;shells<br></code></pre></td></tr></table></figure>\n\n<p>可以查看安装<br><img src=\"/images/cat.png\"  width=\"300px\"/></p>\n<h1 id=\"zsh\"><a href=\"#zsh\" class=\"headerlink\" title=\"zsh\"></a>zsh</h1><h2 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git <span class=\"hljs-built_in\">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh<br>cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc<br>chsh -s /bin/zsh<br></code></pre></td></tr></table></figure>\n\n<p>换回bash</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">chsh -s /bin/bash<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"自动安装\"><a href=\"#自动安装\" class=\"headerlink\" title=\"自动安装\"></a>自动安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"必备插件\"><a href=\"#必备插件\" class=\"headerlink\" title=\"必备插件\"></a>必备插件</h2><p><a href=\"https://github.com/ohmyzsh/ohmyzsh\" target=\"_blank\" rel=\"noopener\">ohmyzsh</a><br>itermpreference.png</p>\n<p>内置了 git 的插件管理 还有一些漂亮的主题，这里不在赘述</p>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><p>对于日常开发我常用分屏模式，已经能够满足对于多个窗口的诉求</p>\n<p>command + D<br>command + shift + D</p>\n<h3 id=\"默认打开工作区\"><a href=\"#默认打开工作区\" class=\"headerlink\" title=\"默认打开工作区\"></a>默认打开工作区</h3><p>在 preference 的设置里面，我勾选了 Reuse previous session‘s directory。</p>\n<img src=\"/images/itermpreference.png\"  width=\"300px\"/>\n\n<p>这样每次打开都是从上一个工作区切出来的目录，这对于一个项目需要启动多个端口来说非常友好。</p>\n<h3 id=\"open-Buff\"><a href=\"#open-Buff\" class=\"headerlink\" title=\"open Buff\"></a>open Buff</h3><p>其实这算事 iTerm 的一个 Buff，我给 ~/.zshrc 配置了 open 命令的别名：</p>\n<img src=\"/images/itermalias.png\"  width=\"300px\"/>\n\n<p>这使得我可以使用终端快速打开文件。据我所知 atom 自带了 atom 命令来实现这个效果，但是我更倾向于自己 DIY，而不是依赖 IDE。这也是我选择 sublime 的原因。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">subl &#123;path&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"颜值-Buff\"><a href=\"#颜值-Buff\" class=\"headerlink\" title=\"颜值 Buff\"></a>颜值 Buff</h3><p>做为一只颜狗，我给 iTerm2 配置了背景图，并且设置了默认的行列数，以减少手动放大 iTerm2。</p>\n<img src=\"/images/itermbg.png\"  width=\"300px\"/>\n","categories":[],"tags":[]},{"title":"iTerm2","url":"http://jocolorful.com/2020/05/11/iterm2/","content":"<p>iTerm2 是我常用的终端工具，每次换电脑安装的第一个软件就是它。青睐于 iTerm 的原因很简单：</p>\n<ol>\n<li>支持分屏模式</li>\n<li>可配置插件</li>\n<li>颜值 online</li>\n</ol>\n<p>I love this black cat background！</p>\n<img src=\"/images/iterm.png\"  width=\"500px\"/>\n\n<h1 id=\"Shell-冷知识\"><a href=\"#Shell-冷知识\" class=\"headerlink\" title=\"Shell 冷知识\"></a>Shell 冷知识</h1><p>前端开发往往不关心 *nix 内核。Shell 仅仅只是一个「壳」而已。我们借助 Shell 和内核打交道。Mac 自带终端的 Shell 是 bash。常见的 Shell 有 sh、bash、zsh、csh</p>\n<p>通过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">cat &#x2F;etc&#x2F;shells<br></code></pre></td></tr></table></figure>\n\n<p>可以查看安装<br><img src=\"/images/cat.png\"  width=\"300px\"/></p>\n<h1 id=\"zsh\"><a href=\"#zsh\" class=\"headerlink\" title=\"zsh\"></a>zsh</h1><h2 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git <span class=\"hljs-built_in\">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh<br>cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc<br>chsh -s /bin/zsh<br></code></pre></td></tr></table></figure>\n\n<p>换回bash</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">chsh -s /bin/bash<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"自动安装\"><a href=\"#自动安装\" class=\"headerlink\" title=\"自动安装\"></a>自动安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"必备插件\"><a href=\"#必备插件\" class=\"headerlink\" title=\"必备插件\"></a>必备插件</h2><p><a href=\"https://github.com/ohmyzsh/ohmyzsh\" target=\"_blank\" rel=\"noopener\">ohmyzsh</a><br>itermpreference.png</p>\n<p>内置了 git 的插件管理 还有一些漂亮的主题，这里不在赘述</p>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><p>对于日常开发我常用分屏模式，已经能够满足对于多个窗口的诉求</p>\n<p>command + D<br>command + shift + D</p>\n<h3 id=\"默认打开工作区\"><a href=\"#默认打开工作区\" class=\"headerlink\" title=\"默认打开工作区\"></a>默认打开工作区</h3><p>在 preference 的设置里面，我勾选了 Reuse previous session‘s directory。</p>\n<img src=\"/images/itermpreference.png\"  width=\"300px\"/>\n\n<p>这样每次打开都是从上一个工作区切出来的目录，这对于一个项目需要启动多个端口来说非常友好。</p>\n<h3 id=\"open-Buff\"><a href=\"#open-Buff\" class=\"headerlink\" title=\"open Buff\"></a>open Buff</h3><p>其实这算事 iTerm 的一个 Buff，我给 ~/.zshrc 配置了 open 命令的别名：</p>\n<img src=\"/images/itermalias.png\"  width=\"300px\"/>\n\n<p>这使得我可以使用终端快速打开文件。据我所知 atom 自带了 atom 命令来实现这个效果，但是我更倾向于自己 DIY，而不是依赖 IDE。这也是我选择 sublime 的原因。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">subl &#123;path&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"颜值-Buff\"><a href=\"#颜值-Buff\" class=\"headerlink\" title=\"颜值 Buff\"></a>颜值 Buff</h3><p>做为一只颜狗，我给 iTerm2 配置了背景图，并且设置了默认的行列数，以减少手动放大 iTerm2。</p>\n<img src=\"/images/itermbg.png\"  width=\"300px\"/>\n","categories":[],"tags":[]},{"title":"十三陵","url":"http://jocolorful.com/2020/03/05/十三陵/","content":"<h1 id=\"十三陵\"><a href=\"#十三陵\" class=\"headerlink\" title=\"十三陵\"></a>十三陵</h1><p>三月六号即将去往十三陵，对于这种历史积淀较深的景点自然是不敢怠慢。奈何历史不好，对于明朝的影响无非就是小学看的电视剧《穿越时空的爱恋》，故得好好准备一番。</p>\n<p>明朝共有16位皇帝，但北京的明十三陵只有13位皇帝，未入陵者因由各异。明朝开国皇帝朱元璋早年建都于南京，死后葬于南京紫金山的“孝陵”；继位的明太祖朱元璋长孙明惠帝朱允炆，在其叔父燕王朱棣（即后来的明成祖）发起“靖难之役”攻破南京之后下落不明，加上永乐帝不承认其帝位，因此没有帝陵；第七帝明代宗朱祁钰，在其兄明英宗于土木堡之变被瓦剌所俘之后登上帝位。后来明英宗复辟，朱祁钰速死，明英宗不承认其帝位，捣毁其在天寿山修建的寿陵。还有一说，寿陵被改建为在位仅29天的明光宗的陵墓，改名为庆陵。明宪宗以亲王身份将他葬于北京西郊金山的景泰陵。</p>\n<p>大家前往的时候能够看见黄色琉璃屋顶，就知道是皇帝的陵园。但是因为分布众多，再加上交通不便和疫情影响，大部分只去往部分的开放景点，一般人走不完皇帝的最后归处。</p>\n<center><img src=\"/images/wKgEaVyGWPiASqXiAAipDFOOPKI84.jpeg\" width=\"500\" /></center>\n\n<h1 id=\"长陵「明成祖」\"><a href=\"#长陵「明成祖」\" class=\"headerlink\" title=\"长陵「明成祖」\"></a>长陵「明成祖」</h1><p>明长陵为明朝第三位皇帝明成祖朱棣的陵墓。为明十三陵的第一陵，也是主陵。陵内安葬明成祖朱棣和徐皇后。</p>\n<h1 id=\"献陵「明仁宗」\"><a href=\"#献陵「明仁宗」\" class=\"headerlink\" title=\"献陵「明仁宗」\"></a>献陵「明仁宗」</h1><p>明仁宗是明成祖朱棣长子，生母徐皇后为徐达之女。</p>\n<h1 id=\"景陵「明宣宗」\"><a href=\"#景陵「明宣宗」\" class=\"headerlink\" title=\"景陵「明宣宗」\"></a>景陵「明宣宗」</h1><h1 id=\"裕陵「明英宗」朱祁镇\"><a href=\"#裕陵「明英宗」朱祁镇\" class=\"headerlink\" title=\"裕陵「明英宗」朱祁镇\"></a>裕陵「明英宗」朱祁镇</h1><p>明英宗「朱祁镇」是明朝第六任、第八任皇帝（1435—1449年、1457—1464年两次在位）。</p>\n<p>第一次继位称帝，年仅九岁，年号正统。国事全由太皇太后张氏把持，贤臣「三杨」主政。随之，张氏驾崩，三杨去位，宠信太监「王振」，导致宦官专权。</p>\n<p>正统十四年（1449年），发生土木堡之变。</p>\n<p>朱祁镇不顾吏部尚书王直等群臣反对，偕同王振率军五十余万御驾亲征。命皇弟郕王朱祁钰留守京师。此次出征，诏下两日五十万大军即匆忙集结启程，各项准备均不足，上下一片混乱。亲征诏书下达后，英宗对文武大臣的多次劝谏置之不理。英宗虽然名为亲征，但军务大事皆由监军太监王振决定，将领处处受王振节制，无法按己意指挥作战，而王振不懂军事，指挥接连失当，致使明军屡战屡败。</p>\n<p>土木堡之变是明朝由盛转衰的标志性事件。</p>\n<p>朱祁镇北伐瓦剌却惨败被俘的事变，其弟郕王「朱祁钰」登基称帝，遥尊英宗为太上皇，改元景泰。</p>\n<p>后英宗回京，被景泰帝软禁于南宫。景泰八年（1457年），石亨等人发动夺门之变，英宗复位，第二次称帝，改元天顺。</p>\n<p>明英宗复辟，朱祁钰速死，明英宗不承认其帝位，捣毁其在天寿山修建的寿陵。明宪宗以亲王身份将他葬于北京西郊金山的景泰陵。</p>\n<p>朱祁镇前后在位二十二年，在位初期励精图治稳定西南疆域。当初宠信王振，后来又宠信曹吉祥、石亨，政治上虽然有不足之处，但是晚年任用李贤，听信纳谏，仁俭爱民，美善很多。还废除了「殉葬制度」。天顺八年（1464年）明英宗病逝。庙号英宗，谥曰法天立道仁明诚敬昭文宪武至德广孝睿皇帝。葬于明十三陵之裕陵。</p>\n<h1 id=\"茂陵「明宪宗」朱见深\"><a href=\"#茂陵「明宪宗」朱见深\" class=\"headerlink\" title=\"茂陵「明宪宗」朱见深\"></a>茂陵「明宪宗」朱见深</h1><h1 id=\"泰陵「明孝宗」\"><a href=\"#泰陵「明孝宗」\" class=\"headerlink\" title=\"泰陵「明孝宗」\"></a>泰陵「明孝宗」</h1><p>朱祐樘</p>\n<p>明孝在位初期，励精图治、整肃朝纲、改革弊政，罢逐了朝中奸佞之臣、重用贤士，为于谦建祠平冤，减轻赋税、停征徭役、兴修水利、发展农业、繁荣经济，史称「弘治中兴」。</p>\n<p>清朝的学者对弘治中兴一直争论不休，褒扬者有之，怀疑者亦有之。弘治朝的功过是非，有人认为所谓的弘治中兴名不副实，它只是一个短暂、勉强的「治世」</p>\n<p>不为人知的历史趣事：朱祐樘发明家？据美国牙医学会的资料表示，明孝宗于 1498年 把猔毛插进一支 「骨制手把」上制成了牙刷。</p>\n<h1 id=\"康陵「明武宗」\"><a href=\"#康陵「明武宗」\" class=\"headerlink\" title=\"康陵「明武宗」\"></a>康陵「明武宗」</h1><p>武宗是明朝极具争议性的统治者。</p>\n<p>他任情恣性，为人嬉乐胡闹，荒淫无度。有时也抢夺有夫之妇，逸游无度。施政荒诞不经，朝廷乱象四起<br>又信仰密宗、伊斯兰教等，自称忽必烈（蒙古名，元世祖之名）、沙吉熬烂（波斯语，伊斯兰教苏菲派的苏菲师）、苏莱曼沙阿（波斯语）、大宝法王（藏密名，白教首领）。</p>\n<p>另一方面，他为人刚毅果断，，平定安化王、宁王之乱，在<br>「应州之役」中击败达「延汗」，令鞑靼多年不敢深入，并积极学习他国文化，促进中外交流，体现出有为之君的素质，是一位功过参半的皇帝。</p>\n<h1 id=\"永陵「明世宗」\"><a href=\"#永陵「明世宗」\" class=\"headerlink\" title=\"永陵「明世宗」\"></a>永陵「明世宗」</h1><p><a href=\"https://baike.baidu.com/item/%E6%9C%B1%E5%8E%9A%E7%86%9C/2412426?fromtitle=%E5%98%89%E9%9D%96%E7%9A%87%E5%B8%9D&fromid=2374776\" target=\"_blank\" rel=\"noopener\">嘉靖</a>朱厚熜</p>\n<h1 id=\"昭陵「明穆宗」\"><a href=\"#昭陵「明穆宗」\" class=\"headerlink\" title=\"昭陵「明穆宗」\"></a>昭陵「明穆宗」</h1><p>明镜昭廉<br>「明代反贪尚廉历史观光园处」</p>\n<p><a href=\"https://www.dpm.org.cn/court/lineage/226264\" target=\"_blank\" rel=\"noopener\">穆宗隆庆皇帝</a> （唐太宗李世民陵墓也叫昭陵，位于 陕西 省 咸阳 市）</p>\n<p>按照传统的说法，隆庆帝也是一位「节俭仁厚」的君主。在隆庆帝在位期间，几乎没有爆发什么重大的变故，隆庆帝得以稳坐皇位六年且，仅6年，去世时 36 岁。</p>\n<p>这一切与他的童年经历密切相关，因生母杜康妃失宠，又非长子，朱载垕小时很少得到父爱。嘉靖三十二年（1553年），刚满 16 岁的朱载垕就开始了在「裕王邸」的独居生活。在裕王邸 13年 的生活，使朱载垕较多地接触到社会生活各方面，了解到明王朝的各种矛盾和危机，特别是严嵩专政，朝纲颓废，官吏腐败，「南倭北虏」之患，民不聊生之苦，内忧外患使他关心朝局，对他登基后处理政务有着较大的影响。</p>\n<h1 id=\"定陵「明神宗」\"><a href=\"#定陵「明神宗」\" class=\"headerlink\" title=\"定陵「明神宗」\"></a><a href=\"https://baike.baidu.com/item/%E6%98%8E%E5%AE%9A%E9%99%B5/878416?fromtitle=%E5%AE%9A%E9%99%B5&fromid=45384\" target=\"_blank\" rel=\"noopener\">定陵</a>「明神宗」</h1><p>十三陵中最大的三座陵园：成祖长陵、世宗永陵、神宗定陵</p>\n<p>明星没隐私，皇帝没私坟。</p>\n<p>1956年 - 1957 年 对定陵进行了挖掘</p>\n<p>1958 对外发布消息：「明十三陵中定陵已打开……明朝第十三位皇帝朱翊钧和他的两个皇后尸体腐烂，骨架完好，头发软而有光。尸骨周围塞满了无数的金银玉器和成百匹的罗纱织锦… …」一经公布，引发了海内外无数艳羡的目光和赞叹之声。</p>\n<p>1966年，在「文化大革命」期间，定陵却被当做「牛鬼蛇神」批斗，万历皇帝及两位皇后（孝端、孝靖）的尸骨棺椁被毁。且由于当时人们文物保护意识不强和发掘技术有限，使定陵出土的大量丝织品未得到及时有效的保护，迅速风化，因此，定陵的发掘也被认为是考古史上的一大悲剧。</p>\n<p>此后，国家出台政策不再「主动」挖掘帝王陵墓。</p>\n<h1 id=\"庆陵「明光宗」\"><a href=\"#庆陵「明光宗」\" class=\"headerlink\" title=\"庆陵「明光宗」\"></a>庆陵「明光宗」</h1><p>朱常洛 - 一月天子</p>\n<p>该陵墓原为「景泰帝」所建，因景泰帝为英宗复辟时所贬，葬于西郊金山，所以空出一处皇陵。</p>\n<p>由于明光宗在位时间仅 29 天，来不及修建陵墓，故继位的「明熹宗」朱由校将光宗安葬于此陵墓。</p>\n<p><a href=\"http://book.sbkk8.com/lishigushi/zhuchangluo/150447.html#:~:text=%E6%9C%B1%E5%B8%B8%E6%B4%9B%E5%AF%B9%E4%BA%8E%E5%A4%A7%E6%98%8E%E7%8E%8B%E6%9C%9D%E7%9A%84,%E6%9C%80%E7%BB%88%E6%AD%BB%E4%BA%8E%E7%BA%A2%E4%B8%B8%E3%80%82\" target=\"_blank\" rel=\"noopener\">死因</a>莫衷一是，三百余年来，史学家设想了种种答案，但没有一种令人信服</p>\n<h1 id=\"德陵「明熹宗」\"><a href=\"#德陵「明熹宗」\" class=\"headerlink\" title=\"德陵「明熹宗」\"></a>德陵「明熹宗」</h1><p>光宗即位仅一月便驾崩，使朱由校匆匆登基为帝，朱由校当时年仅十四岁，未曾被立为太子，甚至未接受过正规教育，政事皆赖宦官辅佐，后来造就太监魏忠贤等人的干政，与阉党、东林党之党争。</p>\n<h1 id=\"思陵\"><a href=\"#思陵\" class=\"headerlink\" title=\"思陵\"></a><a href=\"https://www.sohu.com/a/415553314_120514979\" target=\"_blank\" rel=\"noopener\">思陵</a></h1><p>明朝最后一位皇帝：崇祯之墓。<br>崇祯上位之时，明朝已经是风雨飘摇，内忧外患。<br>崇祯十五年时，心爱的田贵妃去世，然而此时却是大明王朝最为危难的时刻，这一年明清之间规模最大的一场决战：松锦之战。<br>在东北：九边精锐损失殆尽，一众大将带领投降。<br>在中原：李自成和张献忠不断攻破城池。</p>\n<p>明朝节节败退，大片地区沦陷。</p>\n<p>即便这样的情形，崇祯出于对贵妃的思念还是决定在天平寿山修建陵寝。</p>\n<p>万万没想到的事，时隔两年，这座陵寝却成为崇祯自己的安葬之所。崇祯十七年，李自成攻破北京。李自成入宫后并没有找到崇祯本人,便在北京城内发下搜寻令：</p>\n<blockquote>\n<p>献帝者，赏万金，封伯爵；匿者，灭族</p>\n</blockquote>\n<p>第二天，在景山自缢的崇祯被找到，于是李自成下令，在东华门侧简单收殓了崇祯遗体，并搭建了临时性的灵棚。</p>\n<p>明朝官员生怕受崇祯牵连。谁也不敢前往吊唁，唯有襄城伯「李国桢」一人前往，跪在梓宫前踉跄大哭。</p>\n<p>李自成非常钦佩李国桢的勇气和忠心，于是对其进行了耐心的劝降，希望他能够为自己效力，而李国桢也随即开出了自己的三个“条件”：</p>\n<ul>\n<li><p>其一，对于明朝的皇陵，不仅不能破坏，还要予以防卫和保护；</p>\n</li>\n<li><p>其二，不能损毁崇祯的遗体，并且还要按照帝王规格礼仪进行妥善的安葬；</p>\n</li>\n<li><p>其三，李自成不能加害已经被他俘获的崇祯太子朱慈烺，以及另外两位皇子朱慈炯和朱慈炤，而是要进行善待。</p>\n</li>\n</ul>\n<p>对于上述三点要求，李自成予以了照准，并着手准备崇祯皇帝的安葬工作，而由于此前崇祯并没有为自己修建陵寝，李自成随即决定将崇祯葬入田贵妃墓之中。</p>\n<h2 id=\"思陵现状\"><a href=\"#思陵现状\" class=\"headerlink\" title=\"思陵现状\"></a>思陵现状</h2><p>思陵屡逢劫难，残毁十分严重。地下墓室曾先后两次被当地土匪盗发。1947年，国民党军队为修炮楼，又大规模地拆毁陵园地面建筑。上世纪90年代，十三陵特区曾对明思陵进行过简单的修缮。 思陵并未对外开放，门口的镇宅神兽的头已经不见了，神兽亦被时光磨平了棱角。</p>\n","categories":["生活随感"],"tags":[]},{"title":"","url":"http://jocolorful.com/css/personal-style.css","content":"* {\n  transition-duration: .5s;\n  scroll-behavior: smooth;\n}\n\nhtml {\n  width: 100vw;\n  height: 100vh;\n}\n\nbody {\n  background: rgba(150, 220, 230, 0.35);\n}\n\n.article-content blockquote {\n  background: rgba(0, 0, 0, 0.02);\n  border-left: 6px solid rgba(0, 0, 0, 0.2);\n  padding: 1px 10px;\n  border-radius: 5px;\n  margin: 0 14px 14px;\n}\n\n.article-content blockquote  p {\n  line-height: 24px;\n  border-radius: 5px;\n  font-size: 13px;\n}\n.article-content li {\n  margin-bottom: 10px;\n}\n\n.page-header {\n  background: transparent;\n}\n\n\n\n.layout {\n  overflow: hidden;\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  width: 100vw;\n  height: 100vh;\n  background: url(https://img.zcool.cn/community/01c9905b858a3ca8012126ce7c37c0.jpg@1280w_1l_0o_100sh.jpg);\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n}\n.layout .category-box{\n  margin-top: 100px;\n}\n\n\n.layout .content-category-wrap .item-post .post-title {\n  font-size: 12px;\n  text-overflow: ellipsis;\n}\n\n.layout .content-category {\n  font-size: 12px;\n  width: 100%;\n}\n\n.layout .content-category-wrap {\n  position: relative;\n  padding-left: 20px;\n  width: 600px;\n  height: 100vh;\n  overflow: hidden scroll;\n}\n\n.content-category-wrap::-webkit-scrollbar {\n  display: none;\n}\n\n.layout .content-home {\n  position: relative;\n}\n\n.content-home .slogan,\n.content-home .name {\n  margin: 12px 0;\n  color: #333333;\n}\n\n.article-content a {\n  color: rgba(0,132,255, 0.9);\n}\n\n.content.content-archive .toolbox {\n  margin-left: -30px;\n}\n\n.page-header {\n  margin-bottom: 0px !important;\n}\n\n.page-header .list-toolbox {\n  display: block !important;\n}\n\n\na:hover {\n  color: #1890ff !important;\n}\n\n.highlight .html, .gutter{\n  display: none\n}\n\n.highlight {\n  background: black;\n}\n\n.pagination .next,\n.pagination .prev {\n  display: none !important;\n}\n\ncode,\nfigure.highlight {\n  padding-top: 40px;\n  background: rgb(39, 40, 34) !important;\n  color: rgb(248, 248, 242) !important;\n  position: relative;\n}\n\ncode {\n  padding: 2px 4px;\n  position: relative;\n}\n\n\n.highlight::after {\n  top: 12px;\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  position: absolute;\n  background: rgb(255, 95, 86);\n  content: '';\n}\n\n\n.highlight::before {\n  top: 12px;\n  left: 40px;\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  position: absolute;\n  background: rgb(255, 189, 46);\n  content: '';\n}\n\n.box-blog-info {\n  display: flex !important;\n  align-items: center;\n  margin-top: 20px;\n}\n\n.toolbox-list {\n  display: flex;\n  align-items: center;\n  margin: 0px 15px;\n}\n\n.item-toolbox a {\n  display: inline-block;\n  font-size: 12px;\n  line-height: 40px;\n  width: 40px;\n  display: inline-block;\n  height: 40px;\n  margin-right: 12px;\n  transition-duration: .5s;\n  text-align: center;\n  color: #555;\n  border-radius: 20px;\n  background: #f0f0f0;\n  transition: box-shadow .3s ease-in-out\n}\n\n.item-toolbox a:hover {\n  box-shadow: 0 0 0 3px #e6f7ff;;\n  background: #e6f7ff !important;\n  color: #1890ff !important;\n}\n\n.gt-btn {\n  background: #0084ff !important;\n  opacity: 0.9;\n}\n.gt-btn:hover {\n  opacity: 1;\n  transition-duration: .5s;\n}\n\n.gt-btn-text {\n  color: #FFF;\n}\n\n\n.content.content-search .wrap-search-box {\n  margin-top: 20px;\n}\n\n.content.content-link .link-list .link-item .link-url {\n  display: flex;\n}\n\n.content.content-link .link-list .link-item .wrap-info {\n  margin-left: 12px;\n  flex-direction: column;\n  display: flex !important;\n  justify-content: space-between !important;\n}\n\n.content.content-link .link-list .link-item {\n  padding: 12px 0;\n}\n\n.link-list .link-item .info {\n  font-size: 12px !important;\n}\n\n\n.box-prev-next {\n  margin-top: 20px;\n}\n\n.layout .category-box {\n  width: 80%;\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.layout .category-box .category-list .category-item .category-size {\n  font-family: serif;\n  font-weight: bold;\n}\n\n.category-box--top {\n  margin-bottom: 15px;\n}\n\n@media screen and (max-width: 450px) {\n  .layout {\n    overflow: hidden;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    width: 100vw;\n    height: 100vh;\n    background: url(https://img.zcool.cn/community/01c9905b858a3ca8012126ce7c37c0.jpg@1280w_1l_0o_100sh.jpg);\n    background-repeat: no-repeat;\n    background-size: 100% 100%;\n  }\n\n  .layout .category-box,\n  .layout .content-category-wrap {\n    display: none;\n  }\n}","categories":[],"tags":[]},{"title":"link","url":"http://jocolorful.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://jocolorful.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://jocolorful.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://jocolorful.com/category/index.html","content":"","categories":[],"tags":[]}]